
ExoGrasp_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9e4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800fc84  0800fc84  00010c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdc8  0800fdc8  0001107c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fdc8  0800fdc8  00010dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdd0  0800fdd0  0001107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdd0  0800fdd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fdd4  0800fdd4  00010dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  24000000  0800fdd8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053fc  2400007c  0800fe54  0001107c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005478  0800fe54  00011478  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c237  00000000  00000000  000110aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000522b  00000000  00000000  0003d2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002220  00000000  00000000  00042510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a93  00000000  00000000  00044730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fd43  00000000  00000000  000461c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cc9c  00000000  00000000  00085f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a9273  00000000  00000000  000b2ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025be15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009798  00000000  00000000  0025be58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  002655f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fc6c 	.word	0x0800fc6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800fc6c 	.word	0x0800fc6c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <SystemInit+0x12c>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <SystemInit+0x12c>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <SystemInit+0x12c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <SystemInit+0x12c>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <SystemInit+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <SystemInit+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ec <SystemInit+0x130>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemInit+0x134>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <SystemInit+0x134>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <SystemInit+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <SystemInit+0x134>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4938      	ldr	r1, [pc, #224]	@ (80007f0 <SystemInit+0x134>)
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <SystemInit+0x138>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <SystemInit+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <SystemInit+0x130>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SystemInit+0x130>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <SystemInit+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x134>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <SystemInit+0x13c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0x134>)
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemInit+0x140>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemInit+0x134>)
 8000752:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemInit+0x144>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemInit+0x134>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0x144>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemInit+0x134>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemInit+0x134>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemInit+0x144>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemInit+0x134>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemInit+0x134>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <SystemInit+0x134>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemInit+0x148>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <SystemInit+0x148>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <SystemInit+0x14c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemInit+0x150>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x154>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0x134>)
 80007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <SystemInit+0x134>)
 80007b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <SystemInit+0x134>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <SystemInit+0x158>)
 80007c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <SystemInit+0x134>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <SystemInit+0x134>)
 80007d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	580000c0 	.word	0x580000c0
 8000808:	5c001000 	.word	0x5c001000
 800080c:	ffff0000 	.word	0xffff0000
 8000810:	51008108 	.word	0x51008108
 8000814:	52004000 	.word	0x52004000

08000818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <ExitRun0Mode+0x2c>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <ExitRun0Mode+0x2c>)
 8000822:	f023 0302 	bic.w	r3, r3, #2
 8000826:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000828:	bf00      	nop
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <ExitRun0Mode+0x2c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <pressureController>:
 */

#include "controller.h"


void pressureController(float *pressure, float target_pressure, handState_t state) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	ed87 0a02 	vstr	s0, [r7, #8]
 8000854:	460b      	mov	r3, r1
 8000856:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <pressureController+0x1c>
 800085e:	2b01      	cmp	r3, #1
 8000860:	d015      	beq.n	800088e <pressureController+0x46>
				HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
			else
				HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_SET);
			break;
		default:
			break;
 8000862:	e039      	b.n	80008d8 <pressureController+0x90>
			HAL_GPIO_WritePin(THUMB_GPIO_Port, THUMB_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2110      	movs	r1, #16
 8000868:	481d      	ldr	r0, [pc, #116]	@ (80008e0 <pressureController+0x98>)
 800086a:	f005 fcef 	bl	800624c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(INDEX_GPIO_Port, INDEX_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	481b      	ldr	r0, [pc, #108]	@ (80008e0 <pressureController+0x98>)
 8000874:	f005 fcea 	bl	800624c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OTHER_SOL_GPIO_Port, OTHER_SOL_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2140      	movs	r1, #64	@ 0x40
 800087c:	4818      	ldr	r0, [pc, #96]	@ (80008e0 <pressureController+0x98>)
 800087e:	f005 fce5 	bl	800624c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2180      	movs	r1, #128	@ 0x80
 8000886:	4816      	ldr	r0, [pc, #88]	@ (80008e0 <pressureController+0x98>)
 8000888:	f005 fce0 	bl	800624c <HAL_GPIO_WritePin>
			break;
 800088c:	e024      	b.n	80008d8 <pressureController+0x90>
			HAL_GPIO_WritePin(THUMB_GPIO_Port, THUMB_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2110      	movs	r1, #16
 8000892:	4813      	ldr	r0, [pc, #76]	@ (80008e0 <pressureController+0x98>)
 8000894:	f005 fcda 	bl	800624c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(INDEX_GPIO_Port, INDEX_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2120      	movs	r1, #32
 800089c:	4810      	ldr	r0, [pc, #64]	@ (80008e0 <pressureController+0x98>)
 800089e:	f005 fcd5 	bl	800624c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OTHER_SOL_GPIO_Port, OTHER_SOL_Pin, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2140      	movs	r1, #64	@ 0x40
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <pressureController+0x98>)
 80008a8:	f005 fcd0 	bl	800624c <HAL_GPIO_WritePin>
			if (*pressure > target_pressure)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80008b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008be:	d505      	bpl.n	80008cc <pressureController+0x84>
				HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2180      	movs	r1, #128	@ 0x80
 80008c4:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <pressureController+0x98>)
 80008c6:	f005 fcc1 	bl	800624c <HAL_GPIO_WritePin>
			break;
 80008ca:	e004      	b.n	80008d6 <pressureController+0x8e>
				HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <pressureController+0x98>)
 80008d2:	f005 fcbb 	bl	800624c <HAL_GPIO_WritePin>
			break;
 80008d6:	bf00      	nop
	}
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58020c00 	.word	0x58020c00

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008ee:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008f0:	bf00      	nop
 80008f2:	4b45      	ldr	r3, [pc, #276]	@ (8000a08 <main+0x124>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d004      	beq.n	8000908 <main+0x24>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	1e5a      	subs	r2, r3, #1
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	dcf4      	bgt.n	80008f2 <main+0xe>
  if ( timeout < 0 )
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	da01      	bge.n	8000912 <main+0x2e>
  {
  Error_Handler();
 800090e:	f000 fc3b 	bl	8001188 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f001 f9d7 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000916:	f000 f893 	bl	8000a40 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800091a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a08 <main+0x124>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	4a39      	ldr	r2, [pc, #228]	@ (8000a08 <main+0x124>)
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092a:	4b37      	ldr	r3, [pc, #220]	@ (8000a08 <main+0x124>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000938:	2000      	movs	r0, #0
 800093a:	f005 fca1 	bl	8006280 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800093e:	2100      	movs	r1, #0
 8000940:	2000      	movs	r0, #0
 8000942:	f005 fcb7 	bl	80062b4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000946:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800094a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800094c:	bf00      	nop
 800094e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <main+0x124>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d104      	bne.n	8000964 <main+0x80>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	1e5a      	subs	r2, r3, #1
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dcf4      	bgt.n	800094e <main+0x6a>
if ( timeout < 0 )
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	da01      	bge.n	800096e <main+0x8a>
{
Error_Handler();
 800096a:	f000 fc0d 	bl	8001188 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096e:	f000 fa89 	bl	8000e84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000972:	f000 fa5f 	bl	8000e34 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000976:	f000 fa11 	bl	8000d9c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800097a:	f000 f981 	bl	8000c80 <MX_I2C1_Init>
  MX_ADC1_Init();
 800097e:	f000 f8d1 	bl	8000b24 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000982:	f000 f9bd 	bl	8000d00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_DMA_Init(&hdma_adc1);
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000986:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800098a:	2100      	movs	r1, #0
 800098c:	481f      	ldr	r0, [pc, #124]	@ (8000a0c <main+0x128>)
 800098e:	f002 feff 	bl	8003790 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim3);
 8000992:	481f      	ldr	r0, [pc, #124]	@ (8000a10 <main+0x12c>)
 8000994:	f00a f89e 	bl	800aad4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc_buffer[currentBufferIndex], TOTAL_SAMPLES);
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <main+0x130>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <main+0x134>)
 80009a2:	4413      	add	r3, r2
 80009a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80009a8:	4619      	mov	r1, r3
 80009aa:	4818      	ldr	r0, [pc, #96]	@ (8000a0c <main+0x128>)
 80009ac:	f001 fdf6 	bl	800259c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009b0:	f00b ff38 	bl	800c824 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 80009b4:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <main+0x138>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4819      	ldr	r0, [pc, #100]	@ (8000a20 <main+0x13c>)
 80009ba:	f00b ff7d 	bl	800c8b8 <osThreadNew>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <main+0x140>)
 80009c2:	6013      	str	r3, [r2, #0]

  /* creation of controllerTask */
  controllerTaskHandle = osThreadNew(startControllerTask, NULL, &controllerTask_attributes);
 80009c4:	4a18      	ldr	r2, [pc, #96]	@ (8000a28 <main+0x144>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4818      	ldr	r0, [pc, #96]	@ (8000a2c <main+0x148>)
 80009ca:	f00b ff75 	bl	800c8b8 <osThreadNew>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <main+0x14c>)
 80009d2:	6013      	str	r3, [r2, #0]

  /* creation of predictionTask */
  predictionTaskHandle = osThreadNew(startPredictionTask, NULL, &predictionTask_attributes);
 80009d4:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <main+0x150>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4817      	ldr	r0, [pc, #92]	@ (8000a38 <main+0x154>)
 80009da:	f00b ff6d 	bl	800c8b8 <osThreadNew>
 80009de:	4603      	mov	r3, r0
 80009e0:	4a16      	ldr	r2, [pc, #88]	@ (8000a3c <main+0x158>)
 80009e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f001 f861 	bl	8001aac <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f001 f85e 	bl	8001aac <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009f0:	2002      	movs	r0, #2
 80009f2:	f001 f85b 	bl	8001aac <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009f6:	2101      	movs	r1, #1
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f8cd 	bl	8001b98 <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 80009fe:	f00b ff35 	bl	800c86c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a02:	bf00      	nop
 8000a04:	e7fd      	b.n	8000a02 <main+0x11e>
 8000a06:	bf00      	nop
 8000a08:	58024400 	.word	0x58024400
 8000a0c:	24000098 	.word	0x24000098
 8000a10:	240001c8 	.word	0x240001c8
 8000a14:	2400096c 	.word	0x2400096c
 8000a18:	2400032c 	.word	0x2400032c
 8000a1c:	0800fcec 	.word	0x0800fcec
 8000a20:	08000ffd 	.word	0x08000ffd
 8000a24:	24000320 	.word	0x24000320
 8000a28:	0800fd10 	.word	0x0800fd10
 8000a2c:	080010ed 	.word	0x080010ed
 8000a30:	24000324 	.word	0x24000324
 8000a34:	0800fd34 	.word	0x0800fd34
 8000a38:	08001131 	.word	0x08001131
 8000a3c:	24000328 	.word	0x24000328

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b09c      	sub	sp, #112	@ 0x70
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4a:	224c      	movs	r2, #76	@ 0x4c
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f00e fc8e 	bl	800f370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2220      	movs	r2, #32
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00e fc88 	bl	800f370 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a60:	2004      	movs	r0, #4
 8000a62:	f006 fa5f 	bl	8006f24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <SystemClock_Config+0xd8>)
 8000a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b18 <SystemClock_Config+0xd8>)
 8000a70:	f023 0301 	bic.w	r3, r3, #1
 8000a74:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a76:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <SystemClock_Config+0xd8>)
 8000a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <SystemClock_Config+0xdc>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a88:	4a24      	ldr	r2, [pc, #144]	@ (8000b1c <SystemClock_Config+0xdc>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <SystemClock_Config+0xdc>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9c:	bf00      	nop
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <SystemClock_Config+0xdc>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aaa:	d1f8      	bne.n	8000a9e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <SystemClock_Config+0xe0>)
 8000aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b20 <SystemClock_Config+0xe0>)
 8000ab2:	f023 0303 	bic.w	r3, r3, #3
 8000ab6:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac0:	2340      	movs	r3, #64	@ 0x40
 8000ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f006 fa83 	bl	8006fd8 <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ad8:	f000 fb56 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	233f      	movs	r3, #63	@ 0x3f
 8000ade:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000af0:	2340      	movs	r3, #64	@ 0x40
 8000af2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2101      	movs	r1, #1
 8000b00:	4618      	mov	r0, r3
 8000b02:	f006 fec3 	bl	800788c <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b0c:	f000 fb3c 	bl	8001188 <Error_Handler>
  }
}
 8000b10:	bf00      	nop
 8000b12:	3770      	adds	r7, #112	@ 0x70
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58000400 	.word	0x58000400
 8000b1c:	58024800 	.word	0x58024800
 8000b20:	58024400 	.word	0x58024400

08000b24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b48:	4b47      	ldr	r3, [pc, #284]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b4a:	4a48      	ldr	r2, [pc, #288]	@ (8000c6c <MX_ADC1_Init+0x148>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b4e:	4b46      	ldr	r3, [pc, #280]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b50:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b56:	4b44      	ldr	r3, [pc, #272]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b5c:	4b42      	ldr	r3, [pc, #264]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b62:	4b41      	ldr	r3, [pc, #260]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b64:	2208      	movs	r2, #8
 8000b66:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b68:	4b3f      	ldr	r3, [pc, #252]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 4;
 8000b74:	4b3c      	ldr	r3, [pc, #240]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b76:	2204      	movs	r2, #4
 8000b78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000b80:	4b39      	ldr	r3, [pc, #228]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b82:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000b86:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b88:	4b37      	ldr	r3, [pc, #220]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b90:	4b35      	ldr	r3, [pc, #212]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b92:	2203      	movs	r2, #3
 8000b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b96:	4b34      	ldr	r3, [pc, #208]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b9c:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ba2:	4b31      	ldr	r3, [pc, #196]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000baa:	4b2f      	ldr	r3, [pc, #188]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb0:	482d      	ldr	r0, [pc, #180]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000bb2:	f001 fb51 	bl	8002258 <HAL_ADC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000bbc:	f000 fae4 	bl	8001188 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4827      	ldr	r0, [pc, #156]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000bcc:	f002 fe76 	bl	80038bc <HAL_ADCEx_MultiModeConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000bd6:	f000 fad7 	bl	8001188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bda:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <MX_ADC1_Init+0x14c>)
 8000bdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bde:	2306      	movs	r3, #6
 8000be0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bec:	2304      	movs	r3, #4
 8000bee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481a      	ldr	r0, [pc, #104]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000bfe:	f001 fff3 	bl	8002be8 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000c08:	f000 fabe 	bl	8001188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <MX_ADC1_Init+0x150>)
 8000c0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c10:	230c      	movs	r3, #12
 8000c12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4813      	ldr	r0, [pc, #76]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000c1a:	f001 ffe5 	bl	8002be8 <HAL_ADC_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000c24:	f000 fab0 	bl	8001188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_ADC1_Init+0x154>)
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c2c:	2312      	movs	r3, #18
 8000c2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000c36:	f001 ffd7 	bl	8002be8 <HAL_ADC_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000c40:	f000 faa2 	bl	8001188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <MX_ADC1_Init+0x158>)
 8000c46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c48:	2318      	movs	r3, #24
 8000c4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_ADC1_Init+0x144>)
 8000c52:	f001 ffc9 	bl	8002be8 <HAL_ADC_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000c5c:	f000 fa94 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	@ 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	24000098 	.word	0x24000098
 8000c6c:	40022000 	.word	0x40022000
 8000c70:	0c900008 	.word	0x0c900008
 8000c74:	14f00020 	.word	0x14f00020
 8000c78:	2a000400 	.word	0x2a000400
 8000c7c:	3ef08000 	.word	0x3ef08000

08000c80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c86:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf8 <MX_I2C1_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <MX_I2C1_Init+0x7c>)
 8000c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cba:	480e      	ldr	r0, [pc, #56]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000cbc:	f005 fb0e 	bl	80062dc <HAL_I2C_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cc6:	f000 fa5f 	bl	8001188 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4809      	ldr	r0, [pc, #36]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000cce:	f006 f891 	bl	8006df4 <HAL_I2CEx_ConfigAnalogFilter>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cd8:	f000 fa56 	bl	8001188 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_I2C1_Init+0x74>)
 8000ce0:	f006 f8d3 	bl	8006e8a <HAL_I2CEx_ConfigDigitalFilter>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f000 fa4d 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000174 	.word	0x24000174
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	00707cbb 	.word	0x00707cbb

08000d00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <MX_TIM3_Init+0x94>)
 8000d20:	4a1d      	ldr	r2, [pc, #116]	@ (8000d98 <MX_TIM3_Init+0x98>)
 8000d22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_TIM3_Init+0x94>)
 8000d26:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000d2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <MX_TIM3_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_TIM3_Init+0x94>)
 8000d34:	2209      	movs	r2, #9
 8000d36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_TIM3_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <MX_TIM3_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d44:	4813      	ldr	r0, [pc, #76]	@ (8000d94 <MX_TIM3_Init+0x94>)
 8000d46:	f009 fe6d 	bl	800aa24 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d50:	f000 fa1a 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <MX_TIM3_Init+0x94>)
 8000d62:	f00a f8a7 	bl	800aeb4 <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d6c:	f000 fa0c 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d70:	2320      	movs	r3, #32
 8000d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_TIM3_Init+0x94>)
 8000d7e:	f00a faf7 	bl	800b370 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 f9fe 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	240001c8 	.word	0x240001c8
 8000d98:	40000400 	.word	0x40000400

08000d9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000da2:	4a23      	ldr	r2, [pc, #140]	@ (8000e30 <MX_USART3_UART_Init+0x94>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000da8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000dac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de4:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000de6:	f00a fb6f 	bl	800b4c8 <HAL_UART_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 f9ca 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000df8:	f00b fc05 	bl	800c606 <HAL_UARTEx_SetTxFifoThreshold>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e02:	f000 f9c1 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000e0a:	f00b fc3a 	bl	800c682 <HAL_UARTEx_SetRxFifoThreshold>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e14:	f000 f9b8 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <MX_USART3_UART_Init+0x90>)
 8000e1a:	f00b fbbb 	bl	800c594 <HAL_UARTEx_DisableFifoMode>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 f9b0 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	24000214 	.word	0x24000214
 8000e30:	40004800 	.word	0x40004800

08000e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_DMA_Init+0x4c>)
 8000e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e40:	4a0f      	ldr	r2, [pc, #60]	@ (8000e80 <MX_DMA_Init+0x4c>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <MX_DMA_Init+0x4c>)
 8000e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	200b      	movs	r0, #11
 8000e5e:	f002 fec3 	bl	8003be8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e62:	200b      	movs	r0, #11
 8000e64:	f002 feda 	bl	8003c1c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	f002 febb 	bl	8003be8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e72:	200c      	movs	r0, #12
 8000e74:	f002 fed2 	bl	8003c1c <HAL_NVIC_EnableIRQ>

}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	58024400 	.word	0x58024400

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	4b52      	ldr	r3, [pc, #328]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4a50      	ldr	r2, [pc, #320]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebe:	4a49      	ldr	r2, [pc, #292]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec8:	4b46      	ldr	r3, [pc, #280]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b43      	ldr	r3, [pc, #268]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	4a41      	ldr	r2, [pc, #260]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	4a3a      	ldr	r2, [pc, #232]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f04:	4b37      	ldr	r3, [pc, #220]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f12:	4b34      	ldr	r3, [pc, #208]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	4a32      	ldr	r2, [pc, #200]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f22:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, THUMB_Pin|INDEX_Pin|OTHER_SOL_Pin|PUMP_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	21f0      	movs	r1, #240	@ 0xf0
 8000f34:	482c      	ldr	r0, [pc, #176]	@ (8000fe8 <MX_GPIO_Init+0x164>)
 8000f36:	f005 f989 	bl	800624c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f3a:	2332      	movs	r3, #50	@ 0x32
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4a:	230b      	movs	r3, #11
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4825      	ldr	r0, [pc, #148]	@ (8000fec <MX_GPIO_Init+0x168>)
 8000f56:	f004 ffc9 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f5a:	2386      	movs	r3, #134	@ 0x86
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	481e      	ldr	r0, [pc, #120]	@ (8000ff0 <MX_GPIO_Init+0x16c>)
 8000f76:	f004 ffb9 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8c:	230b      	movs	r3, #11
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <MX_GPIO_Init+0x170>)
 8000f98:	f004 ffa8 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pins : THUMB_Pin INDEX_Pin OTHER_SOL_Pin PUMP_Pin */
  GPIO_InitStruct.Pin = THUMB_Pin|INDEX_Pin|OTHER_SOL_Pin|PUMP_Pin;
 8000f9c:	23f0      	movs	r3, #240	@ 0xf0
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <MX_GPIO_Init+0x164>)
 8000fb4:	f004 ff9a 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fb8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fca:	230b      	movs	r3, #11
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <MX_GPIO_Init+0x174>)
 8000fd6:	f004 ff89 	bl	8005eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	@ 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	58020c00 	.word	0x58020c00
 8000fec:	58020800 	.word	0x58020800
 8000ff0:	58020000 	.word	0x58020000
 8000ff4:	58020400 	.word	0x58020400
 8000ff8:	58021800 	.word	0x58021800

08000ffc <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b0bf      	sub	sp, #252	@ 0xfc
 8001000:	af1a      	add	r7, sp, #104	@ 0x68
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  handState_t prev_hand_state = state;
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <StartMainTask+0xc8>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  char msg[128];
  sprintf(msg, "Hello");
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	492d      	ldr	r1, [pc, #180]	@ (80010c8 <StartMainTask+0xcc>)
 8001012:	4618      	mov	r0, r3
 8001014:	f00e f98a 	bl	800f32c <siprintf>
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f95f 	bl	80002e0 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	f107 010c 	add.w	r1, r7, #12
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	4827      	ldr	r0, [pc, #156]	@ (80010cc <StartMainTask+0xd0>)
 8001030:	f00a fa9a 	bl	800b568 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	if (prev_hand_state != state) {
 8001034:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <StartMainTask+0xc8>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800103c:	429a      	cmp	r2, r3
 800103e:	d016      	beq.n	800106e <StartMainTask+0x72>
		sprintf(msg, "State: %d/n", state);
 8001040:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <StartMainTask+0xc8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4921      	ldr	r1, [pc, #132]	@ (80010d0 <StartMainTask+0xd4>)
 800104c:	4618      	mov	r0, r3
 800104e:	f00e f96d 	bl	800f32c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f942 	bl	80002e0 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	b29a      	uxth	r2, r3
 8001060:	f107 010c 	add.w	r1, r7, #12
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	4818      	ldr	r0, [pc, #96]	@ (80010cc <StartMainTask+0xd0>)
 800106a:	f00a fa7d 	bl	800b568 <HAL_UART_Transmit>
	}

	readPressureSensor(hi2c1, &pressure);
 800106e:	4c19      	ldr	r4, [pc, #100]	@ (80010d4 <StartMainTask+0xd8>)
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <StartMainTask+0xdc>)
 8001072:	9311      	str	r3, [sp, #68]	@ 0x44
 8001074:	4668      	mov	r0, sp
 8001076:	f104 0310 	add.w	r3, r4, #16
 800107a:	2244      	movs	r2, #68	@ 0x44
 800107c:	4619      	mov	r1, r3
 800107e:	f00e f9ab 	bl	800f3d8 <memcpy>
 8001082:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001086:	f000 fba9 	bl	80017dc <readPressureSensor>
	Process_ADC_Data(adc_buffer, sensor_averages);
 800108a:	4914      	ldr	r1, [pc, #80]	@ (80010dc <StartMainTask+0xe0>)
 800108c:	4814      	ldr	r0, [pc, #80]	@ (80010e0 <StartMainTask+0xe4>)
 800108e:	f000 fc07 	bl	80018a0 <Process_ADC_Data>

	dma_position = get_dma_position(hdma_adc1);
 8001092:	4c14      	ldr	r4, [pc, #80]	@ (80010e4 <StartMainTask+0xe8>)
 8001094:	4668      	mov	r0, sp
 8001096:	f104 0310 	add.w	r3, r4, #16
 800109a:	2268      	movs	r2, #104	@ 0x68
 800109c:	4619      	mov	r1, r3
 800109e:	f00e f99b 	bl	800f3d8 <memcpy>
 80010a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a6:	f000 fc4b 	bl	8001940 <get_dma_position>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <StartMainTask+0xec>)
 80010b0:	601a      	str	r2, [r3, #0]

	prev_hand_state = state;
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <StartMainTask+0xc8>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	osDelay(50);
 80010ba:	2032      	movs	r0, #50	@ 0x32
 80010bc:	f00b fc8e 	bl	800c9dc <osDelay>
  {
 80010c0:	e7b8      	b.n	8001034 <StartMainTask+0x38>
 80010c2:	bf00      	nop
 80010c4:	24000980 	.word	0x24000980
 80010c8:	0800fcb0 	.word	0x0800fcb0
 80010cc:	24000214 	.word	0x24000214
 80010d0:	0800fcb8 	.word	0x0800fcb8
 80010d4:	24000174 	.word	0x24000174
 80010d8:	2400097c 	.word	0x2400097c
 80010dc:	24000970 	.word	0x24000970
 80010e0:	2400032c 	.word	0x2400032c
 80010e4:	240000fc 	.word	0x240000fc
 80010e8:	24000978 	.word	0x24000978

080010ec <startControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startControllerTask */
void startControllerTask(void *argument)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startControllerTask */
  float p = 110.0;
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <startControllerTask+0x38>)
 80010f6:	60bb      	str	r3, [r7, #8]
  float target = 120.0;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <startControllerTask+0x3c>)
 80010fa:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	pressureController(&p, target, state);
 80010fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001100:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <startControllerTask+0x40>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4611      	mov	r1, r2
 8001110:	eeb0 0b47 	vmov.f64	d0, d7
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fb97 	bl	8000848 <pressureController>
    osDelay(25);
 800111a:	2019      	movs	r0, #25
 800111c:	f00b fc5e 	bl	800c9dc <osDelay>
  {
 8001120:	bf00      	nop
 8001122:	e7eb      	b.n	80010fc <startControllerTask+0x10>
 8001124:	42dc0000 	.word	0x42dc0000
 8001128:	42f00000 	.word	0x42f00000
 800112c:	24000980 	.word	0x24000980

08001130 <startPredictionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPredictionTask */
void startPredictionTask(void *argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPredictionTask */
  /* Infinite loop */
  for(;;)
  {
	if (sensor_averages[0] < 9000)
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <startPredictionTask+0x2c>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	f242 3227 	movw	r2, #8999	@ 0x2327
 8001142:	4293      	cmp	r3, r2
 8001144:	d803      	bhi.n	800114e <startPredictionTask+0x1e>
		state = CLOSED;
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <startPredictionTask+0x30>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e002      	b.n	8001154 <startPredictionTask+0x24>
	else
		state = OPEN;
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <startPredictionTask+0x30>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
    osDelay(10);
 8001154:	200a      	movs	r0, #10
 8001156:	f00b fc41 	bl	800c9dc <osDelay>
	if (sensor_averages[0] < 9000)
 800115a:	e7ed      	b.n	8001138 <startPredictionTask+0x8>
 800115c:	24000970 	.word	0x24000970
 8001160:	24000980 	.word	0x24000980

08001164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001176:	f000 fde1 	bl	8001d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40001000 	.word	0x40001000

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <Error_Handler+0x8>

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_MspInit+0x38>)
 800119c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a0:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <HAL_MspInit+0x38>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_MspInit+0x38>)
 80011ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	210f      	movs	r1, #15
 80011bc:	f06f 0001 	mvn.w	r0, #1
 80011c0:	f002 fd12 	bl	8003be8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	58024400 	.word	0x58024400

080011d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0bc      	sub	sp, #240	@ 0xf0
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	22c0      	movs	r2, #192	@ 0xc0
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00e f8bd 	bl	800f370 <memset>
  if(hadc->Instance==ADC1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a66      	ldr	r2, [pc, #408]	@ (8001394 <HAL_ADC_MspInit+0x1c4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	f040 80c5 	bne.w	800138c <HAL_ADC_MspInit+0x1bc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001202:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800120e:	2304      	movs	r3, #4
 8001210:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001212:	2310      	movs	r3, #16
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 10;
 8001216:	230a      	movs	r3, #10
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800121e:	2302      	movs	r3, #2
 8001220:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001222:	23c0      	movs	r3, #192	@ 0xc0
 8001224:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001226:	2300      	movs	r3, #0
 8001228:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	4618      	mov	r0, r3
 800123a:	f006 fef5 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001244:	f7ff ffa0 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001248:	4b53      	ldr	r3, [pc, #332]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 800124a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800124e:	4a52      	ldr	r2, [pc, #328]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001258:	4b4f      	ldr	r3, [pc, #316]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 800125a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b4c      	ldr	r3, [pc, #304]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126c:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001276:	4b48      	ldr	r3, [pc, #288]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b44      	ldr	r3, [pc, #272]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128a:	4a43      	ldr	r2, [pc, #268]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001294:	4b40      	ldr	r3, [pc, #256]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b2:	4b39      	ldr	r3, [pc, #228]	@ (8001398 <HAL_ADC_MspInit+0x1c8>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c6:	2303      	movs	r3, #3
 80012c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012d6:	4619      	mov	r1, r3
 80012d8:	4830      	ldr	r0, [pc, #192]	@ (800139c <HAL_ADC_MspInit+0x1cc>)
 80012da:	f004 fe07 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80012de:	2348      	movs	r3, #72	@ 0x48
 80012e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e4:	2303      	movs	r3, #3
 80012e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012f4:	4619      	mov	r1, r3
 80012f6:	482a      	ldr	r0, [pc, #168]	@ (80013a0 <HAL_ADC_MspInit+0x1d0>)
 80012f8:	f004 fdf8 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001312:	4619      	mov	r1, r3
 8001314:	4823      	ldr	r0, [pc, #140]	@ (80013a4 <HAL_ADC_MspInit+0x1d4>)
 8001316:	f004 fde9 	bl	8005eec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800131a:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 800131c:	4a23      	ldr	r2, [pc, #140]	@ (80013ac <HAL_ADC_MspInit+0x1dc>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 8001322:	2209      	movs	r2, #9
 8001324:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 8001334:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133a:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 800133c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001340:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 8001344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001348:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800134a:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 800134c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001350:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 8001354:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001358:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001360:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 8001362:	f002 fc7b 	bl	8003c5c <HAL_DMA_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_ADC_MspInit+0x1a0>
    {
      Error_Handler();
 800136c:	f7ff ff0c 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a0d      	ldr	r2, [pc, #52]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 8001374:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001376:	4a0c      	ldr	r2, [pc, #48]	@ (80013a8 <HAL_ADC_MspInit+0x1d8>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	2012      	movs	r0, #18
 8001382:	f002 fc31 	bl	8003be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001386:	2012      	movs	r0, #18
 8001388:	f002 fc48 	bl	8003c1c <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800138c:	bf00      	nop
 800138e:	37f0      	adds	r7, #240	@ 0xf0
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40022000 	.word	0x40022000
 8001398:	58024400 	.word	0x58024400
 800139c:	58020800 	.word	0x58020800
 80013a0:	58020000 	.word	0x58020000
 80013a4:	58020400 	.word	0x58020400
 80013a8:	240000fc 	.word	0x240000fc
 80013ac:	40020010 	.word	0x40020010

080013b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0ba      	sub	sp, #232	@ 0xe8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	22c0      	movs	r2, #192	@ 0xc0
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00d ffcd 	bl	800f370 <memset>
  if(hi2c->Instance==I2C1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a27      	ldr	r2, [pc, #156]	@ (8001478 <HAL_I2C_MspInit+0xc8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d146      	bne.n	800146e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e0:	f04f 0208 	mov.w	r2, #8
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	4618      	mov	r0, r3
 80013f8:	f006 fe16 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001402:	f7ff fec1 	bl	8001188 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_I2C_MspInit+0xcc>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <HAL_I2C_MspInit+0xcc>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_I2C_MspInit+0xcc>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001424:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142c:	2312      	movs	r3, #18
 800142e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800143e:	2304      	movs	r3, #4
 8001440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	@ (8001480 <HAL_I2C_MspInit+0xd0>)
 800144c:	f004 fd4e 	bl	8005eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_I2C_MspInit+0xcc>)
 8001452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001456:	4a09      	ldr	r2, [pc, #36]	@ (800147c <HAL_I2C_MspInit+0xcc>)
 8001458:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800145c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_I2C_MspInit+0xcc>)
 8001462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800146e:	bf00      	nop
 8001470:	37e8      	adds	r7, #232	@ 0xe8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40005400 	.word	0x40005400
 800147c:	58024400 	.word	0x58024400
 8001480:	58020400 	.word	0x58020400

08001484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10e      	bne.n	80014b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <HAL_TIM_Base_MspInit+0x40>)
 8001498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800149c:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <HAL_TIM_Base_MspInit+0x40>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <HAL_TIM_Base_MspInit+0x40>)
 80014a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40000400 	.word	0x40000400
 80014c4:	58024400 	.word	0x58024400

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0ba      	sub	sp, #232	@ 0xe8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	22c0      	movs	r2, #192	@ 0xc0
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00d ff41 	bl	800f370 <memset>
  if(huart->Instance==USART3)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3e      	ldr	r2, [pc, #248]	@ (80015ec <HAL_UART_MspInit+0x124>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d175      	bne.n	80015e4 <HAL_UART_MspInit+0x11c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014f8:	f04f 0202 	mov.w	r2, #2
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4618      	mov	r0, r3
 8001510:	f006 fd8a 	bl	8008028 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800151a:	f7ff fe35 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800151e:	4b34      	ldr	r3, [pc, #208]	@ (80015f0 <HAL_UART_MspInit+0x128>)
 8001520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001524:	4a32      	ldr	r2, [pc, #200]	@ (80015f0 <HAL_UART_MspInit+0x128>)
 8001526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800152e:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <HAL_UART_MspInit+0x128>)
 8001530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	4b2c      	ldr	r3, [pc, #176]	@ (80015f0 <HAL_UART_MspInit+0x128>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001542:	4a2b      	ldr	r2, [pc, #172]	@ (80015f0 <HAL_UART_MspInit+0x128>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154c:	4b28      	ldr	r3, [pc, #160]	@ (80015f0 <HAL_UART_MspInit+0x128>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800155a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800155e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001574:	2307      	movs	r3, #7
 8001576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800157e:	4619      	mov	r1, r3
 8001580:	481c      	ldr	r0, [pc, #112]	@ (80015f4 <HAL_UART_MspInit+0x12c>)
 8001582:	f004 fcb3 	bl	8005eec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 8001588:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <HAL_UART_MspInit+0x134>)
 800158a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 800158e:	222e      	movs	r2, #46	@ 0x2e
 8001590:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 8001594:	2240      	movs	r2, #64	@ 0x40
 8001596:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 80015a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015a6:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 80015b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 80015bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80015c8:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 80015ca:	f002 fb47 	bl	8003c5c <HAL_DMA_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80015d4:	f7ff fdd8 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a07      	ldr	r2, [pc, #28]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 80015dc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015de:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <HAL_UART_MspInit+0x130>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80015e4:	bf00      	nop
 80015e6:	37e8      	adds	r7, #232	@ 0xe8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40004800 	.word	0x40004800
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58020c00 	.word	0x58020c00
 80015f8:	240002a8 	.word	0x240002a8
 80015fc:	40020028 	.word	0x40020028

08001600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b090      	sub	sp, #64	@ 0x40
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b0f      	cmp	r3, #15
 800160c:	d827      	bhi.n	800165e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800160e:	2200      	movs	r2, #0
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	2036      	movs	r0, #54	@ 0x36
 8001614:	f002 fae8 	bl	8003be8 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001618:	2036      	movs	r0, #54	@ 0x36
 800161a:	f002 faff 	bl	8003c1c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800161e:	4a29      	ldr	r2, [pc, #164]	@ (80016c4 <HAL_InitTick+0xc4>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001624:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <HAL_InitTick+0xc8>)
 8001626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800162a:	4a27      	ldr	r2, [pc, #156]	@ (80016c8 <HAL_InitTick+0xc8>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <HAL_InitTick+0xc8>)
 8001636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001642:	f107 0210 	add.w	r2, r7, #16
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f006 fca9 	bl	8007fa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001654:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001658:	2b00      	cmp	r3, #0
 800165a:	d106      	bne.n	800166a <HAL_InitTick+0x6a>
 800165c:	e001      	b.n	8001662 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e02b      	b.n	80016ba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001662:	f006 fc73 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 8001666:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001668:	e004      	b.n	8001674 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800166a:	f006 fc6f 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800166e:	4603      	mov	r3, r0
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001676:	4a15      	ldr	r2, [pc, #84]	@ (80016cc <HAL_InitTick+0xcc>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	3b01      	subs	r3, #1
 8001680:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <HAL_InitTick+0xd0>)
 8001684:	4a13      	ldr	r2, [pc, #76]	@ (80016d4 <HAL_InitTick+0xd4>)
 8001686:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_InitTick+0xd0>)
 800168a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800168e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001690:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <HAL_InitTick+0xd0>)
 8001692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001694:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <HAL_InitTick+0xd0>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_InitTick+0xd0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016a2:	480b      	ldr	r0, [pc, #44]	@ (80016d0 <HAL_InitTick+0xd0>)
 80016a4:	f009 f9be 	bl	800aa24 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d104      	bne.n	80016b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016ae:	4808      	ldr	r0, [pc, #32]	@ (80016d0 <HAL_InitTick+0xd0>)
 80016b0:	f009 fa80 	bl	800abb4 <HAL_TIM_Base_Start_IT>
 80016b4:	4603      	mov	r3, r0
 80016b6:	e000      	b.n	80016ba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3740      	adds	r7, #64	@ 0x40
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	24000020 	.word	0x24000020
 80016c8:	58024400 	.word	0x58024400
 80016cc:	431bde83 	.word	0x431bde83
 80016d0:	24000984 	.word	0x24000984
 80016d4:	40001000 	.word	0x40001000

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <NMI_Handler+0x4>

080016e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <MemManage_Handler+0x4>

080016f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <UsageFault_Handler+0x4>

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <DMA1_Stream0_IRQHandler+0x10>)
 8001716:	f003 f867 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	240000fc 	.word	0x240000fc

08001724 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <DMA1_Stream1_IRQHandler+0x10>)
 800172a:	f003 f85d 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	240002a8 	.word	0x240002a8

08001738 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <ADC_IRQHandler+0x10>)
 800173e:	f000 fff1 	bl	8002724 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	24000098 	.word	0x24000098

0800174c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001750:	2000      	movs	r0, #0
 8001752:	f000 fa93 	bl	8001c7c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <TIM6_DAC_IRQHandler+0x10>)
 8001762:	f009 fa9f 	bl	800aca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	24000984 	.word	0x24000984

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f00d fdee 	bl	800f380 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	24080000 	.word	0x24080000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	240009d0 	.word	0x240009d0
 80017d8:	24005478 	.word	0x24005478

080017dc <readPressureSensor>:
#include "utilities.h"

HAL_StatusTypeDef readPressureSensor(I2C_HandleTypeDef hi2c, float* pressure) {
 80017dc:	b084      	sub	sp, #16
 80017de:	b580      	push	{r7, lr}
 80017e0:	b088      	sub	sp, #32
 80017e2:	af04      	add	r7, sp, #16
 80017e4:	f107 0c18 	add.w	ip, r7, #24
 80017e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t buf[3] = {0};
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	2100      	movs	r1, #0
 80017f2:	460a      	mov	r2, r1
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	460a      	mov	r2, r1
 80017f8:	709a      	strb	r2, [r3, #2]
	uint8_t cmd = CONVERSION_CMD;
 80017fa:	230a      	movs	r3, #10
 80017fc:	71fb      	strb	r3, [r7, #7]
	int32_t rawPressure;

	// Send command to command register to prepare for data read
	status = HAL_I2C_Mem_Write(&hi2c, XGZP6857D_I2C_ADDR, REG_CMD, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 100);
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2301      	movs	r3, #1
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	1dfb      	adds	r3, r7, #7
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	2230      	movs	r2, #48	@ 0x30
 800180e:	21da      	movs	r1, #218	@ 0xda
 8001810:	f107 0018 	add.w	r0, r7, #24
 8001814:	f004 fdfe 	bl	8006414 <HAL_I2C_Mem_Write>
 8001818:	4603      	mov	r3, r0
 800181a:	72fb      	strb	r3, [r7, #11]
	if (status != HAL_OK) {
 800181c:	7afb      	ldrb	r3, [r7, #11]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <readPressureSensor+0x4a>
		return status;
 8001822:	7afb      	ldrb	r3, [r7, #11]
 8001824:	e035      	b.n	8001892 <readPressureSensor+0xb6>
	}

	osDelay(CONVERSION_TIME_MS);
 8001826:	2014      	movs	r0, #20
 8001828:	f00b f8d8 	bl	800c9dc <osDelay>

	// Read in data from pressure registers
	status = HAL_I2C_Mem_Read(&hi2c, XGZP6857D_I2C_ADDR, REG_PRESSURE_MSB, I2C_MEMADD_SIZE_8BIT, buf, 3, 100);
 800182c:	2364      	movs	r3, #100	@ 0x64
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2303      	movs	r3, #3
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	2206      	movs	r2, #6
 800183e:	21da      	movs	r1, #218	@ 0xda
 8001840:	f107 0018 	add.w	r0, r7, #24
 8001844:	f004 fefa 	bl	800663c <HAL_I2C_Mem_Read>
 8001848:	4603      	mov	r3, r0
 800184a:	72fb      	strb	r3, [r7, #11]
	if (status != HAL_OK) {
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <readPressureSensor+0x7a>
		return status;
 8001852:	7afb      	ldrb	r3, [r7, #11]
 8001854:	e01d      	b.n	8001892 <readPressureSensor+0xb6>
	}

	// Combine pressure data from different bytes
	rawPressure = (buf[0] << 16) | (buf[1] << 8) | buf[2];
 8001856:	7a3b      	ldrb	r3, [r7, #8]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	7a7b      	ldrb	r3, [r7, #9]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	4313      	orrs	r3, r2
 8001860:	7aba      	ldrb	r2, [r7, #10]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]

	// Check if pressure value is negative
	if (rawPressure & 0x800000) {
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <readPressureSensor+0x9c>
		rawPressure -= (1 << 24);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 8001876:	60fb      	str	r3, [r7, #12]
	}

	*pressure = (float)rawPressure/K_FACTOR;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001882:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800188c:	edc3 7a00 	vstr	s15, [r3]
	return status;
 8001890:	7afb      	ldrb	r3, [r7, #11]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800189c:	b004      	add	sp, #16
 800189e:	4770      	bx	lr

080018a0 <Process_ADC_Data>:

void Process_ADC_Data(uint16_t* adc_buffer, uint16_t* sensor_averages)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b08b      	sub	sp, #44	@ 0x2c
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
    uint32_t sensor_sums[NUM_ADC_CHANNELS] = {0}; // To store sums for each channel
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]

    // Traverse the last 50ms worth of data in the circular buffer
    for (uint16_t i = 0; i < TOTAL_SAMPLES; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80018bc:	e01a      	b.n	80018f4 <Process_ADC_Data+0x54>
    {
		// Calculate the buffer index for each sample and channel
    	int channel = i % 4;
 80018be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
    	uint16_t adc_value = adc_buffer[i];
 80018c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	83fb      	strh	r3, [r7, #30]
		sensor_sums[channel] += adc_value;
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	3328      	adds	r3, #40	@ 0x28
 80018d8:	443b      	add	r3, r7
 80018da:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80018de:	8bfb      	ldrh	r3, [r7, #30]
 80018e0:	441a      	add	r2, r3
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	3328      	adds	r3, #40	@ 0x28
 80018e8:	443b      	add	r3, r7
 80018ea:	f843 2c1c 	str.w	r2, [r3, #-28]
    for (uint16_t i = 0; i < TOTAL_SAMPLES; i++)
 80018ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018f0:	3301      	adds	r3, #1
 80018f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80018f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018f6:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80018fa:	d3e0      	bcc.n	80018be <Process_ADC_Data+0x1e>
    }

    // Calculate averages for each channel
    for (uint16_t channel = 0; channel < NUM_ADC_CHANNELS; channel++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001900:	e012      	b.n	8001928 <Process_ADC_Data+0x88>
    {
        sensor_averages[channel] = sensor_sums[channel] / SAMPLES_PER_CHANNEL;
 8001902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	3328      	adds	r3, #40	@ 0x28
 8001908:	443b      	add	r3, r7
 800190a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800190e:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <Process_ADC_Data+0x9c>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	0999      	lsrs	r1, r3, #6
 8001916:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	4413      	add	r3, r2
 800191e:	b28a      	uxth	r2, r1
 8001920:	801a      	strh	r2, [r3, #0]
    for (uint16_t channel = 0; channel < NUM_ADC_CHANNELS; channel++)
 8001922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001924:	3301      	adds	r3, #1
 8001926:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001928:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800192a:	2b03      	cmp	r3, #3
 800192c:	d9e9      	bls.n	8001902 <Process_ADC_Data+0x62>
    }
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	372c      	adds	r7, #44	@ 0x2c
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	51eb851f 	.word	0x51eb851f

08001940 <get_dma_position>:

uint32_t get_dma_position(DMA_HandleTypeDef hdma_adc1) {
 8001940:	b084      	sub	sp, #16
 8001942:	b490      	push	{r4, r7}
 8001944:	af00      	add	r7, sp, #0
 8001946:	f107 0408 	add.w	r4, r7, #8
 800194a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (TOTAL_SAMPLES - __HAL_DMA_GET_COUNTER(&hdma_adc1)) % TOTAL_SAMPLES;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4a2f      	ldr	r2, [pc, #188]	@ (8001a10 <get_dma_position+0xd0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d03b      	beq.n	80019ce <get_dma_position+0x8e>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	4a2e      	ldr	r2, [pc, #184]	@ (8001a14 <get_dma_position+0xd4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d037      	beq.n	80019ce <get_dma_position+0x8e>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	4a2d      	ldr	r2, [pc, #180]	@ (8001a18 <get_dma_position+0xd8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d033      	beq.n	80019ce <get_dma_position+0x8e>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4a2c      	ldr	r2, [pc, #176]	@ (8001a1c <get_dma_position+0xdc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d02f      	beq.n	80019ce <get_dma_position+0x8e>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4a2b      	ldr	r2, [pc, #172]	@ (8001a20 <get_dma_position+0xe0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d02b      	beq.n	80019ce <get_dma_position+0x8e>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4a2a      	ldr	r2, [pc, #168]	@ (8001a24 <get_dma_position+0xe4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d027      	beq.n	80019ce <get_dma_position+0x8e>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	4a29      	ldr	r2, [pc, #164]	@ (8001a28 <get_dma_position+0xe8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d023      	beq.n	80019ce <get_dma_position+0x8e>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4a28      	ldr	r2, [pc, #160]	@ (8001a2c <get_dma_position+0xec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <get_dma_position+0x8e>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4a27      	ldr	r2, [pc, #156]	@ (8001a30 <get_dma_position+0xf0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01b      	beq.n	80019ce <get_dma_position+0x8e>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4a26      	ldr	r2, [pc, #152]	@ (8001a34 <get_dma_position+0xf4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d017      	beq.n	80019ce <get_dma_position+0x8e>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4a25      	ldr	r2, [pc, #148]	@ (8001a38 <get_dma_position+0xf8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <get_dma_position+0x8e>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	4a24      	ldr	r2, [pc, #144]	@ (8001a3c <get_dma_position+0xfc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00f      	beq.n	80019ce <get_dma_position+0x8e>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4a23      	ldr	r2, [pc, #140]	@ (8001a40 <get_dma_position+0x100>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00b      	beq.n	80019ce <get_dma_position+0x8e>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	4a22      	ldr	r2, [pc, #136]	@ (8001a44 <get_dma_position+0x104>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <get_dma_position+0x8e>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	4a21      	ldr	r2, [pc, #132]	@ (8001a48 <get_dma_position+0x108>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d003      	beq.n	80019ce <get_dma_position+0x8e>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	4a20      	ldr	r2, [pc, #128]	@ (8001a4c <get_dma_position+0x10c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10d      	bne.n	80019ea <get_dma_position+0xaa>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f5c3 7248 	rsb	r2, r3, #800	@ 0x320
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <get_dma_position+0x110>)
 80019d8:	fba3 1302 	umull	r1, r3, r3, r2
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	e00c      	b.n	8001a04 <get_dma_position+0xc4>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f5c3 7248 	rsb	r2, r3, #800	@ 0x320
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <get_dma_position+0x110>)
 80019f4:	fba3 1302 	umull	r1, r3, r3, r2
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	1ad3      	subs	r3, r2, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc90      	pop	{r4, r7}
 8001a0a:	b004      	add	sp, #16
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40020010 	.word	0x40020010
 8001a14:	40020028 	.word	0x40020028
 8001a18:	40020040 	.word	0x40020040
 8001a1c:	40020058 	.word	0x40020058
 8001a20:	40020070 	.word	0x40020070
 8001a24:	40020088 	.word	0x40020088
 8001a28:	400200a0 	.word	0x400200a0
 8001a2c:	400200b8 	.word	0x400200b8
 8001a30:	40020410 	.word	0x40020410
 8001a34:	40020428 	.word	0x40020428
 8001a38:	40020440 	.word	0x40020440
 8001a3c:	40020458 	.word	0x40020458
 8001a40:	40020470 	.word	0x40020470
 8001a44:	40020488 	.word	0x40020488
 8001a48:	400204a0 	.word	0x400204a0
 8001a4c:	400204b8 	.word	0x400204b8
 8001a50:	51eb851f 	.word	0x51eb851f

08001a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a54:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a90 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a58:	f7fe fede 	bl	8000818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a5c:	f7fe fe2e 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a86:	f00d fc81 	bl	800f38c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7fe ff2b 	bl	80008e4 <main>
  bx  lr
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a98:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001a9c:	0800fdd8 	.word	0x0800fdd8
  ldr r2, =_sbss
 8001aa0:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001aa4:	24005478 	.word	0x24005478

08001aa8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC3_IRQHandler>
	...

08001aac <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	@ 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <BSP_LED_Init+0x28>
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d006      	beq.n	8001ad4 <BSP_LED_Init+0x28>
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d003      	beq.n	8001ad4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001acc:	f06f 0301 	mvn.w	r3, #1
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ad2:	e055      	b.n	8001b80 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10f      	bne.n	8001afa <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001ada:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <BSP_LED_Init+0xe0>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b8c <BSP_LED_Init+0xe0>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aea:	4b28      	ldr	r3, [pc, #160]	@ (8001b8c <BSP_LED_Init+0xe0>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	e021      	b.n	8001b3e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10f      	bne.n	8001b20 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <BSP_LED_Init+0xe0>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b06:	4a21      	ldr	r2, [pc, #132]	@ (8001b8c <BSP_LED_Init+0xe0>)
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b10:	4b1e      	ldr	r3, [pc, #120]	@ (8001b8c <BSP_LED_Init+0xe0>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	e00e      	b.n	8001b3e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <BSP_LED_Init+0xe0>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b26:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <BSP_LED_Init+0xe0>)
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <BSP_LED_Init+0xe0>)
 8001b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <BSP_LED_Init+0xe4>)
 8001b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b46:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <BSP_LED_Init+0xe8>)
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	f107 0218 	add.w	r2, r7, #24
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 f9c2 	bl	8005eec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <BSP_LED_Init+0xe8>)
 8001b6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <BSP_LED_Init+0xe4>)
 8001b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f004 fb66 	bl	800624c <HAL_GPIO_WritePin>
  }

  return ret;
 8001b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3730      	adds	r7, #48	@ 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	0800fd58 	.word	0x0800fd58
 8001b94:	24000008 	.word	0x24000008

08001b98 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <BSP_PB_Init+0xcc>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bae:	4a2d      	ldr	r2, [pc, #180]	@ (8001c64 <BSP_PB_Init+0xcc>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <BSP_PB_Init+0xcc>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4a21      	ldr	r2, [pc, #132]	@ (8001c68 <BSP_PB_Init+0xd0>)
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	f107 020c 	add.w	r2, r7, #12
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 f97d 	bl	8005eec <HAL_GPIO_Init>
 8001bf2:	e031      	b.n	8001c58 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001bf4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bf8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <BSP_PB_Init+0xd0>)
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	f107 020c 	add.w	r2, r7, #12
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 f96f 	bl	8005eec <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4a16      	ldr	r2, [pc, #88]	@ (8001c6c <BSP_PB_Init+0xd4>)
 8001c14:	441a      	add	r2, r3
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4915      	ldr	r1, [pc, #84]	@ (8001c70 <BSP_PB_Init+0xd8>)
 8001c1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f004 f912 	bl	8005e4a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <BSP_PB_Init+0xd4>)
 8001c2c:	1898      	adds	r0, r3, r2
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4a10      	ldr	r2, [pc, #64]	@ (8001c74 <BSP_PB_Init+0xdc>)
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	461a      	mov	r2, r3
 8001c38:	2100      	movs	r1, #0
 8001c3a:	f004 f8e7 	bl	8005e0c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001c3e:	2028      	movs	r0, #40	@ 0x28
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4a0d      	ldr	r2, [pc, #52]	@ (8001c78 <BSP_PB_Init+0xe0>)
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f001 ffcc 	bl	8003be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c50:	2328      	movs	r3, #40	@ 0x28
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 ffe2 	bl	8003c1c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	58024400 	.word	0x58024400
 8001c68:	24000014 	.word	0x24000014
 8001c6c:	240009d4 	.word	0x240009d4
 8001c70:	0800fd60 	.word	0x0800fd60
 8001c74:	24000018 	.word	0x24000018
 8001c78:	2400001c 	.word	0x2400001c

08001c7c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <BSP_PB_IRQHandler+0x20>)
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 f8f0 	bl	8005e74 <HAL_EXTI_IRQHandler>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	240009d4 	.word	0x240009d4

08001ca0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7ff fff0 	bl	8001ca0 <BSP_PB_Callback>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cca:	2003      	movs	r0, #3
 8001ccc:	f001 ff81 	bl	8003bd2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cd0:	f005 ff92 	bl	8007bf8 <HAL_RCC_GetSysClockFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_Init+0x68>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	4913      	ldr	r1, [pc, #76]	@ (8001d30 <HAL_Init+0x6c>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_Init+0x68>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d30 <HAL_Init+0x6c>)
 8001cf8:	5cd3      	ldrb	r3, [r2, r3]
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	4a0b      	ldr	r2, [pc, #44]	@ (8001d34 <HAL_Init+0x70>)
 8001d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d08:	4a0b      	ldr	r2, [pc, #44]	@ (8001d38 <HAL_Init+0x74>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0e:	200f      	movs	r0, #15
 8001d10:	f7ff fc76 	bl	8001600 <HAL_InitTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e002      	b.n	8001d24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1e:	f7ff fa39 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	0800fcdc 	.word	0x0800fcdc
 8001d34:	24000004 	.word	0x24000004
 8001d38:	24000000 	.word	0x24000000

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	24000024 	.word	0x24000024
 8001d60:	240009dc 	.word	0x240009dc

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	240009dc 	.word	0x240009dc

08001d7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d80:	4b03      	ldr	r3, [pc, #12]	@ (8001d90 <HAL_GetREVID+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0c1b      	lsrs	r3, r3, #16
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	5c001000 	.word	0x5c001000

08001d94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <LL_ADC_SetChannelPreselection+0x24>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	0e9b      	lsrs	r3, r3, #26
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2201      	movs	r2, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	e015      	b.n	8001e4c <LL_ADC_SetChannelPreselection+0x50>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e003      	b.n	8001e42 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2201      	movs	r2, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	69d2      	ldr	r2, [r2, #28]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3360      	adds	r3, #96	@ 0x60
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3360      	adds	r3, #96	@ 0x60
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	601a      	str	r2, [r3, #0]
  }
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3330      	adds	r3, #48	@ 0x30
 8001f40:	461a      	mov	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	211f      	movs	r1, #31
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	f003 011f 	and.w	r1, r3, #31
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	431a      	orrs	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f023 0203 	bic.w	r2, r3, #3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60da      	str	r2, [r3, #12]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3314      	adds	r3, #20
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	0e5b      	lsrs	r3, r3, #25
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	0d1b      	lsrs	r3, r3, #20
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2107      	movs	r1, #7
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	401a      	ands	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	0d1b      	lsrs	r3, r3, #20
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f003 0318 	and.w	r3, r3, #24
 800204e:	4908      	ldr	r1, [pc, #32]	@ (8002070 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002050:	40d9      	lsrs	r1, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	400b      	ands	r3, r1
 8002056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800205a:	431a      	orrs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	000fffff 	.word	0x000fffff

08002074 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 031f 	and.w	r3, r3, #31
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <LL_ADC_DisableDeepPowerDown+0x20>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6093      	str	r3, [r2, #8]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	5fffffc0 	.word	0x5fffffc0

080020d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <LL_ADC_EnableInternalRegulator+0x24>)
 8002106:	4013      	ands	r3, r2
 8002108:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	6fffffc0 	.word	0x6fffffc0

08002120 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002134:	d101      	bne.n	800213a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <LL_ADC_Enable+0x24>)
 8002156:	4013      	ands	r3, r2
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	7fffffc0 	.word	0x7fffffc0

08002170 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <LL_ADC_Disable+0x24>)
 800217e:	4013      	ands	r3, r2
 8002180:	f043 0202 	orr.w	r2, r3, #2
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	7fffffc0 	.word	0x7fffffc0

08002198 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <LL_ADC_IsEnabled+0x18>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_ADC_IsEnabled+0x1a>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d101      	bne.n	80021d6 <LL_ADC_IsDisableOngoing+0x18>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_ADC_IsDisableOngoing+0x1a>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <LL_ADC_REG_StartConversion+0x24>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	f043 0204 	orr.w	r2, r3, #4
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	7fffffc0 	.word	0x7fffffc0

0800220c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b04      	cmp	r3, #4
 800221e:	d101      	bne.n	8002224 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b08      	cmp	r3, #8
 8002244:	d101      	bne.n	800224a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b089      	sub	sp, #36	@ 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e18f      	b.n	8002592 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7fe ffa5 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff19 	bl	80020d0 <LL_ADC_IsDeepPowerDownEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff feff 	bl	80020ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff34 	bl	8002120 <LL_ADC_IsInternalRegulatorEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d114      	bne.n	80022e8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ff18 	bl	80020f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c8:	4b87      	ldr	r3, [pc, #540]	@ (80024e8 <HAL_ADC_Init+0x290>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	4a87      	ldr	r2, [pc, #540]	@ (80024ec <HAL_ADC_Init+0x294>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	3301      	adds	r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022da:	e002      	b.n	80022e2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	3b01      	subs	r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f9      	bne.n	80022dc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff17 	bl	8002120 <LL_ADC_IsInternalRegulatorEnabled>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	f043 0210 	orr.w	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff77 	bl	800220c <LL_ADC_REG_IsConversionOngoing>
 800231e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 8129 	bne.w	8002580 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 8125 	bne.w	8002580 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800233e:	f043 0202 	orr.w	r2, r3, #2
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff24 	bl	8002198 <LL_ADC_IsEnabled>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d136      	bne.n	80023c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a65      	ldr	r2, [pc, #404]	@ (80024f0 <HAL_ADC_Init+0x298>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_ADC_Init+0x112>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a63      	ldr	r2, [pc, #396]	@ (80024f4 <HAL_ADC_Init+0x29c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10e      	bne.n	8002388 <HAL_ADC_Init+0x130>
 800236a:	4861      	ldr	r0, [pc, #388]	@ (80024f0 <HAL_ADC_Init+0x298>)
 800236c:	f7ff ff14 	bl	8002198 <LL_ADC_IsEnabled>
 8002370:	4604      	mov	r4, r0
 8002372:	4860      	ldr	r0, [pc, #384]	@ (80024f4 <HAL_ADC_Init+0x29c>)
 8002374:	f7ff ff10 	bl	8002198 <LL_ADC_IsEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	4323      	orrs	r3, r4
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e008      	b.n	800239a <HAL_ADC_Init+0x142>
 8002388:	485b      	ldr	r0, [pc, #364]	@ (80024f8 <HAL_ADC_Init+0x2a0>)
 800238a:	f7ff ff05 	bl	8002198 <LL_ADC_IsEnabled>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d012      	beq.n	80023c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a53      	ldr	r2, [pc, #332]	@ (80024f0 <HAL_ADC_Init+0x298>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_ADC_Init+0x15a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a51      	ldr	r2, [pc, #324]	@ (80024f4 <HAL_ADC_Init+0x29c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_Init+0x15e>
 80023b2:	4a52      	ldr	r2, [pc, #328]	@ (80024fc <HAL_ADC_Init+0x2a4>)
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_Init+0x160>
 80023b6:	4a52      	ldr	r2, [pc, #328]	@ (8002500 <HAL_ADC_Init+0x2a8>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f7ff fce8 	bl	8001d94 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80023c4:	f7ff fcda 	bl	8001d7c <HAL_GetREVID>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d914      	bls.n	80023fc <HAL_ADC_Init+0x1a4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d110      	bne.n	80023fc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7d5b      	ldrb	r3, [r3, #21]
 80023de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80023ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7f1b      	ldrb	r3, [r3, #28]
 80023f0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023f2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023f4:	f043 030c 	orr.w	r3, r3, #12
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	e00d      	b.n	8002418 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7d5b      	ldrb	r3, [r3, #21]
 8002400:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002406:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800240c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7f1b      	ldrb	r3, [r3, #28]
 8002412:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7f1b      	ldrb	r3, [r3, #28]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	3b01      	subs	r3, #1
 8002426:	045b      	lsls	r3, r3, #17
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002442:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_ADC_Init+0x2ac>)
 8002452:	4013      	ands	r3, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	69b9      	ldr	r1, [r7, #24]
 800245a:	430b      	orrs	r3, r1
 800245c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fed2 	bl	800220c <LL_ADC_REG_IsConversionOngoing>
 8002468:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fedf 	bl	8002232 <LL_ADC_INJ_IsConversionOngoing>
 8002474:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d15f      	bne.n	800253c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d15c      	bne.n	800253c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7d1b      	ldrb	r3, [r3, #20]
 8002486:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <HAL_ADC_Init+0x2b0>)
 8002498:	4013      	ands	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d130      	bne.n	8002510 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_ADC_Init+0x2b4>)
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024c2:	3a01      	subs	r2, #1
 80024c4:	0411      	lsls	r1, r2, #16
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024d0:	4311      	orrs	r1, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024d6:	430a      	orrs	r2, r1
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	611a      	str	r2, [r3, #16]
 80024e4:	e01c      	b.n	8002520 <HAL_ADC_Init+0x2c8>
 80024e6:	bf00      	nop
 80024e8:	24000000 	.word	0x24000000
 80024ec:	053e2d63 	.word	0x053e2d63
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40022100 	.word	0x40022100
 80024f8:	58026000 	.word	0x58026000
 80024fc:	40022300 	.word	0x40022300
 8002500:	58026300 	.word	0x58026300
 8002504:	fff0c003 	.word	0xfff0c003
 8002508:	ffffbffc 	.word	0xffffbffc
 800250c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 ffc4 	bl	80034c4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10c      	bne.n	800255e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f023 010f 	bic.w	r1, r3, #15
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	1e5a      	subs	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
 800255c:	e007      	b.n	800256e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 020f 	bic.w	r2, r2, #15
 800256c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
 800257e:	e007      	b.n	8002590 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f043 0210 	orr.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002590:	7ffb      	ldrb	r3, [r7, #31]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	@ 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	bf00      	nop

0800259c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a55      	ldr	r2, [pc, #340]	@ (8002704 <HAL_ADC_Start_DMA+0x168>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_ADC_Start_DMA+0x20>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a54      	ldr	r2, [pc, #336]	@ (8002708 <HAL_ADC_Start_DMA+0x16c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_Start_DMA+0x24>
 80025bc:	4b53      	ldr	r3, [pc, #332]	@ (800270c <HAL_ADC_Start_DMA+0x170>)
 80025be:	e000      	b.n	80025c2 <HAL_ADC_Start_DMA+0x26>
 80025c0:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_ADC_Start_DMA+0x174>)
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fd56 	bl	8002074 <LL_ADC_GetMultimode>
 80025c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fe1c 	bl	800220c <LL_ADC_REG_IsConversionOngoing>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 808c 	bne.w	80026f4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_Start_DMA+0x4e>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e087      	b.n	80026fa <HAL_ADC_Start_DMA+0x15e>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d002      	beq.n	8002604 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b09      	cmp	r3, #9
 8002602:	d170      	bne.n	80026e6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fddf 	bl	80031c8 <ADC_Enable>
 800260a:	4603      	mov	r3, r0
 800260c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d163      	bne.n	80026dc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002618:	4b3e      	ldr	r3, [pc, #248]	@ (8002714 <HAL_ADC_Start_DMA+0x178>)
 800261a:	4013      	ands	r3, r2
 800261c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a37      	ldr	r2, [pc, #220]	@ (8002708 <HAL_ADC_Start_DMA+0x16c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d002      	beq.n	8002634 <HAL_ADC_Start_DMA+0x98>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	e000      	b.n	8002636 <HAL_ADC_Start_DMA+0x9a>
 8002634:	4b33      	ldr	r3, [pc, #204]	@ (8002704 <HAL_ADC_Start_DMA+0x168>)
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	4293      	cmp	r3, r2
 800263c:	d002      	beq.n	8002644 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d105      	bne.n	8002650 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002648:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f023 0206 	bic.w	r2, r3, #6
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	659a      	str	r2, [r3, #88]	@ 0x58
 8002668:	e002      	b.n	8002670 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002674:	4a28      	ldr	r2, [pc, #160]	@ (8002718 <HAL_ADC_Start_DMA+0x17c>)
 8002676:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267c:	4a27      	ldr	r2, [pc, #156]	@ (800271c <HAL_ADC_Start_DMA+0x180>)
 800267e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002684:	4a26      	ldr	r2, [pc, #152]	@ (8002720 <HAL_ADC_Start_DMA+0x184>)
 8002686:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	221c      	movs	r2, #28
 800268e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0210 	orr.w	r2, r2, #16
 80026a6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f7ff fc68 	bl	8001f88 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3340      	adds	r3, #64	@ 0x40
 80026c2:	4619      	mov	r1, r3
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f001 fe24 	bl	8004314 <HAL_DMA_Start_IT>
 80026cc:	4603      	mov	r3, r0
 80026ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fd85 	bl	80021e4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80026da:	e00d      	b.n	80026f8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80026e4:	e008      	b.n	80026f8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80026f2:	e001      	b.n	80026f8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
 80026f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000
 8002708:	40022100 	.word	0x40022100
 800270c:	40022300 	.word	0x40022300
 8002710:	58026300 	.word	0x58026300
 8002714:	fffff0fe 	.word	0xfffff0fe
 8002718:	0800339b 	.word	0x0800339b
 800271c:	08003473 	.word	0x08003473
 8002720:	0800348f 	.word	0x0800348f

08002724 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	@ 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a87      	ldr	r2, [pc, #540]	@ (8002964 <HAL_ADC_IRQHandler+0x240>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_ADC_IRQHandler+0x30>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a86      	ldr	r2, [pc, #536]	@ (8002968 <HAL_ADC_IRQHandler+0x244>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_ADC_IRQHandler+0x34>
 8002754:	4b85      	ldr	r3, [pc, #532]	@ (800296c <HAL_ADC_IRQHandler+0x248>)
 8002756:	e000      	b.n	800275a <HAL_ADC_IRQHandler+0x36>
 8002758:	4b85      	ldr	r3, [pc, #532]	@ (8002970 <HAL_ADC_IRQHandler+0x24c>)
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc8a 	bl	8002074 <LL_ADC_GetMultimode>
 8002760:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d017      	beq.n	800279c <HAL_ADC_IRQHandler+0x78>
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d012      	beq.n	800279c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002786:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f001 f88a 	bl	80038a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2202      	movs	r2, #2
 800279a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <HAL_ADC_IRQHandler+0x8c>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8083 	beq.w	80028c2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d07d      	beq.n	80028c2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fb91 	bl	8001f0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d062      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002968 <HAL_ADC_IRQHandler+0x244>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d002      	beq.n	80027fe <HAL_ADC_IRQHandler+0xda>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	e000      	b.n	8002800 <HAL_ADC_IRQHandler+0xdc>
 80027fe:	4b59      	ldr	r3, [pc, #356]	@ (8002964 <HAL_ADC_IRQHandler+0x240>)
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	4293      	cmp	r3, r2
 8002806:	d008      	beq.n	800281a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b05      	cmp	r3, #5
 8002812:	d002      	beq.n	800281a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b09      	cmp	r3, #9
 8002818:	d104      	bne.n	8002824 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	623b      	str	r3, [r7, #32]
 8002822:	e00c      	b.n	800283e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a4f      	ldr	r2, [pc, #316]	@ (8002968 <HAL_ADC_IRQHandler+0x244>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d002      	beq.n	8002834 <HAL_ADC_IRQHandler+0x110>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	e000      	b.n	8002836 <HAL_ADC_IRQHandler+0x112>
 8002834:	4b4b      	ldr	r3, [pc, #300]	@ (8002964 <HAL_ADC_IRQHandler+0x240>)
 8002836:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d135      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b08      	cmp	r3, #8
 8002854:	d12e      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fcd6 	bl	800220c <LL_ADC_REG_IsConversionOngoing>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11a      	bne.n	800289c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 020c 	bic.w	r2, r2, #12
 8002874:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d112      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54
 800289a:	e00b      	b.n	80028b4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a0:	f043 0210 	orr.w	r2, r3, #16
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f96f 	bl	8002b98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	220c      	movs	r2, #12
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <HAL_ADC_IRQHandler+0x1b2>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10b      	bne.n	80028ee <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80a0 	beq.w	8002a22 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 809a 	beq.w	8002a22 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fb4f 	bl	8001fae <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002910:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff faf7 	bl	8001f0a <LL_ADC_REG_IsTriggerSourceSWStart>
 800291c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a11      	ldr	r2, [pc, #68]	@ (8002968 <HAL_ADC_IRQHandler+0x244>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d002      	beq.n	800292e <HAL_ADC_IRQHandler+0x20a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	e000      	b.n	8002930 <HAL_ADC_IRQHandler+0x20c>
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_ADC_IRQHandler+0x240>)
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	4293      	cmp	r3, r2
 8002936:	d008      	beq.n	800294a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b06      	cmp	r3, #6
 8002942:	d002      	beq.n	800294a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b07      	cmp	r3, #7
 8002948:	d104      	bne.n	8002954 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	e014      	b.n	800297e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a03      	ldr	r2, [pc, #12]	@ (8002968 <HAL_ADC_IRQHandler+0x244>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00a      	beq.n	8002974 <HAL_ADC_IRQHandler+0x250>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e008      	b.n	8002976 <HAL_ADC_IRQHandler+0x252>
 8002964:	40022000 	.word	0x40022000
 8002968:	40022100 	.word	0x40022100
 800296c:	40022300 	.word	0x40022300
 8002970:	58026300 	.word	0x58026300
 8002974:	4b84      	ldr	r3, [pc, #528]	@ (8002b88 <HAL_ADC_IRQHandler+0x464>)
 8002976:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d047      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_ADC_IRQHandler+0x27a>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d03f      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d13a      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a8:	2b40      	cmp	r3, #64	@ 0x40
 80029aa:	d133      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d12e      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fc39 	bl	8002232 <LL_ADC_INJ_IsConversionOngoing>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d11a      	bne.n	80029fc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029d4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d112      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80029fa:	e00b      	b.n	8002a14 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	f043 0210 	orr.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 ff1f 	bl	8003858 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2260      	movs	r2, #96	@ 0x60
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d011      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x32c>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00c      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8bc 	bl	8002bc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2280      	movs	r2, #128	@ 0x80
 8002a4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x35c>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 ff05 	bl	8003880 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d012      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x38c>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fef7 	bl	8003894 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d043      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x41e>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d03e      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002acc:	2301      	movs	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad0:	e021      	b.n	8002b16 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2a      	ldr	r2, [pc, #168]	@ (8002b88 <HAL_ADC_IRQHandler+0x464>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_ADC_IRQHandler+0x3c8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a29      	ldr	r2, [pc, #164]	@ (8002b8c <HAL_ADC_IRQHandler+0x468>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_IRQHandler+0x3cc>
 8002aec:	4b28      	ldr	r3, [pc, #160]	@ (8002b90 <HAL_ADC_IRQHandler+0x46c>)
 8002aee:	e000      	b.n	8002af2 <HAL_ADC_IRQHandler+0x3ce>
 8002af0:	4b28      	ldr	r3, [pc, #160]	@ (8002b94 <HAL_ADC_IRQHandler+0x470>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff facc 	bl	8002090 <LL_ADC_GetMultiDMATransfer>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002afe:	2301      	movs	r3, #1
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b02:	e008      	b.n	8002b16 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002b12:	2301      	movs	r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10e      	bne.n	8002b3a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b20:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	f043 0202 	orr.w	r2, r3, #2
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f84d 	bl	8002bd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2210      	movs	r2, #16
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d018      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x45a>
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d013      	beq.n	8002b7e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b66:	f043 0208 	orr.w	r2, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b76:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fe77 	bl	800386c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b7e:	bf00      	nop
 8002b80:	3728      	adds	r7, #40	@ 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40022100 	.word	0x40022100
 8002b90:	40022300 	.word	0x40022300
 8002b94:	58026300 	.word	0x58026300

08002b98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b08d      	sub	sp, #52	@ 0x34
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a65      	ldr	r2, [pc, #404]	@ (8002d98 <HAL_ADC_ConfigChannel+0x1b0>)
 8002c02:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x2a>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e2c7      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x5ba>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff faf4 	bl	800220c <LL_ADC_REG_IsConversionOngoing>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 82ac 	bne.w	8003184 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db2c      	blt.n	8002c8e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x6a>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	e016      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x98>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	613b      	str	r3, [r7, #16]
  return result;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e003      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	69d1      	ldr	r1, [r2, #28]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7ff f948 	bl	8001f30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fab1 	bl	800220c <LL_ADC_REG_IsConversionOngoing>
 8002caa:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fabe 	bl	8002232 <LL_ADC_INJ_IsConversionOngoing>
 8002cb6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 80b8 	bne.w	8002e30 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 80b4 	bne.w	8002e30 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6819      	ldr	r1, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f7ff f97d 	bl	8001fd4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cda:	4b30      	ldr	r3, [pc, #192]	@ (8002d9c <HAL_ADC_ConfigChannel+0x1b4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002ce2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ce6:	d10b      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x118>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	e01d      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x154>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10b      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x13e>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	e00a      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x154>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d02c      	beq.n	8002da0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6919      	ldr	r1, [r3, #16]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f7ff f885 	bl	8001e62 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6919      	ldr	r1, [r3, #16]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	7e5b      	ldrb	r3, [r3, #25]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d102      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x186>
 8002d68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002d6c:	e000      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x188>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	461a      	mov	r2, r3
 8002d72:	f7ff f8af 	bl	8001ed4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	7e1b      	ldrb	r3, [r3, #24]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d102      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x1a4>
 8002d86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d8a:	e000      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x1a6>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f7ff f887 	bl	8001ea2 <LL_ADC_SetDataRightShift>
 8002d94:	e04c      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x248>
 8002d96:	bf00      	nop
 8002d98:	47ff0000 	.word	0x47ff0000
 8002d9c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	069b      	lsls	r3, r3, #26
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d107      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002dc2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	069b      	lsls	r3, r3, #26
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d107      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002de6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	069b      	lsls	r3, r3, #26
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d107      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e0a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	069b      	lsls	r3, r3, #26
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d107      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff f9af 	bl	8002198 <LL_ADC_IsEnabled>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f040 81aa 	bne.w	8003196 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f7ff f8ec 	bl	800202c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a87      	ldr	r2, [pc, #540]	@ (8003078 <HAL_ADC_ConfigChannel+0x490>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	f040 809a 	bne.w	8002f94 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4984      	ldr	r1, [pc, #528]	@ (800307c <HAL_ADC_ConfigChannel+0x494>)
 8002e6a:	428b      	cmp	r3, r1
 8002e6c:	d147      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x316>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4983      	ldr	r1, [pc, #524]	@ (8003080 <HAL_ADC_ConfigChannel+0x498>)
 8002e74:	428b      	cmp	r3, r1
 8002e76:	d040      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x312>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4981      	ldr	r1, [pc, #516]	@ (8003084 <HAL_ADC_ConfigChannel+0x49c>)
 8002e7e:	428b      	cmp	r3, r1
 8002e80:	d039      	beq.n	8002ef6 <HAL_ADC_ConfigChannel+0x30e>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4980      	ldr	r1, [pc, #512]	@ (8003088 <HAL_ADC_ConfigChannel+0x4a0>)
 8002e88:	428b      	cmp	r3, r1
 8002e8a:	d032      	beq.n	8002ef2 <HAL_ADC_ConfigChannel+0x30a>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	497e      	ldr	r1, [pc, #504]	@ (800308c <HAL_ADC_ConfigChannel+0x4a4>)
 8002e92:	428b      	cmp	r3, r1
 8002e94:	d02b      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x306>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	497d      	ldr	r1, [pc, #500]	@ (8003090 <HAL_ADC_ConfigChannel+0x4a8>)
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	d024      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x302>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	497b      	ldr	r1, [pc, #492]	@ (8003094 <HAL_ADC_ConfigChannel+0x4ac>)
 8002ea6:	428b      	cmp	r3, r1
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_ADC_ConfigChannel+0x2fe>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	497a      	ldr	r1, [pc, #488]	@ (8003098 <HAL_ADC_ConfigChannel+0x4b0>)
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	d016      	beq.n	8002ee2 <HAL_ADC_ConfigChannel+0x2fa>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4978      	ldr	r1, [pc, #480]	@ (800309c <HAL_ADC_ConfigChannel+0x4b4>)
 8002eba:	428b      	cmp	r3, r1
 8002ebc:	d00f      	beq.n	8002ede <HAL_ADC_ConfigChannel+0x2f6>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4977      	ldr	r1, [pc, #476]	@ (80030a0 <HAL_ADC_ConfigChannel+0x4b8>)
 8002ec4:	428b      	cmp	r3, r1
 8002ec6:	d008      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x2f2>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4975      	ldr	r1, [pc, #468]	@ (80030a4 <HAL_ADC_ConfigChannel+0x4bc>)
 8002ece:	428b      	cmp	r3, r1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x2ee>
 8002ed2:	4b75      	ldr	r3, [pc, #468]	@ (80030a8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002ed4:	e05a      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e058      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002eda:	4b74      	ldr	r3, [pc, #464]	@ (80030ac <HAL_ADC_ConfigChannel+0x4c4>)
 8002edc:	e056      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002ede:	4b74      	ldr	r3, [pc, #464]	@ (80030b0 <HAL_ADC_ConfigChannel+0x4c8>)
 8002ee0:	e054      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002ee2:	4b6e      	ldr	r3, [pc, #440]	@ (800309c <HAL_ADC_ConfigChannel+0x4b4>)
 8002ee4:	e052      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8003098 <HAL_ADC_ConfigChannel+0x4b0>)
 8002ee8:	e050      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002eea:	4b72      	ldr	r3, [pc, #456]	@ (80030b4 <HAL_ADC_ConfigChannel+0x4cc>)
 8002eec:	e04e      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002eee:	4b72      	ldr	r3, [pc, #456]	@ (80030b8 <HAL_ADC_ConfigChannel+0x4d0>)
 8002ef0:	e04c      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002ef2:	4b72      	ldr	r3, [pc, #456]	@ (80030bc <HAL_ADC_ConfigChannel+0x4d4>)
 8002ef4:	e04a      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002ef6:	4b72      	ldr	r3, [pc, #456]	@ (80030c0 <HAL_ADC_ConfigChannel+0x4d8>)
 8002ef8:	e048      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e046      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4970      	ldr	r1, [pc, #448]	@ (80030c4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002f04:	428b      	cmp	r3, r1
 8002f06:	d140      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x3a2>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	495c      	ldr	r1, [pc, #368]	@ (8003080 <HAL_ADC_ConfigChannel+0x498>)
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d039      	beq.n	8002f86 <HAL_ADC_ConfigChannel+0x39e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	495b      	ldr	r1, [pc, #364]	@ (8003084 <HAL_ADC_ConfigChannel+0x49c>)
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	d032      	beq.n	8002f82 <HAL_ADC_ConfigChannel+0x39a>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4959      	ldr	r1, [pc, #356]	@ (8003088 <HAL_ADC_ConfigChannel+0x4a0>)
 8002f22:	428b      	cmp	r3, r1
 8002f24:	d02b      	beq.n	8002f7e <HAL_ADC_ConfigChannel+0x396>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4958      	ldr	r1, [pc, #352]	@ (800308c <HAL_ADC_ConfigChannel+0x4a4>)
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	d024      	beq.n	8002f7a <HAL_ADC_ConfigChannel+0x392>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4956      	ldr	r1, [pc, #344]	@ (8003090 <HAL_ADC_ConfigChannel+0x4a8>)
 8002f36:	428b      	cmp	r3, r1
 8002f38:	d01d      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x38e>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4955      	ldr	r1, [pc, #340]	@ (8003094 <HAL_ADC_ConfigChannel+0x4ac>)
 8002f40:	428b      	cmp	r3, r1
 8002f42:	d016      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x38a>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4953      	ldr	r1, [pc, #332]	@ (8003098 <HAL_ADC_ConfigChannel+0x4b0>)
 8002f4a:	428b      	cmp	r3, r1
 8002f4c:	d00f      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x386>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4952      	ldr	r1, [pc, #328]	@ (800309c <HAL_ADC_ConfigChannel+0x4b4>)
 8002f54:	428b      	cmp	r3, r1
 8002f56:	d008      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x382>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4951      	ldr	r1, [pc, #324]	@ (80030a4 <HAL_ADC_ConfigChannel+0x4bc>)
 8002f5e:	428b      	cmp	r3, r1
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x37e>
 8002f62:	4b51      	ldr	r3, [pc, #324]	@ (80030a8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002f64:	e012      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f66:	2300      	movs	r3, #0
 8002f68:	e010      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f6a:	4b51      	ldr	r3, [pc, #324]	@ (80030b0 <HAL_ADC_ConfigChannel+0x4c8>)
 8002f6c:	e00e      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800309c <HAL_ADC_ConfigChannel+0x4b4>)
 8002f70:	e00c      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f72:	4b49      	ldr	r3, [pc, #292]	@ (8003098 <HAL_ADC_ConfigChannel+0x4b0>)
 8002f74:	e00a      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f76:	4b4f      	ldr	r3, [pc, #316]	@ (80030b4 <HAL_ADC_ConfigChannel+0x4cc>)
 8002f78:	e008      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80030b8 <HAL_ADC_ConfigChannel+0x4d0>)
 8002f7c:	e006      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f7e:	4b4f      	ldr	r3, [pc, #316]	@ (80030bc <HAL_ADC_ConfigChannel+0x4d4>)
 8002f80:	e004      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f82:	4b4f      	ldr	r3, [pc, #316]	@ (80030c0 <HAL_ADC_ConfigChannel+0x4d8>)
 8002f84:	e002      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x3a4>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7fe ff34 	bl	8001dfc <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f280 80fc 	bge.w	8003196 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a36      	ldr	r2, [pc, #216]	@ (800307c <HAL_ADC_ConfigChannel+0x494>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_ADC_ConfigChannel+0x3ca>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a45      	ldr	r2, [pc, #276]	@ (80030c4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x3ce>
 8002fb2:	4b45      	ldr	r3, [pc, #276]	@ (80030c8 <HAL_ADC_ConfigChannel+0x4e0>)
 8002fb4:	e000      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x3d0>
 8002fb6:	4b45      	ldr	r3, [pc, #276]	@ (80030cc <HAL_ADC_ConfigChannel+0x4e4>)
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe ff11 	bl	8001de0 <LL_ADC_GetCommonPathInternalCh>
 8002fbe:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800307c <HAL_ADC_ConfigChannel+0x494>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x3ec>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3d      	ldr	r2, [pc, #244]	@ (80030c4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10e      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x40a>
 8002fd4:	4829      	ldr	r0, [pc, #164]	@ (800307c <HAL_ADC_ConfigChannel+0x494>)
 8002fd6:	f7ff f8df 	bl	8002198 <LL_ADC_IsEnabled>
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4839      	ldr	r0, [pc, #228]	@ (80030c4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002fde:	f7ff f8db 	bl	8002198 <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4323      	orrs	r3, r4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e008      	b.n	8003004 <HAL_ADC_ConfigChannel+0x41c>
 8002ff2:	4837      	ldr	r0, [pc, #220]	@ (80030d0 <HAL_ADC_ConfigChannel+0x4e8>)
 8002ff4:	f7ff f8d0 	bl	8002198 <LL_ADC_IsEnabled>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf0c      	ite	eq
 8002ffe:	2301      	moveq	r3, #1
 8003000:	2300      	movne	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80b3 	beq.w	8003170 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a31      	ldr	r2, [pc, #196]	@ (80030d4 <HAL_ADC_ConfigChannel+0x4ec>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d165      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x4f8>
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d160      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2b      	ldr	r2, [pc, #172]	@ (80030d0 <HAL_ADC_ConfigChannel+0x4e8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	f040 80b6 	bne.w	8003196 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a13      	ldr	r2, [pc, #76]	@ (800307c <HAL_ADC_ConfigChannel+0x494>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_ADC_ConfigChannel+0x456>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <HAL_ADC_ConfigChannel+0x4dc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x45a>
 800303e:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <HAL_ADC_ConfigChannel+0x4e0>)
 8003040:	e000      	b.n	8003044 <HAL_ADC_ConfigChannel+0x45c>
 8003042:	4a22      	ldr	r2, [pc, #136]	@ (80030cc <HAL_ADC_ConfigChannel+0x4e4>)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f7fe feb4 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003052:	4b21      	ldr	r3, [pc, #132]	@ (80030d8 <HAL_ADC_ConfigChannel+0x4f0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	4a20      	ldr	r2, [pc, #128]	@ (80030dc <HAL_ADC_ConfigChannel+0x4f4>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	099b      	lsrs	r3, r3, #6
 8003060:	3301      	adds	r3, #1
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003066:	e002      	b.n	800306e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3b01      	subs	r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f9      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003074:	e08f      	b.n	8003196 <HAL_ADC_ConfigChannel+0x5ae>
 8003076:	bf00      	nop
 8003078:	47ff0000 	.word	0x47ff0000
 800307c:	40022000 	.word	0x40022000
 8003080:	04300002 	.word	0x04300002
 8003084:	08600004 	.word	0x08600004
 8003088:	0c900008 	.word	0x0c900008
 800308c:	10c00010 	.word	0x10c00010
 8003090:	14f00020 	.word	0x14f00020
 8003094:	2a000400 	.word	0x2a000400
 8003098:	2e300800 	.word	0x2e300800
 800309c:	32601000 	.word	0x32601000
 80030a0:	43210000 	.word	0x43210000
 80030a4:	4b840000 	.word	0x4b840000
 80030a8:	4fb80000 	.word	0x4fb80000
 80030ac:	47520000 	.word	0x47520000
 80030b0:	36902000 	.word	0x36902000
 80030b4:	25b00200 	.word	0x25b00200
 80030b8:	21800100 	.word	0x21800100
 80030bc:	1d500080 	.word	0x1d500080
 80030c0:	19200040 	.word	0x19200040
 80030c4:	40022100 	.word	0x40022100
 80030c8:	40022300 	.word	0x40022300
 80030cc:	58026300 	.word	0x58026300
 80030d0:	58026000 	.word	0x58026000
 80030d4:	cb840000 	.word	0xcb840000
 80030d8:	24000000 	.word	0x24000000
 80030dc:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a31      	ldr	r2, [pc, #196]	@ (80031ac <HAL_ADC_ConfigChannel+0x5c4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d11e      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x540>
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d119      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2d      	ldr	r2, [pc, #180]	@ (80031b0 <HAL_ADC_ConfigChannel+0x5c8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d14b      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2c      	ldr	r2, [pc, #176]	@ (80031b4 <HAL_ADC_ConfigChannel+0x5cc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_ADC_ConfigChannel+0x52a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2a      	ldr	r2, [pc, #168]	@ (80031b8 <HAL_ADC_ConfigChannel+0x5d0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x52e>
 8003112:	4a2a      	ldr	r2, [pc, #168]	@ (80031bc <HAL_ADC_ConfigChannel+0x5d4>)
 8003114:	e000      	b.n	8003118 <HAL_ADC_ConfigChannel+0x530>
 8003116:	4a2a      	ldr	r2, [pc, #168]	@ (80031c0 <HAL_ADC_ConfigChannel+0x5d8>)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f7fe fe4a 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003126:	e036      	b.n	8003196 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a25      	ldr	r2, [pc, #148]	@ (80031c4 <HAL_ADC_ConfigChannel+0x5dc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d131      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x5ae>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d12c      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1b      	ldr	r2, [pc, #108]	@ (80031b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d127      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1a      	ldr	r2, [pc, #104]	@ (80031b4 <HAL_ADC_ConfigChannel+0x5cc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_ADC_ConfigChannel+0x572>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a18      	ldr	r2, [pc, #96]	@ (80031b8 <HAL_ADC_ConfigChannel+0x5d0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_ADC_ConfigChannel+0x576>
 800315a:	4a18      	ldr	r2, [pc, #96]	@ (80031bc <HAL_ADC_ConfigChannel+0x5d4>)
 800315c:	e000      	b.n	8003160 <HAL_ADC_ConfigChannel+0x578>
 800315e:	4a18      	ldr	r2, [pc, #96]	@ (80031c0 <HAL_ADC_ConfigChannel+0x5d8>)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f7fe fe26 	bl	8001dba <LL_ADC_SetCommonPathInternalCh>
 800316e:	e012      	b.n	8003196 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003182:	e008      	b.n	8003196 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800319e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3734      	adds	r7, #52	@ 0x34
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}
 80031aa:	bf00      	nop
 80031ac:	c7520000 	.word	0xc7520000
 80031b0:	58026000 	.word	0x58026000
 80031b4:	40022000 	.word	0x40022000
 80031b8:	40022100 	.word	0x40022100
 80031bc:	40022300 	.word	0x40022300
 80031c0:	58026300 	.word	0x58026300
 80031c4:	cfb80000 	.word	0xcfb80000

080031c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe ffdf 	bl	8002198 <LL_ADC_IsEnabled>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d16e      	bne.n	80032be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	4b38      	ldr	r3, [pc, #224]	@ (80032c8 <ADC_Enable+0x100>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	f043 0210 	orr.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e05a      	b.n	80032c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe ff9a 	bl	8002148 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003214:	f7fe fda6 	bl	8001d64 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2b      	ldr	r2, [pc, #172]	@ (80032cc <ADC_Enable+0x104>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <ADC_Enable+0x66>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a29      	ldr	r2, [pc, #164]	@ (80032d0 <ADC_Enable+0x108>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <ADC_Enable+0x6a>
 800322e:	4b29      	ldr	r3, [pc, #164]	@ (80032d4 <ADC_Enable+0x10c>)
 8003230:	e000      	b.n	8003234 <ADC_Enable+0x6c>
 8003232:	4b29      	ldr	r3, [pc, #164]	@ (80032d8 <ADC_Enable+0x110>)
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe ff1d 	bl	8002074 <LL_ADC_GetMultimode>
 800323a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a23      	ldr	r2, [pc, #140]	@ (80032d0 <ADC_Enable+0x108>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d002      	beq.n	800324c <ADC_Enable+0x84>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	e000      	b.n	800324e <ADC_Enable+0x86>
 800324c:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <ADC_Enable+0x104>)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	4293      	cmp	r3, r2
 8003254:	d02c      	beq.n	80032b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d130      	bne.n	80032be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800325c:	e028      	b.n	80032b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe ff98 	bl	8002198 <LL_ADC_IsEnabled>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe ff68 	bl	8002148 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003278:	f7fe fd74 	bl	8001d64 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d914      	bls.n	80032b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00d      	beq.n	80032b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003298:	f043 0210 	orr.w	r2, r3, #16
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e007      	b.n	80032c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d1cf      	bne.n	800325e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	8000003f 	.word	0x8000003f
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40022100 	.word	0x40022100
 80032d4:	40022300 	.word	0x40022300
 80032d8:	58026300 	.word	0x58026300

080032dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe ff68 	bl	80021be <LL_ADC_IsDisableOngoing>
 80032ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe ff4f 	bl	8002198 <LL_ADC_IsEnabled>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d047      	beq.n	8003390 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d144      	bne.n	8003390 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 030d 	and.w	r3, r3, #13
 8003310:	2b01      	cmp	r3, #1
 8003312:	d10c      	bne.n	800332e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe ff29 	bl	8002170 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2203      	movs	r2, #3
 8003324:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003326:	f7fe fd1d 	bl	8001d64 <HAL_GetTick>
 800332a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800332c:	e029      	b.n	8003382 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003332:	f043 0210 	orr.w	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e023      	b.n	8003392 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800334a:	f7fe fd0b 	bl	8001d64 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d914      	bls.n	8003382 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336a:	f043 0210 	orr.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e007      	b.n	8003392 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1dc      	bne.n	800334a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d14b      	bne.n	800344c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d021      	beq.n	8003412 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fd99 	bl	8001f0a <LL_ADC_REG_IsTriggerSourceSWStart>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d032      	beq.n	8003444 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d12b      	bne.n	8003444 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11f      	bne.n	8003444 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003410:	e018      	b.n	8003444 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d111      	bne.n	8003444 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003424:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003430:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff fba7 	bl	8002b98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800344a:	e00e      	b.n	800346a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff fbbb 	bl	8002bd4 <HAL_ADC_ErrorCallback>
}
 800345e:	e004      	b.n	800346a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fb93 	bl	8002bac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	f043 0204 	orr.w	r2, r3, #4
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff fb8d 	bl	8002bd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a7a      	ldr	r2, [pc, #488]	@ (80036bc <ADC_ConfigureBoostMode+0x1f8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d004      	beq.n	80034e0 <ADC_ConfigureBoostMode+0x1c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a79      	ldr	r2, [pc, #484]	@ (80036c0 <ADC_ConfigureBoostMode+0x1fc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d109      	bne.n	80034f4 <ADC_ConfigureBoostMode+0x30>
 80034e0:	4b78      	ldr	r3, [pc, #480]	@ (80036c4 <ADC_ConfigureBoostMode+0x200>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e008      	b.n	8003506 <ADC_ConfigureBoostMode+0x42>
 80034f4:	4b74      	ldr	r3, [pc, #464]	@ (80036c8 <ADC_ConfigureBoostMode+0x204>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01c      	beq.n	8003544 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800350a:	f004 fcef 	bl	8007eec <HAL_RCC_GetHCLKFreq>
 800350e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003518:	d010      	beq.n	800353c <ADC_ConfigureBoostMode+0x78>
 800351a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800351e:	d873      	bhi.n	8003608 <ADC_ConfigureBoostMode+0x144>
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003524:	d002      	beq.n	800352c <ADC_ConfigureBoostMode+0x68>
 8003526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800352a:	d16d      	bne.n	8003608 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	60fb      	str	r3, [r7, #12]
        break;
 800353a:	e068      	b.n	800360e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	60fb      	str	r3, [r7, #12]
        break;
 8003542:	e064      	b.n	800360e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003544:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003548:	f04f 0100 	mov.w	r1, #0
 800354c:	f005 ff76 	bl	800943c <HAL_RCCEx_GetPeriphCLKFreq>
 8003550:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800355a:	d051      	beq.n	8003600 <ADC_ConfigureBoostMode+0x13c>
 800355c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003560:	d854      	bhi.n	800360c <ADC_ConfigureBoostMode+0x148>
 8003562:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003566:	d047      	beq.n	80035f8 <ADC_ConfigureBoostMode+0x134>
 8003568:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800356c:	d84e      	bhi.n	800360c <ADC_ConfigureBoostMode+0x148>
 800356e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003572:	d03d      	beq.n	80035f0 <ADC_ConfigureBoostMode+0x12c>
 8003574:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003578:	d848      	bhi.n	800360c <ADC_ConfigureBoostMode+0x148>
 800357a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800357e:	d033      	beq.n	80035e8 <ADC_ConfigureBoostMode+0x124>
 8003580:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003584:	d842      	bhi.n	800360c <ADC_ConfigureBoostMode+0x148>
 8003586:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800358a:	d029      	beq.n	80035e0 <ADC_ConfigureBoostMode+0x11c>
 800358c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003590:	d83c      	bhi.n	800360c <ADC_ConfigureBoostMode+0x148>
 8003592:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003596:	d01a      	beq.n	80035ce <ADC_ConfigureBoostMode+0x10a>
 8003598:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800359c:	d836      	bhi.n	800360c <ADC_ConfigureBoostMode+0x148>
 800359e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80035a2:	d014      	beq.n	80035ce <ADC_ConfigureBoostMode+0x10a>
 80035a4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80035a8:	d830      	bhi.n	800360c <ADC_ConfigureBoostMode+0x148>
 80035aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ae:	d00e      	beq.n	80035ce <ADC_ConfigureBoostMode+0x10a>
 80035b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035b4:	d82a      	bhi.n	800360c <ADC_ConfigureBoostMode+0x148>
 80035b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035ba:	d008      	beq.n	80035ce <ADC_ConfigureBoostMode+0x10a>
 80035bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035c0:	d824      	bhi.n	800360c <ADC_ConfigureBoostMode+0x148>
 80035c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035c6:	d002      	beq.n	80035ce <ADC_ConfigureBoostMode+0x10a>
 80035c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035cc:	d11e      	bne.n	800360c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0c9b      	lsrs	r3, r3, #18
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	60fb      	str	r3, [r7, #12]
        break;
 80035de:	e016      	b.n	800360e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
        break;
 80035e6:	e012      	b.n	800360e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	60fb      	str	r3, [r7, #12]
        break;
 80035ee:	e00e      	b.n	800360e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	60fb      	str	r3, [r7, #12]
        break;
 80035f6:	e00a      	b.n	800360e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	09db      	lsrs	r3, r3, #7
 80035fc:	60fb      	str	r3, [r7, #12]
        break;
 80035fe:	e006      	b.n	800360e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	60fb      	str	r3, [r7, #12]
        break;
 8003606:	e002      	b.n	800360e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003608:	bf00      	nop
 800360a:	e000      	b.n	800360e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800360c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800360e:	f7fe fbb5 	bl	8001d7c <HAL_GetREVID>
 8003612:	4603      	mov	r3, r0
 8003614:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003618:	4293      	cmp	r3, r2
 800361a:	d815      	bhi.n	8003648 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a2b      	ldr	r2, [pc, #172]	@ (80036cc <ADC_ConfigureBoostMode+0x208>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d908      	bls.n	8003636 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003632:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003634:	e03e      	b.n	80036b4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003644:	609a      	str	r2, [r3, #8]
}
 8003646:	e035      	b.n	80036b4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a1f      	ldr	r2, [pc, #124]	@ (80036d0 <ADC_ConfigureBoostMode+0x20c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d808      	bhi.n	8003668 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003664:	609a      	str	r2, [r3, #8]
}
 8003666:	e025      	b.n	80036b4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a1a      	ldr	r2, [pc, #104]	@ (80036d4 <ADC_ConfigureBoostMode+0x210>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d80a      	bhi.n	8003686 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003682:	609a      	str	r2, [r3, #8]
}
 8003684:	e016      	b.n	80036b4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4a13      	ldr	r2, [pc, #76]	@ (80036d8 <ADC_ConfigureBoostMode+0x214>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d80a      	bhi.n	80036a4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a0:	609a      	str	r2, [r3, #8]
}
 80036a2:	e007      	b.n	80036b4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40022100 	.word	0x40022100
 80036c4:	40022300 	.word	0x40022300
 80036c8:	58026300 	.word	0x58026300
 80036cc:	01312d00 	.word	0x01312d00
 80036d0:	005f5e10 	.word	0x005f5e10
 80036d4:	00bebc20 	.word	0x00bebc20
 80036d8:	017d7840 	.word	0x017d7840

080036dc <LL_ADC_IsEnabled>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <LL_ADC_IsEnabled+0x18>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <LL_ADC_IsEnabled+0x1a>
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <LL_ADC_StartCalibration>:
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	4b09      	ldr	r3, [pc, #36]	@ (800373c <LL_ADC_StartCalibration+0x38>)
 8003716:	4013      	ands	r3, r2
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003724:	430a      	orrs	r2, r1
 8003726:	4313      	orrs	r3, r2
 8003728:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	3ffeffc0 	.word	0x3ffeffc0

08003740 <LL_ADC_IsCalibrationOnGoing>:
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003754:	d101      	bne.n	800375a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_ADC_REG_IsConversionOngoing>:
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d101      	bne.n	8003780 <LL_ADC_REG_IsConversionOngoing+0x18>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_ADCEx_Calibration_Start+0x1e>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e04c      	b.n	8003848 <HAL_ADCEx_Calibration_Start+0xb8>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff fd90 	bl	80032dc <ADC_Disable>
 80037bc:	4603      	mov	r3, r0
 80037be:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d135      	bne.n	8003832 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037ca:	4b21      	ldr	r3, [pc, #132]	@ (8003850 <HAL_ADCEx_Calibration_Start+0xc0>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	f043 0202 	orr.w	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ff90 	bl	8003704 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80037e4:	e014      	b.n	8003810 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	3301      	adds	r3, #1
 80037ea:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4a19      	ldr	r2, [pc, #100]	@ (8003854 <HAL_ADCEx_Calibration_Start+0xc4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d30d      	bcc.n	8003810 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f8:	f023 0312 	bic.w	r3, r3, #18
 80037fc:	f043 0210 	orr.w	r2, r3, #16
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e01b      	b.n	8003848 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff93 	bl	8003740 <LL_ADC_IsCalibrationOnGoing>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e2      	bne.n	80037e6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003824:	f023 0303 	bic.w	r3, r3, #3
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003830:	e005      	b.n	800383e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003836:	f043 0210 	orr.w	r2, r3, #16
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003846:	7dfb      	ldrb	r3, [r7, #23]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	ffffeefd 	.word	0xffffeefd
 8003854:	25c3f800 	.word	0x25c3f800

08003858 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b09f      	sub	sp, #124	@ 0x7c
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e0be      	b.n	8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d102      	bne.n	80038fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038f4:	4b5b      	ldr	r3, [pc, #364]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	e001      	b.n	80038fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e09d      	b.n	8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff22 	bl	8003768 <LL_ADC_REG_IsConversionOngoing>
 8003924:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff1c 	bl	8003768 <LL_ADC_REG_IsConversionOngoing>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d17f      	bne.n	8003a36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003938:	2b00      	cmp	r3, #0
 800393a:	d17c      	bne.n	8003a36 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a47      	ldr	r2, [pc, #284]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a46      	ldr	r2, [pc, #280]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d101      	bne.n	8003954 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003950:	4b45      	ldr	r3, [pc, #276]	@ (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003952:	e000      	b.n	8003956 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003954:	4b45      	ldr	r3, [pc, #276]	@ (8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003956:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d039      	beq.n	80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	431a      	orrs	r2, r3
 800396e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003970:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3a      	ldr	r2, [pc, #232]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a38      	ldr	r2, [pc, #224]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10e      	bne.n	80039a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003986:	4836      	ldr	r0, [pc, #216]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003988:	f7ff fea8 	bl	80036dc <LL_ADC_IsEnabled>
 800398c:	4604      	mov	r4, r0
 800398e:	4835      	ldr	r0, [pc, #212]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003990:	f7ff fea4 	bl	80036dc <LL_ADC_IsEnabled>
 8003994:	4603      	mov	r3, r0
 8003996:	4323      	orrs	r3, r4
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e008      	b.n	80039b6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80039a4:	4832      	ldr	r0, [pc, #200]	@ (8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80039a6:	f7ff fe99 	bl	80036dc <LL_ADC_IsEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d047      	beq.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	6811      	ldr	r1, [r2, #0]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	6892      	ldr	r2, [r2, #8]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	431a      	orrs	r2, r3
 80039ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039d0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039d2:	e03a      	b.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80039d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d10e      	bne.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80039f4:	481a      	ldr	r0, [pc, #104]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039f6:	f7ff fe71 	bl	80036dc <LL_ADC_IsEnabled>
 80039fa:	4604      	mov	r4, r0
 80039fc:	4819      	ldr	r0, [pc, #100]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039fe:	f7ff fe6d 	bl	80036dc <LL_ADC_IsEnabled>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4323      	orrs	r3, r4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	e008      	b.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003a12:	4817      	ldr	r0, [pc, #92]	@ (8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a14:	f7ff fe62 	bl	80036dc <LL_ADC_IsEnabled>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a32:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a34:	e009      	b.n	8003a4a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3a:	f043 0220 	orr.w	r2, r3, #32
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003a48:	e000      	b.n	8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a4a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a54:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	377c      	adds	r7, #124	@ 0x7c
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}
 8003a60:	40022000 	.word	0x40022000
 8003a64:	40022100 	.word	0x40022100
 8003a68:	40022300 	.word	0x40022300
 8003a6c:	58026300 	.word	0x58026300
 8003a70:	58026000 	.word	0x58026000
 8003a74:	fffff0e0 	.word	0xfffff0e0

08003a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a88:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a94:	4013      	ands	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003aa0:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <__NVIC_SetPriorityGrouping+0x44>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aa6:	4a04      	ldr	r2, [pc, #16]	@ (8003ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	60d3      	str	r3, [r2, #12]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000ed00 	.word	0xe000ed00
 8003abc:	05fa0000 	.word	0x05fa0000

08003ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac4:	4b04      	ldr	r3, [pc, #16]	@ (8003ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	f003 0307 	and.w	r3, r3, #7
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	db0b      	blt.n	8003b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	f003 021f 	and.w	r2, r3, #31
 8003af4:	4907      	ldr	r1, [pc, #28]	@ (8003b14 <__NVIC_EnableIRQ+0x38>)
 8003af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	2001      	movs	r0, #1
 8003afe:	fa00 f202 	lsl.w	r2, r0, r2
 8003b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	e000e100 	.word	0xe000e100

08003b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	6039      	str	r1, [r7, #0]
 8003b22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	db0a      	blt.n	8003b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	490c      	ldr	r1, [pc, #48]	@ (8003b64 <__NVIC_SetPriority+0x4c>)
 8003b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b40:	e00a      	b.n	8003b58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4908      	ldr	r1, [pc, #32]	@ (8003b68 <__NVIC_SetPriority+0x50>)
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	3b04      	subs	r3, #4
 8003b50:	0112      	lsls	r2, r2, #4
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	440b      	add	r3, r1
 8003b56:	761a      	strb	r2, [r3, #24]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000e100 	.word	0xe000e100
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b089      	sub	sp, #36	@ 0x24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f1c3 0307 	rsb	r3, r3, #7
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	bf28      	it	cs
 8003b8a:	2304      	movcs	r3, #4
 8003b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3304      	adds	r3, #4
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d902      	bls.n	8003b9c <NVIC_EncodePriority+0x30>
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3b03      	subs	r3, #3
 8003b9a:	e000      	b.n	8003b9e <NVIC_EncodePriority+0x32>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43da      	mvns	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	401a      	ands	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbe:	43d9      	mvns	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc4:	4313      	orrs	r3, r2
         );
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3724      	adds	r7, #36	@ 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff ff4c 	bl	8003a78 <__NVIC_SetPriorityGrouping>
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bf6:	f7ff ff63 	bl	8003ac0 <__NVIC_GetPriorityGrouping>
 8003bfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	6978      	ldr	r0, [r7, #20]
 8003c02:	f7ff ffb3 	bl	8003b6c <NVIC_EncodePriority>
 8003c06:	4602      	mov	r2, r0
 8003c08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ff82 	bl	8003b18 <__NVIC_SetPriority>
}
 8003c14:	bf00      	nop
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff ff56 	bl	8003adc <__NVIC_EnableIRQ>
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8003c3c:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_GetCurrentCPUID+0x20>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c44:	2b70      	cmp	r3, #112	@ 0x70
 8003c46:	d101      	bne.n	8003c4c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e000      	b.n	8003c4e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8003c4c:	2301      	movs	r3, #1
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003c64:	f7fe f87e 	bl	8001d64 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e316      	b.n	80042a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a66      	ldr	r2, [pc, #408]	@ (8003e14 <HAL_DMA_Init+0x1b8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d04a      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a65      	ldr	r2, [pc, #404]	@ (8003e18 <HAL_DMA_Init+0x1bc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d045      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a63      	ldr	r2, [pc, #396]	@ (8003e1c <HAL_DMA_Init+0x1c0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d040      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a62      	ldr	r2, [pc, #392]	@ (8003e20 <HAL_DMA_Init+0x1c4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d03b      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a60      	ldr	r2, [pc, #384]	@ (8003e24 <HAL_DMA_Init+0x1c8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d036      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5f      	ldr	r2, [pc, #380]	@ (8003e28 <HAL_DMA_Init+0x1cc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d031      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a5d      	ldr	r2, [pc, #372]	@ (8003e2c <HAL_DMA_Init+0x1d0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d02c      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8003e30 <HAL_DMA_Init+0x1d4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d027      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e34 <HAL_DMA_Init+0x1d8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d022      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a59      	ldr	r2, [pc, #356]	@ (8003e38 <HAL_DMA_Init+0x1dc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d01d      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a57      	ldr	r2, [pc, #348]	@ (8003e3c <HAL_DMA_Init+0x1e0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d018      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a56      	ldr	r2, [pc, #344]	@ (8003e40 <HAL_DMA_Init+0x1e4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a54      	ldr	r2, [pc, #336]	@ (8003e44 <HAL_DMA_Init+0x1e8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00e      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a53      	ldr	r2, [pc, #332]	@ (8003e48 <HAL_DMA_Init+0x1ec>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d009      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a51      	ldr	r2, [pc, #324]	@ (8003e4c <HAL_DMA_Init+0x1f0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d004      	beq.n	8003d14 <HAL_DMA_Init+0xb8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a50      	ldr	r2, [pc, #320]	@ (8003e50 <HAL_DMA_Init+0x1f4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d101      	bne.n	8003d18 <HAL_DMA_Init+0xbc>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <HAL_DMA_Init+0xbe>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 813b 	beq.w	8003f96 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a37      	ldr	r2, [pc, #220]	@ (8003e14 <HAL_DMA_Init+0x1b8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d04a      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a36      	ldr	r2, [pc, #216]	@ (8003e18 <HAL_DMA_Init+0x1bc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d045      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a34      	ldr	r2, [pc, #208]	@ (8003e1c <HAL_DMA_Init+0x1c0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d040      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a33      	ldr	r2, [pc, #204]	@ (8003e20 <HAL_DMA_Init+0x1c4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d03b      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a31      	ldr	r2, [pc, #196]	@ (8003e24 <HAL_DMA_Init+0x1c8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d036      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a30      	ldr	r2, [pc, #192]	@ (8003e28 <HAL_DMA_Init+0x1cc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d031      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2e      	ldr	r2, [pc, #184]	@ (8003e2c <HAL_DMA_Init+0x1d0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d02c      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <HAL_DMA_Init+0x1d4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d027      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2b      	ldr	r2, [pc, #172]	@ (8003e34 <HAL_DMA_Init+0x1d8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d022      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003e38 <HAL_DMA_Init+0x1dc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d01d      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a28      	ldr	r2, [pc, #160]	@ (8003e3c <HAL_DMA_Init+0x1e0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d018      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a27      	ldr	r2, [pc, #156]	@ (8003e40 <HAL_DMA_Init+0x1e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a25      	ldr	r2, [pc, #148]	@ (8003e44 <HAL_DMA_Init+0x1e8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a24      	ldr	r2, [pc, #144]	@ (8003e48 <HAL_DMA_Init+0x1ec>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d009      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a22      	ldr	r2, [pc, #136]	@ (8003e4c <HAL_DMA_Init+0x1f0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_DMA_Init+0x174>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <HAL_DMA_Init+0x1f4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d108      	bne.n	8003de2 <HAL_DMA_Init+0x186>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e007      	b.n	8003df2 <HAL_DMA_Init+0x196>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003df2:	e02f      	b.n	8003e54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df4:	f7fd ffb6 	bl	8001d64 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d928      	bls.n	8003e54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e246      	b.n	80042a2 <HAL_DMA_Init+0x646>
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1c8      	bne.n	8003df4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4b83      	ldr	r3, [pc, #524]	@ (800407c <HAL_DMA_Init+0x420>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003e7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d107      	bne.n	8003eb8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003eb8:	4b71      	ldr	r3, [pc, #452]	@ (8004080 <HAL_DMA_Init+0x424>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b71      	ldr	r3, [pc, #452]	@ (8004084 <HAL_DMA_Init+0x428>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ec4:	d328      	bcc.n	8003f18 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b28      	cmp	r3, #40	@ 0x28
 8003ecc:	d903      	bls.n	8003ed6 <HAL_DMA_Init+0x27a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ed4:	d917      	bls.n	8003f06 <HAL_DMA_Init+0x2aa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b3e      	cmp	r3, #62	@ 0x3e
 8003edc:	d903      	bls.n	8003ee6 <HAL_DMA_Init+0x28a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b42      	cmp	r3, #66	@ 0x42
 8003ee4:	d90f      	bls.n	8003f06 <HAL_DMA_Init+0x2aa>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b46      	cmp	r3, #70	@ 0x46
 8003eec:	d903      	bls.n	8003ef6 <HAL_DMA_Init+0x29a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b48      	cmp	r3, #72	@ 0x48
 8003ef4:	d907      	bls.n	8003f06 <HAL_DMA_Init+0x2aa>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b4e      	cmp	r3, #78	@ 0x4e
 8003efc:	d905      	bls.n	8003f0a <HAL_DMA_Init+0x2ae>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b52      	cmp	r3, #82	@ 0x52
 8003f04:	d801      	bhi.n	8003f0a <HAL_DMA_Init+0x2ae>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <HAL_DMA_Init+0x2b0>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f16:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d117      	bne.n	8003f72 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f001 fdcf 	bl	8005af8 <DMA_CheckFifoParam>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2240      	movs	r2, #64	@ 0x40
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e197      	b.n	80042a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 fd0a 	bl	8005994 <DMA_CalcBaseAndBitshift>
 8003f80:	4603      	mov	r3, r0
 8003f82:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	223f      	movs	r2, #63	@ 0x3f
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	e0cd      	b.n	8004132 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8004088 <HAL_DMA_Init+0x42c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_DMA_Init+0x38a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a39      	ldr	r2, [pc, #228]	@ (800408c <HAL_DMA_Init+0x430>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_DMA_Init+0x38a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a38      	ldr	r2, [pc, #224]	@ (8004090 <HAL_DMA_Init+0x434>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_Init+0x38a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a36      	ldr	r2, [pc, #216]	@ (8004094 <HAL_DMA_Init+0x438>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_DMA_Init+0x38a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a35      	ldr	r2, [pc, #212]	@ (8004098 <HAL_DMA_Init+0x43c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_DMA_Init+0x38a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a33      	ldr	r2, [pc, #204]	@ (800409c <HAL_DMA_Init+0x440>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_DMA_Init+0x38a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a32      	ldr	r2, [pc, #200]	@ (80040a0 <HAL_DMA_Init+0x444>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_DMA_Init+0x38a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	@ (80040a4 <HAL_DMA_Init+0x448>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d101      	bne.n	8003fea <HAL_DMA_Init+0x38e>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_DMA_Init+0x390>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8097 	beq.w	8004120 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a24      	ldr	r2, [pc, #144]	@ (8004088 <HAL_DMA_Init+0x42c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d021      	beq.n	8004040 <HAL_DMA_Init+0x3e4>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a22      	ldr	r2, [pc, #136]	@ (800408c <HAL_DMA_Init+0x430>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01c      	beq.n	8004040 <HAL_DMA_Init+0x3e4>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a21      	ldr	r2, [pc, #132]	@ (8004090 <HAL_DMA_Init+0x434>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d017      	beq.n	8004040 <HAL_DMA_Init+0x3e4>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1f      	ldr	r2, [pc, #124]	@ (8004094 <HAL_DMA_Init+0x438>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d012      	beq.n	8004040 <HAL_DMA_Init+0x3e4>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1e      	ldr	r2, [pc, #120]	@ (8004098 <HAL_DMA_Init+0x43c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00d      	beq.n	8004040 <HAL_DMA_Init+0x3e4>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1c      	ldr	r2, [pc, #112]	@ (800409c <HAL_DMA_Init+0x440>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d008      	beq.n	8004040 <HAL_DMA_Init+0x3e4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <HAL_DMA_Init+0x444>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <HAL_DMA_Init+0x3e4>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a19      	ldr	r2, [pc, #100]	@ (80040a4 <HAL_DMA_Init+0x448>)
 800403e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4b13      	ldr	r3, [pc, #76]	@ (80040a8 <HAL_DMA_Init+0x44c>)
 800405c:	4013      	ands	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b40      	cmp	r3, #64	@ 0x40
 8004066:	d021      	beq.n	80040ac <HAL_DMA_Init+0x450>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b80      	cmp	r3, #128	@ 0x80
 800406e:	d102      	bne.n	8004076 <HAL_DMA_Init+0x41a>
 8004070:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004074:	e01b      	b.n	80040ae <HAL_DMA_Init+0x452>
 8004076:	2300      	movs	r3, #0
 8004078:	e019      	b.n	80040ae <HAL_DMA_Init+0x452>
 800407a:	bf00      	nop
 800407c:	fe10803f 	.word	0xfe10803f
 8004080:	5c001000 	.word	0x5c001000
 8004084:	ffff0000 	.word	0xffff0000
 8004088:	58025408 	.word	0x58025408
 800408c:	5802541c 	.word	0x5802541c
 8004090:	58025430 	.word	0x58025430
 8004094:	58025444 	.word	0x58025444
 8004098:	58025458 	.word	0x58025458
 800409c:	5802546c 	.word	0x5802546c
 80040a0:	58025480 	.word	0x58025480
 80040a4:	58025494 	.word	0x58025494
 80040a8:	fffe000f 	.word	0xfffe000f
 80040ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68d2      	ldr	r2, [r2, #12]
 80040b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b6e      	ldr	r3, [pc, #440]	@ (80042ac <HAL_DMA_Init+0x650>)
 80040f4:	4413      	add	r3, r2
 80040f6:	4a6e      	ldr	r2, [pc, #440]	@ (80042b0 <HAL_DMA_Init+0x654>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	009a      	lsls	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f001 fc45 	bl	8005994 <DMA_CalcBaseAndBitshift>
 800410a:	4603      	mov	r3, r0
 800410c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2201      	movs	r2, #1
 8004118:	409a      	lsls	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	e008      	b.n	8004132 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2240      	movs	r2, #64	@ 0x40
 8004124:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2203      	movs	r2, #3
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0b7      	b.n	80042a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a5f      	ldr	r2, [pc, #380]	@ (80042b4 <HAL_DMA_Init+0x658>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d072      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a5d      	ldr	r2, [pc, #372]	@ (80042b8 <HAL_DMA_Init+0x65c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d06d      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a5c      	ldr	r2, [pc, #368]	@ (80042bc <HAL_DMA_Init+0x660>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d068      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a5a      	ldr	r2, [pc, #360]	@ (80042c0 <HAL_DMA_Init+0x664>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d063      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a59      	ldr	r2, [pc, #356]	@ (80042c4 <HAL_DMA_Init+0x668>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d05e      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a57      	ldr	r2, [pc, #348]	@ (80042c8 <HAL_DMA_Init+0x66c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d059      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a56      	ldr	r2, [pc, #344]	@ (80042cc <HAL_DMA_Init+0x670>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d054      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a54      	ldr	r2, [pc, #336]	@ (80042d0 <HAL_DMA_Init+0x674>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04f      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a53      	ldr	r2, [pc, #332]	@ (80042d4 <HAL_DMA_Init+0x678>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d04a      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a51      	ldr	r2, [pc, #324]	@ (80042d8 <HAL_DMA_Init+0x67c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d045      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a50      	ldr	r2, [pc, #320]	@ (80042dc <HAL_DMA_Init+0x680>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d040      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a4e      	ldr	r2, [pc, #312]	@ (80042e0 <HAL_DMA_Init+0x684>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d03b      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a4d      	ldr	r2, [pc, #308]	@ (80042e4 <HAL_DMA_Init+0x688>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d036      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a4b      	ldr	r2, [pc, #300]	@ (80042e8 <HAL_DMA_Init+0x68c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d031      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a4a      	ldr	r2, [pc, #296]	@ (80042ec <HAL_DMA_Init+0x690>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d02c      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a48      	ldr	r2, [pc, #288]	@ (80042f0 <HAL_DMA_Init+0x694>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d027      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a47      	ldr	r2, [pc, #284]	@ (80042f4 <HAL_DMA_Init+0x698>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d022      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a45      	ldr	r2, [pc, #276]	@ (80042f8 <HAL_DMA_Init+0x69c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01d      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a44      	ldr	r2, [pc, #272]	@ (80042fc <HAL_DMA_Init+0x6a0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d018      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a42      	ldr	r2, [pc, #264]	@ (8004300 <HAL_DMA_Init+0x6a4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a41      	ldr	r2, [pc, #260]	@ (8004304 <HAL_DMA_Init+0x6a8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a3f      	ldr	r2, [pc, #252]	@ (8004308 <HAL_DMA_Init+0x6ac>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3e      	ldr	r2, [pc, #248]	@ (800430c <HAL_DMA_Init+0x6b0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_DMA_Init+0x5c6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a3c      	ldr	r2, [pc, #240]	@ (8004310 <HAL_DMA_Init+0x6b4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_DMA_Init+0x5ca>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_DMA_Init+0x5cc>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d032      	beq.n	8004292 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f001 fcdf 	bl	8005bf0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b80      	cmp	r3, #128	@ 0x80
 8004238:	d102      	bne.n	8004240 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004254:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d010      	beq.n	8004280 <HAL_DMA_Init+0x624>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b08      	cmp	r3, #8
 8004264:	d80c      	bhi.n	8004280 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f001 fd5c 	bl	8005d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	e008      	b.n	8004292 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	a7fdabf8 	.word	0xa7fdabf8
 80042b0:	cccccccd 	.word	0xcccccccd
 80042b4:	40020010 	.word	0x40020010
 80042b8:	40020028 	.word	0x40020028
 80042bc:	40020040 	.word	0x40020040
 80042c0:	40020058 	.word	0x40020058
 80042c4:	40020070 	.word	0x40020070
 80042c8:	40020088 	.word	0x40020088
 80042cc:	400200a0 	.word	0x400200a0
 80042d0:	400200b8 	.word	0x400200b8
 80042d4:	40020410 	.word	0x40020410
 80042d8:	40020428 	.word	0x40020428
 80042dc:	40020440 	.word	0x40020440
 80042e0:	40020458 	.word	0x40020458
 80042e4:	40020470 	.word	0x40020470
 80042e8:	40020488 	.word	0x40020488
 80042ec:	400204a0 	.word	0x400204a0
 80042f0:	400204b8 	.word	0x400204b8
 80042f4:	58025408 	.word	0x58025408
 80042f8:	5802541c 	.word	0x5802541c
 80042fc:	58025430 	.word	0x58025430
 8004300:	58025444 	.word	0x58025444
 8004304:	58025458 	.word	0x58025458
 8004308:	5802546c 	.word	0x5802546c
 800430c:	58025480 	.word	0x58025480
 8004310:	58025494 	.word	0x58025494

08004314 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e226      	b.n	800477e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_DMA_Start_IT+0x2a>
 800433a:	2302      	movs	r3, #2
 800433c:	e21f      	b.n	800477e <HAL_DMA_Start_IT+0x46a>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	f040 820a 	bne.w	8004768 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a68      	ldr	r2, [pc, #416]	@ (8004508 <HAL_DMA_Start_IT+0x1f4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04a      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a66      	ldr	r2, [pc, #408]	@ (800450c <HAL_DMA_Start_IT+0x1f8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d045      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a65      	ldr	r2, [pc, #404]	@ (8004510 <HAL_DMA_Start_IT+0x1fc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d040      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a63      	ldr	r2, [pc, #396]	@ (8004514 <HAL_DMA_Start_IT+0x200>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d03b      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a62      	ldr	r2, [pc, #392]	@ (8004518 <HAL_DMA_Start_IT+0x204>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d036      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a60      	ldr	r2, [pc, #384]	@ (800451c <HAL_DMA_Start_IT+0x208>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d031      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a5f      	ldr	r2, [pc, #380]	@ (8004520 <HAL_DMA_Start_IT+0x20c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02c      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004524 <HAL_DMA_Start_IT+0x210>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d027      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a5c      	ldr	r2, [pc, #368]	@ (8004528 <HAL_DMA_Start_IT+0x214>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a5a      	ldr	r2, [pc, #360]	@ (800452c <HAL_DMA_Start_IT+0x218>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a59      	ldr	r2, [pc, #356]	@ (8004530 <HAL_DMA_Start_IT+0x21c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a57      	ldr	r2, [pc, #348]	@ (8004534 <HAL_DMA_Start_IT+0x220>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a56      	ldr	r2, [pc, #344]	@ (8004538 <HAL_DMA_Start_IT+0x224>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a54      	ldr	r2, [pc, #336]	@ (800453c <HAL_DMA_Start_IT+0x228>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a53      	ldr	r2, [pc, #332]	@ (8004540 <HAL_DMA_Start_IT+0x22c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_DMA_Start_IT+0xee>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a51      	ldr	r2, [pc, #324]	@ (8004544 <HAL_DMA_Start_IT+0x230>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d108      	bne.n	8004414 <HAL_DMA_Start_IT+0x100>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e007      	b.n	8004424 <HAL_DMA_Start_IT+0x110>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f001 f906 	bl	800563c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a34      	ldr	r2, [pc, #208]	@ (8004508 <HAL_DMA_Start_IT+0x1f4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d04a      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a33      	ldr	r2, [pc, #204]	@ (800450c <HAL_DMA_Start_IT+0x1f8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d045      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a31      	ldr	r2, [pc, #196]	@ (8004510 <HAL_DMA_Start_IT+0x1fc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d040      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a30      	ldr	r2, [pc, #192]	@ (8004514 <HAL_DMA_Start_IT+0x200>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d03b      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a2e      	ldr	r2, [pc, #184]	@ (8004518 <HAL_DMA_Start_IT+0x204>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d036      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2d      	ldr	r2, [pc, #180]	@ (800451c <HAL_DMA_Start_IT+0x208>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d031      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2b      	ldr	r2, [pc, #172]	@ (8004520 <HAL_DMA_Start_IT+0x20c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d02c      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2a      	ldr	r2, [pc, #168]	@ (8004524 <HAL_DMA_Start_IT+0x210>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d027      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a28      	ldr	r2, [pc, #160]	@ (8004528 <HAL_DMA_Start_IT+0x214>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a27      	ldr	r2, [pc, #156]	@ (800452c <HAL_DMA_Start_IT+0x218>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a25      	ldr	r2, [pc, #148]	@ (8004530 <HAL_DMA_Start_IT+0x21c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a24      	ldr	r2, [pc, #144]	@ (8004534 <HAL_DMA_Start_IT+0x220>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a22      	ldr	r2, [pc, #136]	@ (8004538 <HAL_DMA_Start_IT+0x224>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a21      	ldr	r2, [pc, #132]	@ (800453c <HAL_DMA_Start_IT+0x228>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004540 <HAL_DMA_Start_IT+0x22c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_Start_IT+0x1bc>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004544 <HAL_DMA_Start_IT+0x230>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_DMA_Start_IT+0x1c0>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_DMA_Start_IT+0x1c2>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d036      	beq.n	8004548 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 021e 	bic.w	r2, r3, #30
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0216 	orr.w	r2, r2, #22
 80044ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d03e      	beq.n	8004574 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0208 	orr.w	r2, r2, #8
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e035      	b.n	8004574 <HAL_DMA_Start_IT+0x260>
 8004508:	40020010 	.word	0x40020010
 800450c:	40020028 	.word	0x40020028
 8004510:	40020040 	.word	0x40020040
 8004514:	40020058 	.word	0x40020058
 8004518:	40020070 	.word	0x40020070
 800451c:	40020088 	.word	0x40020088
 8004520:	400200a0 	.word	0x400200a0
 8004524:	400200b8 	.word	0x400200b8
 8004528:	40020410 	.word	0x40020410
 800452c:	40020428 	.word	0x40020428
 8004530:	40020440 	.word	0x40020440
 8004534:	40020458 	.word	0x40020458
 8004538:	40020470 	.word	0x40020470
 800453c:	40020488 	.word	0x40020488
 8004540:	400204a0 	.word	0x400204a0
 8004544:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 020e 	bic.w	r2, r3, #14
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 020a 	orr.w	r2, r2, #10
 800455a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0204 	orr.w	r2, r2, #4
 8004572:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a83      	ldr	r2, [pc, #524]	@ (8004788 <HAL_DMA_Start_IT+0x474>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d072      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a82      	ldr	r2, [pc, #520]	@ (800478c <HAL_DMA_Start_IT+0x478>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d06d      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a80      	ldr	r2, [pc, #512]	@ (8004790 <HAL_DMA_Start_IT+0x47c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d068      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a7f      	ldr	r2, [pc, #508]	@ (8004794 <HAL_DMA_Start_IT+0x480>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d063      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a7d      	ldr	r2, [pc, #500]	@ (8004798 <HAL_DMA_Start_IT+0x484>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d05e      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a7c      	ldr	r2, [pc, #496]	@ (800479c <HAL_DMA_Start_IT+0x488>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d059      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a7a      	ldr	r2, [pc, #488]	@ (80047a0 <HAL_DMA_Start_IT+0x48c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d054      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a79      	ldr	r2, [pc, #484]	@ (80047a4 <HAL_DMA_Start_IT+0x490>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d04f      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a77      	ldr	r2, [pc, #476]	@ (80047a8 <HAL_DMA_Start_IT+0x494>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d04a      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a76      	ldr	r2, [pc, #472]	@ (80047ac <HAL_DMA_Start_IT+0x498>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d045      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a74      	ldr	r2, [pc, #464]	@ (80047b0 <HAL_DMA_Start_IT+0x49c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d040      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a73      	ldr	r2, [pc, #460]	@ (80047b4 <HAL_DMA_Start_IT+0x4a0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d03b      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a71      	ldr	r2, [pc, #452]	@ (80047b8 <HAL_DMA_Start_IT+0x4a4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d036      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a70      	ldr	r2, [pc, #448]	@ (80047bc <HAL_DMA_Start_IT+0x4a8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d031      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a6e      	ldr	r2, [pc, #440]	@ (80047c0 <HAL_DMA_Start_IT+0x4ac>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d02c      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6d      	ldr	r2, [pc, #436]	@ (80047c4 <HAL_DMA_Start_IT+0x4b0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d027      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a6b      	ldr	r2, [pc, #428]	@ (80047c8 <HAL_DMA_Start_IT+0x4b4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d022      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a6a      	ldr	r2, [pc, #424]	@ (80047cc <HAL_DMA_Start_IT+0x4b8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d01d      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a68      	ldr	r2, [pc, #416]	@ (80047d0 <HAL_DMA_Start_IT+0x4bc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d018      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a67      	ldr	r2, [pc, #412]	@ (80047d4 <HAL_DMA_Start_IT+0x4c0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a65      	ldr	r2, [pc, #404]	@ (80047d8 <HAL_DMA_Start_IT+0x4c4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a64      	ldr	r2, [pc, #400]	@ (80047dc <HAL_DMA_Start_IT+0x4c8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a62      	ldr	r2, [pc, #392]	@ (80047e0 <HAL_DMA_Start_IT+0x4cc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_DMA_Start_IT+0x350>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a61      	ldr	r2, [pc, #388]	@ (80047e4 <HAL_DMA_Start_IT+0x4d0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d101      	bne.n	8004668 <HAL_DMA_Start_IT+0x354>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <HAL_DMA_Start_IT+0x356>
 8004668:	2300      	movs	r3, #0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01a      	beq.n	80046a4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800468a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800469e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046a2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a37      	ldr	r2, [pc, #220]	@ (8004788 <HAL_DMA_Start_IT+0x474>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d04a      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a36      	ldr	r2, [pc, #216]	@ (800478c <HAL_DMA_Start_IT+0x478>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d045      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a34      	ldr	r2, [pc, #208]	@ (8004790 <HAL_DMA_Start_IT+0x47c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d040      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a33      	ldr	r2, [pc, #204]	@ (8004794 <HAL_DMA_Start_IT+0x480>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d03b      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a31      	ldr	r2, [pc, #196]	@ (8004798 <HAL_DMA_Start_IT+0x484>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d036      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a30      	ldr	r2, [pc, #192]	@ (800479c <HAL_DMA_Start_IT+0x488>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d031      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2e      	ldr	r2, [pc, #184]	@ (80047a0 <HAL_DMA_Start_IT+0x48c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d02c      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2d      	ldr	r2, [pc, #180]	@ (80047a4 <HAL_DMA_Start_IT+0x490>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d027      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2b      	ldr	r2, [pc, #172]	@ (80047a8 <HAL_DMA_Start_IT+0x494>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d022      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2a      	ldr	r2, [pc, #168]	@ (80047ac <HAL_DMA_Start_IT+0x498>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d01d      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a28      	ldr	r2, [pc, #160]	@ (80047b0 <HAL_DMA_Start_IT+0x49c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d018      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a27      	ldr	r2, [pc, #156]	@ (80047b4 <HAL_DMA_Start_IT+0x4a0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d013      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a25      	ldr	r2, [pc, #148]	@ (80047b8 <HAL_DMA_Start_IT+0x4a4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00e      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a24      	ldr	r2, [pc, #144]	@ (80047bc <HAL_DMA_Start_IT+0x4a8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d009      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a22      	ldr	r2, [pc, #136]	@ (80047c0 <HAL_DMA_Start_IT+0x4ac>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_DMA_Start_IT+0x430>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a21      	ldr	r2, [pc, #132]	@ (80047c4 <HAL_DMA_Start_IT+0x4b0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d108      	bne.n	8004756 <HAL_DMA_Start_IT+0x442>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e012      	b.n	800477c <HAL_DMA_Start_IT+0x468>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	e009      	b.n	800477c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800476e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800477c:	7dfb      	ldrb	r3, [r7, #23]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40020010 	.word	0x40020010
 800478c:	40020028 	.word	0x40020028
 8004790:	40020040 	.word	0x40020040
 8004794:	40020058 	.word	0x40020058
 8004798:	40020070 	.word	0x40020070
 800479c:	40020088 	.word	0x40020088
 80047a0:	400200a0 	.word	0x400200a0
 80047a4:	400200b8 	.word	0x400200b8
 80047a8:	40020410 	.word	0x40020410
 80047ac:	40020428 	.word	0x40020428
 80047b0:	40020440 	.word	0x40020440
 80047b4:	40020458 	.word	0x40020458
 80047b8:	40020470 	.word	0x40020470
 80047bc:	40020488 	.word	0x40020488
 80047c0:	400204a0 	.word	0x400204a0
 80047c4:	400204b8 	.word	0x400204b8
 80047c8:	58025408 	.word	0x58025408
 80047cc:	5802541c 	.word	0x5802541c
 80047d0:	58025430 	.word	0x58025430
 80047d4:	58025444 	.word	0x58025444
 80047d8:	58025458 	.word	0x58025458
 80047dc:	5802546c 	.word	0x5802546c
 80047e0:	58025480 	.word	0x58025480
 80047e4:	58025494 	.word	0x58025494

080047e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	@ 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047f4:	4b67      	ldr	r3, [pc, #412]	@ (8004994 <HAL_DMA_IRQHandler+0x1ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a67      	ldr	r2, [pc, #412]	@ (8004998 <HAL_DMA_IRQHandler+0x1b0>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004806:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a5f      	ldr	r2, [pc, #380]	@ (800499c <HAL_DMA_IRQHandler+0x1b4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d04a      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a5d      	ldr	r2, [pc, #372]	@ (80049a0 <HAL_DMA_IRQHandler+0x1b8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d045      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a5c      	ldr	r2, [pc, #368]	@ (80049a4 <HAL_DMA_IRQHandler+0x1bc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d040      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a5a      	ldr	r2, [pc, #360]	@ (80049a8 <HAL_DMA_IRQHandler+0x1c0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d03b      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a59      	ldr	r2, [pc, #356]	@ (80049ac <HAL_DMA_IRQHandler+0x1c4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d036      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a57      	ldr	r2, [pc, #348]	@ (80049b0 <HAL_DMA_IRQHandler+0x1c8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d031      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a56      	ldr	r2, [pc, #344]	@ (80049b4 <HAL_DMA_IRQHandler+0x1cc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d02c      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a54      	ldr	r2, [pc, #336]	@ (80049b8 <HAL_DMA_IRQHandler+0x1d0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d027      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a53      	ldr	r2, [pc, #332]	@ (80049bc <HAL_DMA_IRQHandler+0x1d4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d022      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a51      	ldr	r2, [pc, #324]	@ (80049c0 <HAL_DMA_IRQHandler+0x1d8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01d      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a50      	ldr	r2, [pc, #320]	@ (80049c4 <HAL_DMA_IRQHandler+0x1dc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d018      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a4e      	ldr	r2, [pc, #312]	@ (80049c8 <HAL_DMA_IRQHandler+0x1e0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a4d      	ldr	r2, [pc, #308]	@ (80049cc <HAL_DMA_IRQHandler+0x1e4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a4b      	ldr	r2, [pc, #300]	@ (80049d0 <HAL_DMA_IRQHandler+0x1e8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a4a      	ldr	r2, [pc, #296]	@ (80049d4 <HAL_DMA_IRQHandler+0x1ec>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a48      	ldr	r2, [pc, #288]	@ (80049d8 <HAL_DMA_IRQHandler+0x1f0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <HAL_DMA_IRQHandler+0xd6>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_DMA_IRQHandler+0xd8>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 842b 	beq.w	800511c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2208      	movs	r2, #8
 80048d0:	409a      	lsls	r2, r3
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80a2 	beq.w	8004a20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2e      	ldr	r2, [pc, #184]	@ (800499c <HAL_DMA_IRQHandler+0x1b4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d04a      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2d      	ldr	r2, [pc, #180]	@ (80049a0 <HAL_DMA_IRQHandler+0x1b8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d045      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2b      	ldr	r2, [pc, #172]	@ (80049a4 <HAL_DMA_IRQHandler+0x1bc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d040      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a2a      	ldr	r2, [pc, #168]	@ (80049a8 <HAL_DMA_IRQHandler+0x1c0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d03b      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a28      	ldr	r2, [pc, #160]	@ (80049ac <HAL_DMA_IRQHandler+0x1c4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d036      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a27      	ldr	r2, [pc, #156]	@ (80049b0 <HAL_DMA_IRQHandler+0x1c8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d031      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a25      	ldr	r2, [pc, #148]	@ (80049b4 <HAL_DMA_IRQHandler+0x1cc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02c      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a24      	ldr	r2, [pc, #144]	@ (80049b8 <HAL_DMA_IRQHandler+0x1d0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d027      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a22      	ldr	r2, [pc, #136]	@ (80049bc <HAL_DMA_IRQHandler+0x1d4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a21      	ldr	r2, [pc, #132]	@ (80049c0 <HAL_DMA_IRQHandler+0x1d8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01d      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1f      	ldr	r2, [pc, #124]	@ (80049c4 <HAL_DMA_IRQHandler+0x1dc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1e      	ldr	r2, [pc, #120]	@ (80049c8 <HAL_DMA_IRQHandler+0x1e0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1c      	ldr	r2, [pc, #112]	@ (80049cc <HAL_DMA_IRQHandler+0x1e4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1b      	ldr	r2, [pc, #108]	@ (80049d0 <HAL_DMA_IRQHandler+0x1e8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a19      	ldr	r2, [pc, #100]	@ (80049d4 <HAL_DMA_IRQHandler+0x1ec>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a18      	ldr	r2, [pc, #96]	@ (80049d8 <HAL_DMA_IRQHandler+0x1f0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d12f      	bne.n	80049dc <HAL_DMA_IRQHandler+0x1f4>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	bf14      	ite	ne
 800498a:	2301      	movne	r3, #1
 800498c:	2300      	moveq	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e02e      	b.n	80049f0 <HAL_DMA_IRQHandler+0x208>
 8004992:	bf00      	nop
 8004994:	24000000 	.word	0x24000000
 8004998:	1b4e81b5 	.word	0x1b4e81b5
 800499c:	40020010 	.word	0x40020010
 80049a0:	40020028 	.word	0x40020028
 80049a4:	40020040 	.word	0x40020040
 80049a8:	40020058 	.word	0x40020058
 80049ac:	40020070 	.word	0x40020070
 80049b0:	40020088 	.word	0x40020088
 80049b4:	400200a0 	.word	0x400200a0
 80049b8:	400200b8 	.word	0x400200b8
 80049bc:	40020410 	.word	0x40020410
 80049c0:	40020428 	.word	0x40020428
 80049c4:	40020440 	.word	0x40020440
 80049c8:	40020458 	.word	0x40020458
 80049cc:	40020470 	.word	0x40020470
 80049d0:	40020488 	.word	0x40020488
 80049d4:	400204a0 	.word	0x400204a0
 80049d8:	400204b8 	.word	0x400204b8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d015      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0204 	bic.w	r2, r2, #4
 8004a02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a18:	f043 0201 	orr.w	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d06e      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a69      	ldr	r2, [pc, #420]	@ (8004be0 <HAL_DMA_IRQHandler+0x3f8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d04a      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a67      	ldr	r2, [pc, #412]	@ (8004be4 <HAL_DMA_IRQHandler+0x3fc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d045      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a66      	ldr	r2, [pc, #408]	@ (8004be8 <HAL_DMA_IRQHandler+0x400>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d040      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a64      	ldr	r2, [pc, #400]	@ (8004bec <HAL_DMA_IRQHandler+0x404>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d03b      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a63      	ldr	r2, [pc, #396]	@ (8004bf0 <HAL_DMA_IRQHandler+0x408>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d036      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a61      	ldr	r2, [pc, #388]	@ (8004bf4 <HAL_DMA_IRQHandler+0x40c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d031      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a60      	ldr	r2, [pc, #384]	@ (8004bf8 <HAL_DMA_IRQHandler+0x410>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d02c      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a5e      	ldr	r2, [pc, #376]	@ (8004bfc <HAL_DMA_IRQHandler+0x414>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d027      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a5d      	ldr	r2, [pc, #372]	@ (8004c00 <HAL_DMA_IRQHandler+0x418>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d022      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a5b      	ldr	r2, [pc, #364]	@ (8004c04 <HAL_DMA_IRQHandler+0x41c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01d      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a5a      	ldr	r2, [pc, #360]	@ (8004c08 <HAL_DMA_IRQHandler+0x420>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d018      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a58      	ldr	r2, [pc, #352]	@ (8004c0c <HAL_DMA_IRQHandler+0x424>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a57      	ldr	r2, [pc, #348]	@ (8004c10 <HAL_DMA_IRQHandler+0x428>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a55      	ldr	r2, [pc, #340]	@ (8004c14 <HAL_DMA_IRQHandler+0x42c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a54      	ldr	r2, [pc, #336]	@ (8004c18 <HAL_DMA_IRQHandler+0x430>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a52      	ldr	r2, [pc, #328]	@ (8004c1c <HAL_DMA_IRQHandler+0x434>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10a      	bne.n	8004aec <HAL_DMA_IRQHandler+0x304>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e003      	b.n	8004af4 <HAL_DMA_IRQHandler+0x30c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00d      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	2201      	movs	r2, #1
 8004b02:	409a      	lsls	r2, r3
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0c:	f043 0202 	orr.w	r2, r3, #2
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 808f 	beq.w	8004c48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004be0 <HAL_DMA_IRQHandler+0x3f8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d04a      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a2a      	ldr	r2, [pc, #168]	@ (8004be4 <HAL_DMA_IRQHandler+0x3fc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d045      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a29      	ldr	r2, [pc, #164]	@ (8004be8 <HAL_DMA_IRQHandler+0x400>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d040      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a27      	ldr	r2, [pc, #156]	@ (8004bec <HAL_DMA_IRQHandler+0x404>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d03b      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a26      	ldr	r2, [pc, #152]	@ (8004bf0 <HAL_DMA_IRQHandler+0x408>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d036      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a24      	ldr	r2, [pc, #144]	@ (8004bf4 <HAL_DMA_IRQHandler+0x40c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d031      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a23      	ldr	r2, [pc, #140]	@ (8004bf8 <HAL_DMA_IRQHandler+0x410>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d02c      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a21      	ldr	r2, [pc, #132]	@ (8004bfc <HAL_DMA_IRQHandler+0x414>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d027      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a20      	ldr	r2, [pc, #128]	@ (8004c00 <HAL_DMA_IRQHandler+0x418>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d022      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1e      	ldr	r2, [pc, #120]	@ (8004c04 <HAL_DMA_IRQHandler+0x41c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01d      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1d      	ldr	r2, [pc, #116]	@ (8004c08 <HAL_DMA_IRQHandler+0x420>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d018      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c0c <HAL_DMA_IRQHandler+0x424>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c10 <HAL_DMA_IRQHandler+0x428>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00e      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a18      	ldr	r2, [pc, #96]	@ (8004c14 <HAL_DMA_IRQHandler+0x42c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <HAL_DMA_IRQHandler+0x430>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a15      	ldr	r2, [pc, #84]	@ (8004c1c <HAL_DMA_IRQHandler+0x434>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d12a      	bne.n	8004c20 <HAL_DMA_IRQHandler+0x438>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e023      	b.n	8004c28 <HAL_DMA_IRQHandler+0x440>
 8004be0:	40020010 	.word	0x40020010
 8004be4:	40020028 	.word	0x40020028
 8004be8:	40020040 	.word	0x40020040
 8004bec:	40020058 	.word	0x40020058
 8004bf0:	40020070 	.word	0x40020070
 8004bf4:	40020088 	.word	0x40020088
 8004bf8:	400200a0 	.word	0x400200a0
 8004bfc:	400200b8 	.word	0x400200b8
 8004c00:	40020410 	.word	0x40020410
 8004c04:	40020428 	.word	0x40020428
 8004c08:	40020440 	.word	0x40020440
 8004c0c:	40020458 	.word	0x40020458
 8004c10:	40020470 	.word	0x40020470
 8004c14:	40020488 	.word	0x40020488
 8004c18:	400204a0 	.word	0x400204a0
 8004c1c:	400204b8 	.word	0x400204b8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	2204      	movs	r2, #4
 8004c36:	409a      	lsls	r2, r3
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c40:	f043 0204 	orr.w	r2, r3, #4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2210      	movs	r2, #16
 8004c52:	409a      	lsls	r2, r3
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80a6 	beq.w	8004daa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a85      	ldr	r2, [pc, #532]	@ (8004e78 <HAL_DMA_IRQHandler+0x690>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d04a      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a83      	ldr	r2, [pc, #524]	@ (8004e7c <HAL_DMA_IRQHandler+0x694>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d045      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a82      	ldr	r2, [pc, #520]	@ (8004e80 <HAL_DMA_IRQHandler+0x698>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d040      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a80      	ldr	r2, [pc, #512]	@ (8004e84 <HAL_DMA_IRQHandler+0x69c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d03b      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7f      	ldr	r2, [pc, #508]	@ (8004e88 <HAL_DMA_IRQHandler+0x6a0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d036      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a7d      	ldr	r2, [pc, #500]	@ (8004e8c <HAL_DMA_IRQHandler+0x6a4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d031      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e90 <HAL_DMA_IRQHandler+0x6a8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d02c      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a7a      	ldr	r2, [pc, #488]	@ (8004e94 <HAL_DMA_IRQHandler+0x6ac>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d027      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a79      	ldr	r2, [pc, #484]	@ (8004e98 <HAL_DMA_IRQHandler+0x6b0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d022      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a77      	ldr	r2, [pc, #476]	@ (8004e9c <HAL_DMA_IRQHandler+0x6b4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01d      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a76      	ldr	r2, [pc, #472]	@ (8004ea0 <HAL_DMA_IRQHandler+0x6b8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d018      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a74      	ldr	r2, [pc, #464]	@ (8004ea4 <HAL_DMA_IRQHandler+0x6bc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a73      	ldr	r2, [pc, #460]	@ (8004ea8 <HAL_DMA_IRQHandler+0x6c0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00e      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a71      	ldr	r2, [pc, #452]	@ (8004eac <HAL_DMA_IRQHandler+0x6c4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d009      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a70      	ldr	r2, [pc, #448]	@ (8004eb0 <HAL_DMA_IRQHandler+0x6c8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8004eb4 <HAL_DMA_IRQHandler+0x6cc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d10a      	bne.n	8004d14 <HAL_DMA_IRQHandler+0x52c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e009      	b.n	8004d28 <HAL_DMA_IRQHandler+0x540>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d03e      	beq.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2210      	movs	r2, #16
 8004d36:	409a      	lsls	r2, r3
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d018      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d024      	beq.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
 8004d68:	e01f      	b.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01b      	beq.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
 8004d7a:	e016      	b.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d107      	bne.n	8004d9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0208 	bic.w	r2, r2, #8
 8004d98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2220      	movs	r2, #32
 8004db4:	409a      	lsls	r2, r3
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8110 	beq.w	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8004e78 <HAL_DMA_IRQHandler+0x690>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d04a      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2b      	ldr	r2, [pc, #172]	@ (8004e7c <HAL_DMA_IRQHandler+0x694>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d045      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a29      	ldr	r2, [pc, #164]	@ (8004e80 <HAL_DMA_IRQHandler+0x698>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d040      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a28      	ldr	r2, [pc, #160]	@ (8004e84 <HAL_DMA_IRQHandler+0x69c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d03b      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a26      	ldr	r2, [pc, #152]	@ (8004e88 <HAL_DMA_IRQHandler+0x6a0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d036      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a25      	ldr	r2, [pc, #148]	@ (8004e8c <HAL_DMA_IRQHandler+0x6a4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d031      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a23      	ldr	r2, [pc, #140]	@ (8004e90 <HAL_DMA_IRQHandler+0x6a8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02c      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a22      	ldr	r2, [pc, #136]	@ (8004e94 <HAL_DMA_IRQHandler+0x6ac>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d027      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a20      	ldr	r2, [pc, #128]	@ (8004e98 <HAL_DMA_IRQHandler+0x6b0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d022      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e9c <HAL_DMA_IRQHandler+0x6b4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d01d      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea0 <HAL_DMA_IRQHandler+0x6b8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d018      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <HAL_DMA_IRQHandler+0x6bc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea8 <HAL_DMA_IRQHandler+0x6c0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a19      	ldr	r2, [pc, #100]	@ (8004eac <HAL_DMA_IRQHandler+0x6c4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a17      	ldr	r2, [pc, #92]	@ (8004eb0 <HAL_DMA_IRQHandler+0x6c8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <HAL_DMA_IRQHandler+0x6cc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d12b      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0x6d0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e02a      	b.n	8004ecc <HAL_DMA_IRQHandler+0x6e4>
 8004e76:	bf00      	nop
 8004e78:	40020010 	.word	0x40020010
 8004e7c:	40020028 	.word	0x40020028
 8004e80:	40020040 	.word	0x40020040
 8004e84:	40020058 	.word	0x40020058
 8004e88:	40020070 	.word	0x40020070
 8004e8c:	40020088 	.word	0x40020088
 8004e90:	400200a0 	.word	0x400200a0
 8004e94:	400200b8 	.word	0x400200b8
 8004e98:	40020410 	.word	0x40020410
 8004e9c:	40020428 	.word	0x40020428
 8004ea0:	40020440 	.word	0x40020440
 8004ea4:	40020458 	.word	0x40020458
 8004ea8:	40020470 	.word	0x40020470
 8004eac:	40020488 	.word	0x40020488
 8004eb0:	400204a0 	.word	0x400204a0
 8004eb4:	400204b8 	.word	0x400204b8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8087 	beq.w	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2220      	movs	r2, #32
 8004edc:	409a      	lsls	r2, r3
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d139      	bne.n	8004f62 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0216 	bic.w	r2, r2, #22
 8004efc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f0c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <HAL_DMA_IRQHandler+0x736>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0208 	bic.w	r2, r2, #8
 8004f2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	223f      	movs	r2, #63	@ 0x3f
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 834a 	beq.w	80055ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4798      	blx	r3
          }
          return;
 8004f60:	e344      	b.n	80055ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d018      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d108      	bne.n	8004f90 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d02c      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
 8004f8e:	e027      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d023      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
 8004fa0:	e01e      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10f      	bne.n	8004fd0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0210 	bic.w	r2, r2, #16
 8004fbe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8306 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8088 	beq.w	8005108 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7a      	ldr	r2, [pc, #488]	@ (80051f0 <HAL_DMA_IRQHandler+0xa08>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d04a      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a79      	ldr	r2, [pc, #484]	@ (80051f4 <HAL_DMA_IRQHandler+0xa0c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d045      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a77      	ldr	r2, [pc, #476]	@ (80051f8 <HAL_DMA_IRQHandler+0xa10>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d040      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a76      	ldr	r2, [pc, #472]	@ (80051fc <HAL_DMA_IRQHandler+0xa14>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d03b      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a74      	ldr	r2, [pc, #464]	@ (8005200 <HAL_DMA_IRQHandler+0xa18>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d036      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a73      	ldr	r2, [pc, #460]	@ (8005204 <HAL_DMA_IRQHandler+0xa1c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d031      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a71      	ldr	r2, [pc, #452]	@ (8005208 <HAL_DMA_IRQHandler+0xa20>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d02c      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a70      	ldr	r2, [pc, #448]	@ (800520c <HAL_DMA_IRQHandler+0xa24>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d027      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a6e      	ldr	r2, [pc, #440]	@ (8005210 <HAL_DMA_IRQHandler+0xa28>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d022      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a6d      	ldr	r2, [pc, #436]	@ (8005214 <HAL_DMA_IRQHandler+0xa2c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d01d      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a6b      	ldr	r2, [pc, #428]	@ (8005218 <HAL_DMA_IRQHandler+0xa30>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6a      	ldr	r2, [pc, #424]	@ (800521c <HAL_DMA_IRQHandler+0xa34>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a68      	ldr	r2, [pc, #416]	@ (8005220 <HAL_DMA_IRQHandler+0xa38>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a67      	ldr	r2, [pc, #412]	@ (8005224 <HAL_DMA_IRQHandler+0xa3c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a65      	ldr	r2, [pc, #404]	@ (8005228 <HAL_DMA_IRQHandler+0xa40>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a64      	ldr	r2, [pc, #400]	@ (800522c <HAL_DMA_IRQHandler+0xa44>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d108      	bne.n	80050b2 <HAL_DMA_IRQHandler+0x8ca>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e007      	b.n	80050c2 <HAL_DMA_IRQHandler+0x8da>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3301      	adds	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d307      	bcc.n	80050de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f2      	bne.n	80050c2 <HAL_DMA_IRQHandler+0x8da>
 80050dc:	e000      	b.n	80050e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80050de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2203      	movs	r2, #3
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80050f6:	e003      	b.n	8005100 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8272 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
 800511a:	e26c      	b.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a43      	ldr	r2, [pc, #268]	@ (8005230 <HAL_DMA_IRQHandler+0xa48>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d022      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a42      	ldr	r2, [pc, #264]	@ (8005234 <HAL_DMA_IRQHandler+0xa4c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d01d      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a40      	ldr	r2, [pc, #256]	@ (8005238 <HAL_DMA_IRQHandler+0xa50>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d018      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a3f      	ldr	r2, [pc, #252]	@ (800523c <HAL_DMA_IRQHandler+0xa54>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3d      	ldr	r2, [pc, #244]	@ (8005240 <HAL_DMA_IRQHandler+0xa58>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a3c      	ldr	r2, [pc, #240]	@ (8005244 <HAL_DMA_IRQHandler+0xa5c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3a      	ldr	r2, [pc, #232]	@ (8005248 <HAL_DMA_IRQHandler+0xa60>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a39      	ldr	r2, [pc, #228]	@ (800524c <HAL_DMA_IRQHandler+0xa64>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_DMA_IRQHandler+0x988>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_DMA_IRQHandler+0x98a>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 823f 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2204      	movs	r2, #4
 800518a:	409a      	lsls	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80cd 	beq.w	8005330 <HAL_DMA_IRQHandler+0xb48>
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80c7 	beq.w	8005330 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	2204      	movs	r2, #4
 80051ac:	409a      	lsls	r2, r3
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d049      	beq.n	8005250 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8210 	beq.w	80055f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d8:	e20a      	b.n	80055f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8206 	beq.w	80055f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051ec:	e200      	b.n	80055f0 <HAL_DMA_IRQHandler+0xe08>
 80051ee:	bf00      	nop
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
 8005230:	58025408 	.word	0x58025408
 8005234:	5802541c 	.word	0x5802541c
 8005238:	58025430 	.word	0x58025430
 800523c:	58025444 	.word	0x58025444
 8005240:	58025458 	.word	0x58025458
 8005244:	5802546c 	.word	0x5802546c
 8005248:	58025480 	.word	0x58025480
 800524c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d160      	bne.n	800531c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a7f      	ldr	r2, [pc, #508]	@ (800545c <HAL_DMA_IRQHandler+0xc74>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04a      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a7d      	ldr	r2, [pc, #500]	@ (8005460 <HAL_DMA_IRQHandler+0xc78>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d045      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a7c      	ldr	r2, [pc, #496]	@ (8005464 <HAL_DMA_IRQHandler+0xc7c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d040      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a7a      	ldr	r2, [pc, #488]	@ (8005468 <HAL_DMA_IRQHandler+0xc80>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d03b      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a79      	ldr	r2, [pc, #484]	@ (800546c <HAL_DMA_IRQHandler+0xc84>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d036      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a77      	ldr	r2, [pc, #476]	@ (8005470 <HAL_DMA_IRQHandler+0xc88>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d031      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a76      	ldr	r2, [pc, #472]	@ (8005474 <HAL_DMA_IRQHandler+0xc8c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d02c      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a74      	ldr	r2, [pc, #464]	@ (8005478 <HAL_DMA_IRQHandler+0xc90>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d027      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a73      	ldr	r2, [pc, #460]	@ (800547c <HAL_DMA_IRQHandler+0xc94>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a71      	ldr	r2, [pc, #452]	@ (8005480 <HAL_DMA_IRQHandler+0xc98>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01d      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a70      	ldr	r2, [pc, #448]	@ (8005484 <HAL_DMA_IRQHandler+0xc9c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005488 <HAL_DMA_IRQHandler+0xca0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a6d      	ldr	r2, [pc, #436]	@ (800548c <HAL_DMA_IRQHandler+0xca4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005490 <HAL_DMA_IRQHandler+0xca8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6a      	ldr	r2, [pc, #424]	@ (8005494 <HAL_DMA_IRQHandler+0xcac>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a68      	ldr	r2, [pc, #416]	@ (8005498 <HAL_DMA_IRQHandler+0xcb0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <HAL_DMA_IRQHandler+0xb24>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0208 	bic.w	r2, r2, #8
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e007      	b.n	800531c <HAL_DMA_IRQHandler+0xb34>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0204 	bic.w	r2, r2, #4
 800531a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8165 	beq.w	80055f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800532e:	e15f      	b.n	80055f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	2202      	movs	r2, #2
 800533a:	409a      	lsls	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4013      	ands	r3, r2
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80c5 	beq.w	80054d0 <HAL_DMA_IRQHandler+0xce8>
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80bf 	beq.w	80054d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2202      	movs	r2, #2
 800535c:	409a      	lsls	r2, r3
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d018      	beq.n	800539e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 813a 	beq.w	80055f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005388:	e134      	b.n	80055f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 8130 	beq.w	80055f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800539c:	e12a      	b.n	80055f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 8089 	bne.w	80054bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2b      	ldr	r2, [pc, #172]	@ (800545c <HAL_DMA_IRQHandler+0xc74>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a29      	ldr	r2, [pc, #164]	@ (8005460 <HAL_DMA_IRQHandler+0xc78>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a28      	ldr	r2, [pc, #160]	@ (8005464 <HAL_DMA_IRQHandler+0xc7c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a26      	ldr	r2, [pc, #152]	@ (8005468 <HAL_DMA_IRQHandler+0xc80>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a25      	ldr	r2, [pc, #148]	@ (800546c <HAL_DMA_IRQHandler+0xc84>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a23      	ldr	r2, [pc, #140]	@ (8005470 <HAL_DMA_IRQHandler+0xc88>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a22      	ldr	r2, [pc, #136]	@ (8005474 <HAL_DMA_IRQHandler+0xc8c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a20      	ldr	r2, [pc, #128]	@ (8005478 <HAL_DMA_IRQHandler+0xc90>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1f      	ldr	r2, [pc, #124]	@ (800547c <HAL_DMA_IRQHandler+0xc94>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1d      	ldr	r2, [pc, #116]	@ (8005480 <HAL_DMA_IRQHandler+0xc98>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1c      	ldr	r2, [pc, #112]	@ (8005484 <HAL_DMA_IRQHandler+0xc9c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1a      	ldr	r2, [pc, #104]	@ (8005488 <HAL_DMA_IRQHandler+0xca0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a19      	ldr	r2, [pc, #100]	@ (800548c <HAL_DMA_IRQHandler+0xca4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a17      	ldr	r2, [pc, #92]	@ (8005490 <HAL_DMA_IRQHandler+0xca8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a16      	ldr	r2, [pc, #88]	@ (8005494 <HAL_DMA_IRQHandler+0xcac>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_IRQHandler+0xc62>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a14      	ldr	r2, [pc, #80]	@ (8005498 <HAL_DMA_IRQHandler+0xcb0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d128      	bne.n	800549c <HAL_DMA_IRQHandler+0xcb4>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0214 	bic.w	r2, r2, #20
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e027      	b.n	80054ac <HAL_DMA_IRQHandler+0xcc4>
 800545c:	40020010 	.word	0x40020010
 8005460:	40020028 	.word	0x40020028
 8005464:	40020040 	.word	0x40020040
 8005468:	40020058 	.word	0x40020058
 800546c:	40020070 	.word	0x40020070
 8005470:	40020088 	.word	0x40020088
 8005474:	400200a0 	.word	0x400200a0
 8005478:	400200b8 	.word	0x400200b8
 800547c:	40020410 	.word	0x40020410
 8005480:	40020428 	.word	0x40020428
 8005484:	40020440 	.word	0x40020440
 8005488:	40020458 	.word	0x40020458
 800548c:	40020470 	.word	0x40020470
 8005490:	40020488 	.word	0x40020488
 8005494:	400204a0 	.word	0x400204a0
 8005498:	400204b8 	.word	0x400204b8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 020a 	bic.w	r2, r2, #10
 80054aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8097 	beq.w	80055f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ce:	e091      	b.n	80055f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	2208      	movs	r2, #8
 80054da:	409a      	lsls	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8088 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8082 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a41      	ldr	r2, [pc, #260]	@ (80055fc <HAL_DMA_IRQHandler+0xe14>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d04a      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a3f      	ldr	r2, [pc, #252]	@ (8005600 <HAL_DMA_IRQHandler+0xe18>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d045      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3e      	ldr	r2, [pc, #248]	@ (8005604 <HAL_DMA_IRQHandler+0xe1c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d040      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a3c      	ldr	r2, [pc, #240]	@ (8005608 <HAL_DMA_IRQHandler+0xe20>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d03b      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a3b      	ldr	r2, [pc, #236]	@ (800560c <HAL_DMA_IRQHandler+0xe24>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d036      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a39      	ldr	r2, [pc, #228]	@ (8005610 <HAL_DMA_IRQHandler+0xe28>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d031      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a38      	ldr	r2, [pc, #224]	@ (8005614 <HAL_DMA_IRQHandler+0xe2c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d02c      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a36      	ldr	r2, [pc, #216]	@ (8005618 <HAL_DMA_IRQHandler+0xe30>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d027      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a35      	ldr	r2, [pc, #212]	@ (800561c <HAL_DMA_IRQHandler+0xe34>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d022      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a33      	ldr	r2, [pc, #204]	@ (8005620 <HAL_DMA_IRQHandler+0xe38>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01d      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a32      	ldr	r2, [pc, #200]	@ (8005624 <HAL_DMA_IRQHandler+0xe3c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d018      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a30      	ldr	r2, [pc, #192]	@ (8005628 <HAL_DMA_IRQHandler+0xe40>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2f      	ldr	r2, [pc, #188]	@ (800562c <HAL_DMA_IRQHandler+0xe44>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00e      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2d      	ldr	r2, [pc, #180]	@ (8005630 <HAL_DMA_IRQHandler+0xe48>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d009      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2c      	ldr	r2, [pc, #176]	@ (8005634 <HAL_DMA_IRQHandler+0xe4c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d004      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2a      	ldr	r2, [pc, #168]	@ (8005638 <HAL_DMA_IRQHandler+0xe50>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <HAL_DMA_IRQHandler+0xdbc>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 021c 	bic.w	r2, r2, #28
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e007      	b.n	80055b4 <HAL_DMA_IRQHandler+0xdcc>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 020e 	bic.w	r2, r2, #14
 80055b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2201      	movs	r2, #1
 80055be:	409a      	lsls	r2, r3
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
 80055ea:	e004      	b.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80055ec:	bf00      	nop
 80055ee:	e002      	b.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055f6:	3728      	adds	r7, #40	@ 0x28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40020010 	.word	0x40020010
 8005600:	40020028 	.word	0x40020028
 8005604:	40020040 	.word	0x40020040
 8005608:	40020058 	.word	0x40020058
 800560c:	40020070 	.word	0x40020070
 8005610:	40020088 	.word	0x40020088
 8005614:	400200a0 	.word	0x400200a0
 8005618:	400200b8 	.word	0x400200b8
 800561c:	40020410 	.word	0x40020410
 8005620:	40020428 	.word	0x40020428
 8005624:	40020440 	.word	0x40020440
 8005628:	40020458 	.word	0x40020458
 800562c:	40020470 	.word	0x40020470
 8005630:	40020488 	.word	0x40020488
 8005634:	400204a0 	.word	0x400204a0
 8005638:	400204b8 	.word	0x400204b8

0800563c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005654:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a7f      	ldr	r2, [pc, #508]	@ (8005858 <DMA_SetConfig+0x21c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d072      	beq.n	8005746 <DMA_SetConfig+0x10a>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a7d      	ldr	r2, [pc, #500]	@ (800585c <DMA_SetConfig+0x220>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d06d      	beq.n	8005746 <DMA_SetConfig+0x10a>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a7c      	ldr	r2, [pc, #496]	@ (8005860 <DMA_SetConfig+0x224>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d068      	beq.n	8005746 <DMA_SetConfig+0x10a>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a7a      	ldr	r2, [pc, #488]	@ (8005864 <DMA_SetConfig+0x228>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d063      	beq.n	8005746 <DMA_SetConfig+0x10a>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a79      	ldr	r2, [pc, #484]	@ (8005868 <DMA_SetConfig+0x22c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d05e      	beq.n	8005746 <DMA_SetConfig+0x10a>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a77      	ldr	r2, [pc, #476]	@ (800586c <DMA_SetConfig+0x230>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d059      	beq.n	8005746 <DMA_SetConfig+0x10a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a76      	ldr	r2, [pc, #472]	@ (8005870 <DMA_SetConfig+0x234>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d054      	beq.n	8005746 <DMA_SetConfig+0x10a>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a74      	ldr	r2, [pc, #464]	@ (8005874 <DMA_SetConfig+0x238>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d04f      	beq.n	8005746 <DMA_SetConfig+0x10a>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a73      	ldr	r2, [pc, #460]	@ (8005878 <DMA_SetConfig+0x23c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d04a      	beq.n	8005746 <DMA_SetConfig+0x10a>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a71      	ldr	r2, [pc, #452]	@ (800587c <DMA_SetConfig+0x240>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d045      	beq.n	8005746 <DMA_SetConfig+0x10a>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a70      	ldr	r2, [pc, #448]	@ (8005880 <DMA_SetConfig+0x244>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d040      	beq.n	8005746 <DMA_SetConfig+0x10a>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a6e      	ldr	r2, [pc, #440]	@ (8005884 <DMA_SetConfig+0x248>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d03b      	beq.n	8005746 <DMA_SetConfig+0x10a>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a6d      	ldr	r2, [pc, #436]	@ (8005888 <DMA_SetConfig+0x24c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d036      	beq.n	8005746 <DMA_SetConfig+0x10a>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6b      	ldr	r2, [pc, #428]	@ (800588c <DMA_SetConfig+0x250>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d031      	beq.n	8005746 <DMA_SetConfig+0x10a>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6a      	ldr	r2, [pc, #424]	@ (8005890 <DMA_SetConfig+0x254>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d02c      	beq.n	8005746 <DMA_SetConfig+0x10a>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a68      	ldr	r2, [pc, #416]	@ (8005894 <DMA_SetConfig+0x258>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d027      	beq.n	8005746 <DMA_SetConfig+0x10a>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a67      	ldr	r2, [pc, #412]	@ (8005898 <DMA_SetConfig+0x25c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <DMA_SetConfig+0x10a>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a65      	ldr	r2, [pc, #404]	@ (800589c <DMA_SetConfig+0x260>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01d      	beq.n	8005746 <DMA_SetConfig+0x10a>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a64      	ldr	r2, [pc, #400]	@ (80058a0 <DMA_SetConfig+0x264>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <DMA_SetConfig+0x10a>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a62      	ldr	r2, [pc, #392]	@ (80058a4 <DMA_SetConfig+0x268>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <DMA_SetConfig+0x10a>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a61      	ldr	r2, [pc, #388]	@ (80058a8 <DMA_SetConfig+0x26c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <DMA_SetConfig+0x10a>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a5f      	ldr	r2, [pc, #380]	@ (80058ac <DMA_SetConfig+0x270>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <DMA_SetConfig+0x10a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a5e      	ldr	r2, [pc, #376]	@ (80058b0 <DMA_SetConfig+0x274>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <DMA_SetConfig+0x10a>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a5c      	ldr	r2, [pc, #368]	@ (80058b4 <DMA_SetConfig+0x278>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d101      	bne.n	800574a <DMA_SetConfig+0x10e>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <DMA_SetConfig+0x110>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00d      	beq.n	800576c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005758:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d004      	beq.n	800576c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800576a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a39      	ldr	r2, [pc, #228]	@ (8005858 <DMA_SetConfig+0x21c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d04a      	beq.n	800580c <DMA_SetConfig+0x1d0>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a38      	ldr	r2, [pc, #224]	@ (800585c <DMA_SetConfig+0x220>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d045      	beq.n	800580c <DMA_SetConfig+0x1d0>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a36      	ldr	r2, [pc, #216]	@ (8005860 <DMA_SetConfig+0x224>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d040      	beq.n	800580c <DMA_SetConfig+0x1d0>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a35      	ldr	r2, [pc, #212]	@ (8005864 <DMA_SetConfig+0x228>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d03b      	beq.n	800580c <DMA_SetConfig+0x1d0>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a33      	ldr	r2, [pc, #204]	@ (8005868 <DMA_SetConfig+0x22c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d036      	beq.n	800580c <DMA_SetConfig+0x1d0>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a32      	ldr	r2, [pc, #200]	@ (800586c <DMA_SetConfig+0x230>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d031      	beq.n	800580c <DMA_SetConfig+0x1d0>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a30      	ldr	r2, [pc, #192]	@ (8005870 <DMA_SetConfig+0x234>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d02c      	beq.n	800580c <DMA_SetConfig+0x1d0>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005874 <DMA_SetConfig+0x238>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d027      	beq.n	800580c <DMA_SetConfig+0x1d0>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005878 <DMA_SetConfig+0x23c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d022      	beq.n	800580c <DMA_SetConfig+0x1d0>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2c      	ldr	r2, [pc, #176]	@ (800587c <DMA_SetConfig+0x240>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d01d      	beq.n	800580c <DMA_SetConfig+0x1d0>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005880 <DMA_SetConfig+0x244>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d018      	beq.n	800580c <DMA_SetConfig+0x1d0>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a29      	ldr	r2, [pc, #164]	@ (8005884 <DMA_SetConfig+0x248>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d013      	beq.n	800580c <DMA_SetConfig+0x1d0>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a27      	ldr	r2, [pc, #156]	@ (8005888 <DMA_SetConfig+0x24c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00e      	beq.n	800580c <DMA_SetConfig+0x1d0>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a26      	ldr	r2, [pc, #152]	@ (800588c <DMA_SetConfig+0x250>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d009      	beq.n	800580c <DMA_SetConfig+0x1d0>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a24      	ldr	r2, [pc, #144]	@ (8005890 <DMA_SetConfig+0x254>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d004      	beq.n	800580c <DMA_SetConfig+0x1d0>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a23      	ldr	r2, [pc, #140]	@ (8005894 <DMA_SetConfig+0x258>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d101      	bne.n	8005810 <DMA_SetConfig+0x1d4>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <DMA_SetConfig+0x1d6>
 8005810:	2300      	movs	r3, #0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d059      	beq.n	80058ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	223f      	movs	r2, #63	@ 0x3f
 8005820:	409a      	lsls	r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005834:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b40      	cmp	r3, #64	@ 0x40
 8005844:	d138      	bne.n	80058b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005856:	e086      	b.n	8005966 <DMA_SetConfig+0x32a>
 8005858:	40020010 	.word	0x40020010
 800585c:	40020028 	.word	0x40020028
 8005860:	40020040 	.word	0x40020040
 8005864:	40020058 	.word	0x40020058
 8005868:	40020070 	.word	0x40020070
 800586c:	40020088 	.word	0x40020088
 8005870:	400200a0 	.word	0x400200a0
 8005874:	400200b8 	.word	0x400200b8
 8005878:	40020410 	.word	0x40020410
 800587c:	40020428 	.word	0x40020428
 8005880:	40020440 	.word	0x40020440
 8005884:	40020458 	.word	0x40020458
 8005888:	40020470 	.word	0x40020470
 800588c:	40020488 	.word	0x40020488
 8005890:	400204a0 	.word	0x400204a0
 8005894:	400204b8 	.word	0x400204b8
 8005898:	58025408 	.word	0x58025408
 800589c:	5802541c 	.word	0x5802541c
 80058a0:	58025430 	.word	0x58025430
 80058a4:	58025444 	.word	0x58025444
 80058a8:	58025458 	.word	0x58025458
 80058ac:	5802546c 	.word	0x5802546c
 80058b0:	58025480 	.word	0x58025480
 80058b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	60da      	str	r2, [r3, #12]
}
 80058c8:	e04d      	b.n	8005966 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a29      	ldr	r2, [pc, #164]	@ (8005974 <DMA_SetConfig+0x338>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <DMA_SetConfig+0x2de>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a27      	ldr	r2, [pc, #156]	@ (8005978 <DMA_SetConfig+0x33c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01d      	beq.n	800591a <DMA_SetConfig+0x2de>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a26      	ldr	r2, [pc, #152]	@ (800597c <DMA_SetConfig+0x340>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <DMA_SetConfig+0x2de>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a24      	ldr	r2, [pc, #144]	@ (8005980 <DMA_SetConfig+0x344>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <DMA_SetConfig+0x2de>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a23      	ldr	r2, [pc, #140]	@ (8005984 <DMA_SetConfig+0x348>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <DMA_SetConfig+0x2de>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a21      	ldr	r2, [pc, #132]	@ (8005988 <DMA_SetConfig+0x34c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <DMA_SetConfig+0x2de>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a20      	ldr	r2, [pc, #128]	@ (800598c <DMA_SetConfig+0x350>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <DMA_SetConfig+0x2de>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1e      	ldr	r2, [pc, #120]	@ (8005990 <DMA_SetConfig+0x354>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d101      	bne.n	800591e <DMA_SetConfig+0x2e2>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <DMA_SetConfig+0x2e4>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d020      	beq.n	8005966 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2201      	movs	r2, #1
 800592e:	409a      	lsls	r2, r3
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b40      	cmp	r3, #64	@ 0x40
 8005942:	d108      	bne.n	8005956 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	60da      	str	r2, [r3, #12]
}
 8005954:	e007      	b.n	8005966 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	60da      	str	r2, [r3, #12]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	58025408 	.word	0x58025408
 8005978:	5802541c 	.word	0x5802541c
 800597c:	58025430 	.word	0x58025430
 8005980:	58025444 	.word	0x58025444
 8005984:	58025458 	.word	0x58025458
 8005988:	5802546c 	.word	0x5802546c
 800598c:	58025480 	.word	0x58025480
 8005990:	58025494 	.word	0x58025494

08005994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a42      	ldr	r2, [pc, #264]	@ (8005aac <DMA_CalcBaseAndBitshift+0x118>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d04a      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a41      	ldr	r2, [pc, #260]	@ (8005ab0 <DMA_CalcBaseAndBitshift+0x11c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d045      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a3f      	ldr	r2, [pc, #252]	@ (8005ab4 <DMA_CalcBaseAndBitshift+0x120>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d040      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab8 <DMA_CalcBaseAndBitshift+0x124>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d03b      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3c      	ldr	r2, [pc, #240]	@ (8005abc <DMA_CalcBaseAndBitshift+0x128>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d036      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac0 <DMA_CalcBaseAndBitshift+0x12c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d031      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a39      	ldr	r2, [pc, #228]	@ (8005ac4 <DMA_CalcBaseAndBitshift+0x130>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d02c      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a38      	ldr	r2, [pc, #224]	@ (8005ac8 <DMA_CalcBaseAndBitshift+0x134>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d027      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a36      	ldr	r2, [pc, #216]	@ (8005acc <DMA_CalcBaseAndBitshift+0x138>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d022      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a35      	ldr	r2, [pc, #212]	@ (8005ad0 <DMA_CalcBaseAndBitshift+0x13c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d01d      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a33      	ldr	r2, [pc, #204]	@ (8005ad4 <DMA_CalcBaseAndBitshift+0x140>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d018      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a32      	ldr	r2, [pc, #200]	@ (8005ad8 <DMA_CalcBaseAndBitshift+0x144>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a30      	ldr	r2, [pc, #192]	@ (8005adc <DMA_CalcBaseAndBitshift+0x148>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00e      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d009      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ae4 <DMA_CalcBaseAndBitshift+0x150>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <DMA_CalcBaseAndBitshift+0xa8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae8 <DMA_CalcBaseAndBitshift+0x154>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d101      	bne.n	8005a40 <DMA_CalcBaseAndBitshift+0xac>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <DMA_CalcBaseAndBitshift+0xae>
 8005a40:	2300      	movs	r3, #0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d024      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	3b10      	subs	r3, #16
 8005a4e:	4a27      	ldr	r2, [pc, #156]	@ (8005aec <DMA_CalcBaseAndBitshift+0x158>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	4a24      	ldr	r2, [pc, #144]	@ (8005af0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005a60:	5cd3      	ldrb	r3, [r2, r3]
 8005a62:	461a      	mov	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d908      	bls.n	8005a80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	4b1f      	ldr	r3, [pc, #124]	@ (8005af4 <DMA_CalcBaseAndBitshift+0x160>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	1d1a      	adds	r2, r3, #4
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a7e:	e00d      	b.n	8005a9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	4b1b      	ldr	r3, [pc, #108]	@ (8005af4 <DMA_CalcBaseAndBitshift+0x160>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a8e:	e005      	b.n	8005a9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	40020010 	.word	0x40020010
 8005ab0:	40020028 	.word	0x40020028
 8005ab4:	40020040 	.word	0x40020040
 8005ab8:	40020058 	.word	0x40020058
 8005abc:	40020070 	.word	0x40020070
 8005ac0:	40020088 	.word	0x40020088
 8005ac4:	400200a0 	.word	0x400200a0
 8005ac8:	400200b8 	.word	0x400200b8
 8005acc:	40020410 	.word	0x40020410
 8005ad0:	40020428 	.word	0x40020428
 8005ad4:	40020440 	.word	0x40020440
 8005ad8:	40020458 	.word	0x40020458
 8005adc:	40020470 	.word	0x40020470
 8005ae0:	40020488 	.word	0x40020488
 8005ae4:	400204a0 	.word	0x400204a0
 8005ae8:	400204b8 	.word	0x400204b8
 8005aec:	aaaaaaab 	.word	0xaaaaaaab
 8005af0:	0800fd64 	.word	0x0800fd64
 8005af4:	fffffc00 	.word	0xfffffc00

08005af8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d120      	bne.n	8005b4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d858      	bhi.n	8005bc6 <DMA_CheckFifoParam+0xce>
 8005b14:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <DMA_CheckFifoParam+0x24>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b2d 	.word	0x08005b2d
 8005b20:	08005b3f 	.word	0x08005b3f
 8005b24:	08005b2d 	.word	0x08005b2d
 8005b28:	08005bc7 	.word	0x08005bc7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d048      	beq.n	8005bca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b3c:	e045      	b.n	8005bca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b46:	d142      	bne.n	8005bce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b4c:	e03f      	b.n	8005bce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b56:	d123      	bne.n	8005ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d838      	bhi.n	8005bd2 <DMA_CheckFifoParam+0xda>
 8005b60:	a201      	add	r2, pc, #4	@ (adr r2, 8005b68 <DMA_CheckFifoParam+0x70>)
 8005b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b66:	bf00      	nop
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b7f 	.word	0x08005b7f
 8005b70:	08005b79 	.word	0x08005b79
 8005b74:	08005b91 	.word	0x08005b91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
        break;
 8005b7c:	e030      	b.n	8005be0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d025      	beq.n	8005bd6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b8e:	e022      	b.n	8005bd6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b98:	d11f      	bne.n	8005bda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b9e:	e01c      	b.n	8005bda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d902      	bls.n	8005bae <DMA_CheckFifoParam+0xb6>
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d003      	beq.n	8005bb4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005bac:	e018      	b.n	8005be0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8005bb2:	e015      	b.n	8005be0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00e      	beq.n	8005bde <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8005bc4:	e00b      	b.n	8005bde <DMA_CheckFifoParam+0xe6>
        break;
 8005bc6:	bf00      	nop
 8005bc8:	e00a      	b.n	8005be0 <DMA_CheckFifoParam+0xe8>
        break;
 8005bca:	bf00      	nop
 8005bcc:	e008      	b.n	8005be0 <DMA_CheckFifoParam+0xe8>
        break;
 8005bce:	bf00      	nop
 8005bd0:	e006      	b.n	8005be0 <DMA_CheckFifoParam+0xe8>
        break;
 8005bd2:	bf00      	nop
 8005bd4:	e004      	b.n	8005be0 <DMA_CheckFifoParam+0xe8>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e002      	b.n	8005be0 <DMA_CheckFifoParam+0xe8>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e000      	b.n	8005be0 <DMA_CheckFifoParam+0xe8>
    break;
 8005bde:	bf00      	nop
    }
  }

  return status;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop

08005bf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a38      	ldr	r2, [pc, #224]	@ (8005ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d022      	beq.n	8005c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a36      	ldr	r2, [pc, #216]	@ (8005ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d01d      	beq.n	8005c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a35      	ldr	r2, [pc, #212]	@ (8005cec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d018      	beq.n	8005c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a33      	ldr	r2, [pc, #204]	@ (8005cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a32      	ldr	r2, [pc, #200]	@ (8005cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00e      	beq.n	8005c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a30      	ldr	r2, [pc, #192]	@ (8005cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d009      	beq.n	8005c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8005cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d004      	beq.n	8005c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a2d      	ldr	r2, [pc, #180]	@ (8005d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d101      	bne.n	8005c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005c52:	2300      	movs	r3, #0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01a      	beq.n	8005c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	3b08      	subs	r3, #8
 8005c60:	4a28      	ldr	r2, [pc, #160]	@ (8005d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	091b      	lsrs	r3, r3, #4
 8005c68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4b26      	ldr	r3, [pc, #152]	@ (8005d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	461a      	mov	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a24      	ldr	r2, [pc, #144]	@ (8005d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c7c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	2201      	movs	r2, #1
 8005c86:	409a      	lsls	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005c8c:	e024      	b.n	8005cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	3b10      	subs	r3, #16
 8005c96:	4a1e      	ldr	r2, [pc, #120]	@ (8005d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d806      	bhi.n	8005cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4a1b      	ldr	r2, [pc, #108]	@ (8005d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d902      	bls.n	8005cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4b18      	ldr	r3, [pc, #96]	@ (8005d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a16      	ldr	r2, [pc, #88]	@ (8005d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005cc8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f003 031f 	and.w	r3, r3, #31
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	58025408 	.word	0x58025408
 8005ce8:	5802541c 	.word	0x5802541c
 8005cec:	58025430 	.word	0x58025430
 8005cf0:	58025444 	.word	0x58025444
 8005cf4:	58025458 	.word	0x58025458
 8005cf8:	5802546c 	.word	0x5802546c
 8005cfc:	58025480 	.word	0x58025480
 8005d00:	58025494 	.word	0x58025494
 8005d04:	cccccccd 	.word	0xcccccccd
 8005d08:	16009600 	.word	0x16009600
 8005d0c:	58025880 	.word	0x58025880
 8005d10:	aaaaaaab 	.word	0xaaaaaaab
 8005d14:	400204b8 	.word	0x400204b8
 8005d18:	4002040f 	.word	0x4002040f
 8005d1c:	10008200 	.word	0x10008200
 8005d20:	40020880 	.word	0x40020880

08005d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d04a      	beq.n	8005dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d847      	bhi.n	8005dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a25      	ldr	r2, [pc, #148]	@ (8005ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d022      	beq.n	8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a24      	ldr	r2, [pc, #144]	@ (8005de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d01d      	beq.n	8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a22      	ldr	r2, [pc, #136]	@ (8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d018      	beq.n	8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a21      	ldr	r2, [pc, #132]	@ (8005de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d013      	beq.n	8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00e      	beq.n	8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1e      	ldr	r2, [pc, #120]	@ (8005df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1c      	ldr	r2, [pc, #112]	@ (8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d101      	bne.n	8005d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005d90:	2301      	movs	r3, #1
 8005d92:	e000      	b.n	8005d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005d94:	2300      	movs	r3, #0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4b17      	ldr	r3, [pc, #92]	@ (8005dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	461a      	mov	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a15      	ldr	r2, [pc, #84]	@ (8005e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005dac:	671a      	str	r2, [r3, #112]	@ 0x70
 8005dae:	e009      	b.n	8005dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4b14      	ldr	r3, [pc, #80]	@ (8005e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	461a      	mov	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a11      	ldr	r2, [pc, #68]	@ (8005e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005dc2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	2201      	movs	r2, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	58025408 	.word	0x58025408
 8005de0:	5802541c 	.word	0x5802541c
 8005de4:	58025430 	.word	0x58025430
 8005de8:	58025444 	.word	0x58025444
 8005dec:	58025458 	.word	0x58025458
 8005df0:	5802546c 	.word	0x5802546c
 8005df4:	58025480 	.word	0x58025480
 8005df8:	58025494 	.word	0x58025494
 8005dfc:	1600963f 	.word	0x1600963f
 8005e00:	58025940 	.word	0x58025940
 8005e04:	1000823f 	.word	0x1000823f
 8005e08:	40020940 	.word	0x40020940

08005e0c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	460b      	mov	r3, r1
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e00a      	b.n	8005e3e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005e28:	7afb      	ldrb	r3, [r7, #11]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	605a      	str	r2, [r3, #4]
      break;
 8005e34:	e002      	b.n	8005e3c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	75fb      	strb	r3, [r7, #23]
      break;
 8005e3a:	bf00      	nop
  }

  return status;
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e003      	b.n	8005e66 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005e64:	2300      	movs	r3, #0
  }
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
	...

08005e74 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	2201      	movs	r2, #1
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8005e98:	f7fd fece 	bl	8003c38 <HAL_GetCurrentCPUID>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d105      	bne.n	8005eae <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	011a      	lsls	r2, r3, #4
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ee4 <HAL_EXTI_IRQHandler+0x70>)
 8005ea8:	4413      	add	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	e004      	b.n	8005eb8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	011a      	lsls	r2, r3, #4
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <HAL_EXTI_IRQHandler+0x74>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4798      	blx	r3
    }
  }
}
 8005edc:	bf00      	nop
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	58000088 	.word	0x58000088
 8005ee8:	580000c8 	.word	0x580000c8

08005eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	@ 0x24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005efa:	4b89      	ldr	r3, [pc, #548]	@ (8006120 <HAL_GPIO_Init+0x234>)
 8005efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005efe:	e194      	b.n	800622a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	2101      	movs	r1, #1
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8186 	beq.w	8006224 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d005      	beq.n	8005f30 <HAL_GPIO_Init+0x44>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d130      	bne.n	8005f92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f66:	2201      	movs	r2, #1
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4013      	ands	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 0201 	and.w	r2, r3, #1
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d017      	beq.n	8005fce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	2203      	movs	r2, #3
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d123      	bne.n	8006022 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	08da      	lsrs	r2, r3, #3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3208      	adds	r2, #8
 8005fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	220f      	movs	r2, #15
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4313      	orrs	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	08da      	lsrs	r2, r3, #3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3208      	adds	r2, #8
 800601c:	69b9      	ldr	r1, [r7, #24]
 800601e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	2203      	movs	r2, #3
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43db      	mvns	r3, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4013      	ands	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 0203 	and.w	r2, r3, #3
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4313      	orrs	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80e0 	beq.w	8006224 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006064:	4b2f      	ldr	r3, [pc, #188]	@ (8006124 <HAL_GPIO_Init+0x238>)
 8006066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800606a:	4a2e      	ldr	r2, [pc, #184]	@ (8006124 <HAL_GPIO_Init+0x238>)
 800606c:	f043 0302 	orr.w	r3, r3, #2
 8006070:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006074:	4b2b      	ldr	r3, [pc, #172]	@ (8006124 <HAL_GPIO_Init+0x238>)
 8006076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006082:	4a29      	ldr	r2, [pc, #164]	@ (8006128 <HAL_GPIO_Init+0x23c>)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	089b      	lsrs	r3, r3, #2
 8006088:	3302      	adds	r3, #2
 800608a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	220f      	movs	r2, #15
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4013      	ands	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a20      	ldr	r2, [pc, #128]	@ (800612c <HAL_GPIO_Init+0x240>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d052      	beq.n	8006154 <HAL_GPIO_Init+0x268>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006130 <HAL_GPIO_Init+0x244>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d031      	beq.n	800611a <HAL_GPIO_Init+0x22e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006134 <HAL_GPIO_Init+0x248>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d02b      	beq.n	8006116 <HAL_GPIO_Init+0x22a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006138 <HAL_GPIO_Init+0x24c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d025      	beq.n	8006112 <HAL_GPIO_Init+0x226>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a1c      	ldr	r2, [pc, #112]	@ (800613c <HAL_GPIO_Init+0x250>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01f      	beq.n	800610e <HAL_GPIO_Init+0x222>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006140 <HAL_GPIO_Init+0x254>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d019      	beq.n	800610a <HAL_GPIO_Init+0x21e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006144 <HAL_GPIO_Init+0x258>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <HAL_GPIO_Init+0x21a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a19      	ldr	r2, [pc, #100]	@ (8006148 <HAL_GPIO_Init+0x25c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00d      	beq.n	8006102 <HAL_GPIO_Init+0x216>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a18      	ldr	r2, [pc, #96]	@ (800614c <HAL_GPIO_Init+0x260>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <HAL_GPIO_Init+0x212>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a17      	ldr	r2, [pc, #92]	@ (8006150 <HAL_GPIO_Init+0x264>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <HAL_GPIO_Init+0x20e>
 80060f6:	2309      	movs	r3, #9
 80060f8:	e02d      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 80060fa:	230a      	movs	r3, #10
 80060fc:	e02b      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 80060fe:	2308      	movs	r3, #8
 8006100:	e029      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 8006102:	2307      	movs	r3, #7
 8006104:	e027      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 8006106:	2306      	movs	r3, #6
 8006108:	e025      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 800610a:	2305      	movs	r3, #5
 800610c:	e023      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 800610e:	2304      	movs	r3, #4
 8006110:	e021      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 8006112:	2303      	movs	r3, #3
 8006114:	e01f      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 8006116:	2302      	movs	r3, #2
 8006118:	e01d      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 800611a:	2301      	movs	r3, #1
 800611c:	e01b      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 800611e:	bf00      	nop
 8006120:	58000080 	.word	0x58000080
 8006124:	58024400 	.word	0x58024400
 8006128:	58000400 	.word	0x58000400
 800612c:	58020000 	.word	0x58020000
 8006130:	58020400 	.word	0x58020400
 8006134:	58020800 	.word	0x58020800
 8006138:	58020c00 	.word	0x58020c00
 800613c:	58021000 	.word	0x58021000
 8006140:	58021400 	.word	0x58021400
 8006144:	58021800 	.word	0x58021800
 8006148:	58021c00 	.word	0x58021c00
 800614c:	58022000 	.word	0x58022000
 8006150:	58022400 	.word	0x58022400
 8006154:	2300      	movs	r3, #0
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	f002 0203 	and.w	r2, r2, #3
 800615c:	0092      	lsls	r2, r2, #2
 800615e:	4093      	lsls	r3, r2
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006166:	4938      	ldr	r1, [pc, #224]	@ (8006248 <HAL_GPIO_Init+0x35c>)
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	3302      	adds	r3, #2
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	43db      	mvns	r3, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4013      	ands	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800619a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80061a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	43db      	mvns	r3, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4013      	ands	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80061c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	43db      	mvns	r3, r3
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	4013      	ands	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	3301      	adds	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	f47f ae63 	bne.w	8005f00 <HAL_GPIO_Init+0x14>
  }
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	3724      	adds	r7, #36	@ 0x24
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	58000400 	.word	0x58000400

0800624c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	807b      	strh	r3, [r7, #2]
 8006258:	4613      	mov	r3, r2
 800625a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800625c:	787b      	ldrb	r3, [r7, #1]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006262:	887a      	ldrh	r2, [r7, #2]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006268:	e003      	b.n	8006272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800626a:	887b      	ldrh	r3, [r7, #2]
 800626c:	041a      	lsls	r2, r3, #16
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	619a      	str	r2, [r3, #24]
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006288:	4a08      	ldr	r2, [pc, #32]	@ (80062ac <HAL_HSEM_FastTake+0x2c>)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3320      	adds	r3, #32
 800628e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006292:	4a07      	ldr	r2, [pc, #28]	@ (80062b0 <HAL_HSEM_FastTake+0x30>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d101      	bne.n	800629c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	58026400 	.word	0x58026400
 80062b0:	80000300 	.word	0x80000300

080062b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80062be:	4906      	ldr	r1, [pc, #24]	@ (80062d8 <HAL_HSEM_Release+0x24>)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	58026400 	.word	0x58026400

080062dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e08b      	b.n	8006406 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fb f854 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	@ 0x24
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800632c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800633c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d107      	bne.n	8006356 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006352:	609a      	str	r2, [r3, #8]
 8006354:	e006      	b.n	8006364 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006362:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d108      	bne.n	800637e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800637a:	605a      	str	r2, [r3, #4]
 800637c:	e007      	b.n	800638e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800638c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6859      	ldr	r1, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b1d      	ldr	r3, [pc, #116]	@ (8006410 <HAL_I2C_Init+0x134>)
 800639a:	430b      	orrs	r3, r1
 800639c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	69d9      	ldr	r1, [r3, #28]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1a      	ldr	r2, [r3, #32]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	02008000 	.word	0x02008000

08006414 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	461a      	mov	r2, r3
 8006422:	4603      	mov	r3, r0
 8006424:	817b      	strh	r3, [r7, #10]
 8006426:	460b      	mov	r3, r1
 8006428:	813b      	strh	r3, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b20      	cmp	r3, #32
 8006438:	f040 80f9 	bne.w	800662e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_I2C_Mem_Write+0x34>
 8006442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800644e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0ed      	b.n	8006630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_I2C_Mem_Write+0x4e>
 800645e:	2302      	movs	r3, #2
 8006460:	e0e6      	b.n	8006630 <HAL_I2C_Mem_Write+0x21c>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800646a:	f7fb fc7b 	bl	8001d64 <HAL_GetTick>
 800646e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2319      	movs	r3, #25
 8006476:	2201      	movs	r2, #1
 8006478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fac3 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0d1      	b.n	8006630 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2221      	movs	r2, #33	@ 0x21
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2240      	movs	r2, #64	@ 0x40
 8006498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80064ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064b4:	88f8      	ldrh	r0, [r7, #6]
 80064b6:	893a      	ldrh	r2, [r7, #8]
 80064b8:	8979      	ldrh	r1, [r7, #10]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	4603      	mov	r3, r0
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f9d3 	bl	8006870 <I2C_RequestMemoryWrite>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0a9      	b.n	8006630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2bff      	cmp	r3, #255	@ 0xff
 80064e4:	d90e      	bls.n	8006504 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	22ff      	movs	r2, #255	@ 0xff
 80064ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	8979      	ldrh	r1, [r7, #10]
 80064f4:	2300      	movs	r3, #0
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fc47 	bl	8006d90 <I2C_TransferConfig>
 8006502:	e00f      	b.n	8006524 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006512:	b2da      	uxtb	r2, r3
 8006514:	8979      	ldrh	r1, [r7, #10]
 8006516:	2300      	movs	r3, #0
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fc36 	bl	8006d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 fac6 	bl	8006aba <I2C_WaitOnTXISFlagUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e07b      	b.n	8006630 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d034      	beq.n	80065dc <HAL_I2C_Mem_Write+0x1c8>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	d130      	bne.n	80065dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	2200      	movs	r2, #0
 8006582:	2180      	movs	r1, #128	@ 0x80
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fa3f 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e04d      	b.n	8006630 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	2bff      	cmp	r3, #255	@ 0xff
 800659c:	d90e      	bls.n	80065bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	22ff      	movs	r2, #255	@ 0xff
 80065a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	8979      	ldrh	r1, [r7, #10]
 80065ac:	2300      	movs	r3, #0
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fbeb 	bl	8006d90 <I2C_TransferConfig>
 80065ba:	e00f      	b.n	80065dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	8979      	ldrh	r1, [r7, #10]
 80065ce:	2300      	movs	r3, #0
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 fbda 	bl	8006d90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d19e      	bne.n	8006524 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 faac 	bl	8006b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e01a      	b.n	8006630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2220      	movs	r2, #32
 8006600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6859      	ldr	r1, [r3, #4]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <HAL_I2C_Mem_Write+0x224>)
 800660e:	400b      	ands	r3, r1
 8006610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e000      	b.n	8006630 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800662e:	2302      	movs	r3, #2
  }
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	fe00e800 	.word	0xfe00e800

0800663c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	461a      	mov	r2, r3
 800664a:	4603      	mov	r3, r0
 800664c:	817b      	strh	r3, [r7, #10]
 800664e:	460b      	mov	r3, r1
 8006650:	813b      	strh	r3, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b20      	cmp	r3, #32
 8006660:	f040 80fd 	bne.w	800685e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <HAL_I2C_Mem_Read+0x34>
 800666a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006676:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e0f1      	b.n	8006860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006682:	2b01      	cmp	r3, #1
 8006684:	d101      	bne.n	800668a <HAL_I2C_Mem_Read+0x4e>
 8006686:	2302      	movs	r3, #2
 8006688:	e0ea      	b.n	8006860 <HAL_I2C_Mem_Read+0x224>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006692:	f7fb fb67 	bl	8001d64 <HAL_GetTick>
 8006696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	2319      	movs	r3, #25
 800669e:	2201      	movs	r2, #1
 80066a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f9af 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0d5      	b.n	8006860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2222      	movs	r2, #34	@ 0x22
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2240      	movs	r2, #64	@ 0x40
 80066c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a3a      	ldr	r2, [r7, #32]
 80066ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066dc:	88f8      	ldrh	r0, [r7, #6]
 80066de:	893a      	ldrh	r2, [r7, #8]
 80066e0:	8979      	ldrh	r1, [r7, #10]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4603      	mov	r3, r0
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f913 	bl	8006918 <I2C_RequestMemoryRead>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0ad      	b.n	8006860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2bff      	cmp	r3, #255	@ 0xff
 800670c:	d90e      	bls.n	800672c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	22ff      	movs	r2, #255	@ 0xff
 8006712:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006718:	b2da      	uxtb	r2, r3
 800671a:	8979      	ldrh	r1, [r7, #10]
 800671c:	4b52      	ldr	r3, [pc, #328]	@ (8006868 <HAL_I2C_Mem_Read+0x22c>)
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fb33 	bl	8006d90 <I2C_TransferConfig>
 800672a:	e00f      	b.n	800674c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800673a:	b2da      	uxtb	r2, r3
 800673c:	8979      	ldrh	r1, [r7, #10]
 800673e:	4b4a      	ldr	r3, [pc, #296]	@ (8006868 <HAL_I2C_Mem_Read+0x22c>)
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fb22 	bl	8006d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	2200      	movs	r2, #0
 8006754:	2104      	movs	r1, #4
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f956 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e07c      	b.n	8006860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d034      	beq.n	800680c <HAL_I2C_Mem_Read+0x1d0>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d130      	bne.n	800680c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b0:	2200      	movs	r2, #0
 80067b2:	2180      	movs	r1, #128	@ 0x80
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f927 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e04d      	b.n	8006860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2bff      	cmp	r3, #255	@ 0xff
 80067cc:	d90e      	bls.n	80067ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	22ff      	movs	r2, #255	@ 0xff
 80067d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	8979      	ldrh	r1, [r7, #10]
 80067dc:	2300      	movs	r3, #0
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fad3 	bl	8006d90 <I2C_TransferConfig>
 80067ea:	e00f      	b.n	800680c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	8979      	ldrh	r1, [r7, #10]
 80067fe:	2300      	movs	r3, #0
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fac2 	bl	8006d90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d19a      	bne.n	800674c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f994 	bl	8006b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e01a      	b.n	8006860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2220      	movs	r2, #32
 8006830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4b0b      	ldr	r3, [pc, #44]	@ (800686c <HAL_I2C_Mem_Read+0x230>)
 800683e:	400b      	ands	r3, r1
 8006840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	e000      	b.n	8006860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800685e:	2302      	movs	r3, #2
  }
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	80002400 	.word	0x80002400
 800686c:	fe00e800 	.word	0xfe00e800

08006870 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af02      	add	r7, sp, #8
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	4608      	mov	r0, r1
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	4603      	mov	r3, r0
 8006880:	817b      	strh	r3, [r7, #10]
 8006882:	460b      	mov	r3, r1
 8006884:	813b      	strh	r3, [r7, #8]
 8006886:	4613      	mov	r3, r2
 8006888:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	8979      	ldrh	r1, [r7, #10]
 8006890:	4b20      	ldr	r3, [pc, #128]	@ (8006914 <I2C_RequestMemoryWrite+0xa4>)
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fa79 	bl	8006d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	69b9      	ldr	r1, [r7, #24]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 f909 	bl	8006aba <I2C_WaitOnTXISFlagUntilTimeout>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e02c      	b.n	800690c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d105      	bne.n	80068c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068b8:	893b      	ldrh	r3, [r7, #8]
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80068c2:	e015      	b.n	80068f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068c4:	893b      	ldrh	r3, [r7, #8]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	69b9      	ldr	r1, [r7, #24]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f8ef 	bl	8006aba <I2C_WaitOnTXISFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e012      	b.n	800690c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068e6:	893b      	ldrh	r3, [r7, #8]
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2200      	movs	r2, #0
 80068f8:	2180      	movs	r1, #128	@ 0x80
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f884 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	80002000 	.word	0x80002000

08006918 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af02      	add	r7, sp, #8
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	4608      	mov	r0, r1
 8006922:	4611      	mov	r1, r2
 8006924:	461a      	mov	r2, r3
 8006926:	4603      	mov	r3, r0
 8006928:	817b      	strh	r3, [r7, #10]
 800692a:	460b      	mov	r3, r1
 800692c:	813b      	strh	r3, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	8979      	ldrh	r1, [r7, #10]
 8006938:	4b20      	ldr	r3, [pc, #128]	@ (80069bc <I2C_RequestMemoryRead+0xa4>)
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	2300      	movs	r3, #0
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fa26 	bl	8006d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	69b9      	ldr	r1, [r7, #24]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 f8b6 	bl	8006aba <I2C_WaitOnTXISFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e02c      	b.n	80069b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d105      	bne.n	800696a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	629a      	str	r2, [r3, #40]	@ 0x28
 8006968:	e015      	b.n	8006996 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800696a:	893b      	ldrh	r3, [r7, #8]
 800696c:	0a1b      	lsrs	r3, r3, #8
 800696e:	b29b      	uxth	r3, r3
 8006970:	b2da      	uxtb	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006978:	69fa      	ldr	r2, [r7, #28]
 800697a:	69b9      	ldr	r1, [r7, #24]
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 f89c 	bl	8006aba <I2C_WaitOnTXISFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e012      	b.n	80069b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800698c:	893b      	ldrh	r3, [r7, #8]
 800698e:	b2da      	uxtb	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2200      	movs	r2, #0
 800699e:	2140      	movs	r1, #64	@ 0x40
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f831 	bl	8006a08 <I2C_WaitOnFlagUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	80002000 	.word	0x80002000

080069c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d103      	bne.n	80069de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2200      	movs	r2, #0
 80069dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d007      	beq.n	80069fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	619a      	str	r2, [r3, #24]
  }
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a18:	e03b      	b.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f8d6 	bl	8006bd0 <I2C_IsErrorOccurred>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e041      	b.n	8006ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a34:	d02d      	beq.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a36:	f7fb f995 	bl	8001d64 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d302      	bcc.n	8006a4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d122      	bne.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	4013      	ands	r3, r2
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	bf0c      	ite	eq
 8006a5c:	2301      	moveq	r3, #1
 8006a5e:	2300      	movne	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	461a      	mov	r2, r3
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d113      	bne.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6e:	f043 0220 	orr.w	r2, r3, #32
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e00f      	b.n	8006ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	bf0c      	ite	eq
 8006aa2:	2301      	moveq	r3, #1
 8006aa4:	2300      	movne	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d0b4      	beq.n	8006a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ac6:	e033      	b.n	8006b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f87f 	bl	8006bd0 <I2C_IsErrorOccurred>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e031      	b.n	8006b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d025      	beq.n	8006b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae4:	f7fb f93e 	bl	8001d64 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d302      	bcc.n	8006afa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d11a      	bne.n	8006b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d013      	beq.n	8006b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0c:	f043 0220 	orr.w	r2, r3, #32
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e007      	b.n	8006b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d1c4      	bne.n	8006ac8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b54:	e02f      	b.n	8006bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 f838 	bl	8006bd0 <I2C_IsErrorOccurred>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e02d      	b.n	8006bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6a:	f7fb f8fb 	bl	8001d64 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d302      	bcc.n	8006b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d11a      	bne.n	8006bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d013      	beq.n	8006bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b92:	f043 0220 	orr.w	r2, r3, #32
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e007      	b.n	8006bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d1c8      	bne.n	8006b56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08a      	sub	sp, #40	@ 0x28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d068      	beq.n	8006cce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2210      	movs	r2, #16
 8006c02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c04:	e049      	b.n	8006c9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0c:	d045      	beq.n	8006c9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c0e:	f7fb f8a9 	bl	8001d64 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d302      	bcc.n	8006c24 <I2C_IsErrorOccurred+0x54>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d13a      	bne.n	8006c9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c46:	d121      	bne.n	8006c8c <I2C_IsErrorOccurred+0xbc>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c4e:	d01d      	beq.n	8006c8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006c50:	7cfb      	ldrb	r3, [r7, #19]
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d01a      	beq.n	8006c8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c66:	f7fb f87d 	bl	8001d64 <HAL_GetTick>
 8006c6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c6c:	e00e      	b.n	8006c8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c6e:	f7fb f879 	bl	8001d64 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b19      	cmp	r3, #25
 8006c7a:	d907      	bls.n	8006c8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	f043 0320 	orr.w	r3, r3, #32
 8006c82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006c8a:	e006      	b.n	8006c9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d1e9      	bne.n	8006c6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	d003      	beq.n	8006cb0 <I2C_IsErrorOccurred+0xe0>
 8006ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0aa      	beq.n	8006c06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d103      	bne.n	8006cc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	f043 0304 	orr.w	r3, r3, #4
 8006cc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00b      	beq.n	8006d1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f043 0308 	orr.w	r3, r3, #8
 8006d08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	f043 0302 	orr.w	r3, r3, #2
 8006d2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01c      	beq.n	8006d7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff fe3b 	bl	80069c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6859      	ldr	r1, [r3, #4]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4b0d      	ldr	r3, [pc, #52]	@ (8006d8c <I2C_IsErrorOccurred+0x1bc>)
 8006d56:	400b      	ands	r3, r1
 8006d58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	431a      	orrs	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3728      	adds	r7, #40	@ 0x28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	fe00e800 	.word	0xfe00e800

08006d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	817b      	strh	r3, [r7, #10]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006da2:	897b      	ldrh	r3, [r7, #10]
 8006da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006da8:	7a7b      	ldrb	r3, [r7, #9]
 8006daa:	041b      	lsls	r3, r3, #16
 8006dac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006db0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006dbe:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	0d5b      	lsrs	r3, r3, #21
 8006dca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006dce:	4b08      	ldr	r3, [pc, #32]	@ (8006df0 <I2C_TransferConfig+0x60>)
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	ea02 0103 	and.w	r1, r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	03ff63ff 	.word	0x03ff63ff

08006df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d138      	bne.n	8006e7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e032      	b.n	8006e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2224      	movs	r2, #36	@ 0x24
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0201 	bic.w	r2, r2, #1
 8006e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6819      	ldr	r1, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e000      	b.n	8006e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e7c:	2302      	movs	r3, #2
  }
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b085      	sub	sp, #20
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d139      	bne.n	8006f14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e033      	b.n	8006f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2224      	movs	r2, #36	@ 0x24
 8006eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0201 	bic.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006edc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	e000      	b.n	8006f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f14:	2302      	movs	r3, #2
  }
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006f2c:	4b29      	ldr	r3, [pc, #164]	@ (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	2b06      	cmp	r3, #6
 8006f36:	d00a      	beq.n	8006f4e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006f38:	4b26      	ldr	r3, [pc, #152]	@ (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d001      	beq.n	8006f4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e040      	b.n	8006fcc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e03e      	b.n	8006fcc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006f4e:	4b21      	ldr	r3, [pc, #132]	@ (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006f56:	491f      	ldr	r1, [pc, #124]	@ (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006f5e:	f7fa ff01 	bl	8001d64 <HAL_GetTick>
 8006f62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f64:	e009      	b.n	8006f7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f66:	f7fa fefd 	bl	8001d64 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f74:	d901      	bls.n	8006f7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e028      	b.n	8006fcc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006f7a:	4b16      	ldr	r3, [pc, #88]	@ (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f86:	d1ee      	bne.n	8006f66 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b1e      	cmp	r3, #30
 8006f8c:	d008      	beq.n	8006fa0 <HAL_PWREx_ConfigSupply+0x7c>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f92:	d005      	beq.n	8006fa0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b1d      	cmp	r3, #29
 8006f98:	d002      	beq.n	8006fa0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b2d      	cmp	r3, #45	@ 0x2d
 8006f9e:	d114      	bne.n	8006fca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006fa0:	f7fa fee0 	bl	8001d64 <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006fa6:	e009      	b.n	8006fbc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006fa8:	f7fa fedc 	bl	8001d64 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fb6:	d901      	bls.n	8006fbc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e007      	b.n	8006fcc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006fbc:	4b05      	ldr	r3, [pc, #20]	@ (8006fd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc8:	d1ee      	bne.n	8006fa8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	58024800 	.word	0x58024800

08006fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08c      	sub	sp, #48	@ 0x30
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f000 bc48 	b.w	800787c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 8088 	beq.w	800710a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ffa:	4b99      	ldr	r3, [pc, #612]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007004:	4b96      	ldr	r3, [pc, #600]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800700a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700c:	2b10      	cmp	r3, #16
 800700e:	d007      	beq.n	8007020 <HAL_RCC_OscConfig+0x48>
 8007010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007012:	2b18      	cmp	r3, #24
 8007014:	d111      	bne.n	800703a <HAL_RCC_OscConfig+0x62>
 8007016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d10c      	bne.n	800703a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007020:	4b8f      	ldr	r3, [pc, #572]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d06d      	beq.n	8007108 <HAL_RCC_OscConfig+0x130>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d169      	bne.n	8007108 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f000 bc21 	b.w	800787c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007042:	d106      	bne.n	8007052 <HAL_RCC_OscConfig+0x7a>
 8007044:	4b86      	ldr	r3, [pc, #536]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a85      	ldr	r2, [pc, #532]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800704a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	e02e      	b.n	80070b0 <HAL_RCC_OscConfig+0xd8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10c      	bne.n	8007074 <HAL_RCC_OscConfig+0x9c>
 800705a:	4b81      	ldr	r3, [pc, #516]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a80      	ldr	r2, [pc, #512]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	4b7e      	ldr	r3, [pc, #504]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a7d      	ldr	r2, [pc, #500]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800706c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e01d      	b.n	80070b0 <HAL_RCC_OscConfig+0xd8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800707c:	d10c      	bne.n	8007098 <HAL_RCC_OscConfig+0xc0>
 800707e:	4b78      	ldr	r3, [pc, #480]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a77      	ldr	r2, [pc, #476]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	4b75      	ldr	r3, [pc, #468]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a74      	ldr	r2, [pc, #464]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	e00b      	b.n	80070b0 <HAL_RCC_OscConfig+0xd8>
 8007098:	4b71      	ldr	r3, [pc, #452]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a70      	ldr	r2, [pc, #448]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800709e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	4b6e      	ldr	r3, [pc, #440]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a6d      	ldr	r2, [pc, #436]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80070aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d013      	beq.n	80070e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fa fe54 	bl	8001d64 <HAL_GetTick>
 80070bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c0:	f7fa fe50 	bl	8001d64 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b64      	cmp	r3, #100	@ 0x64
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e3d4      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070d2:	4b63      	ldr	r3, [pc, #396]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0f0      	beq.n	80070c0 <HAL_RCC_OscConfig+0xe8>
 80070de:	e014      	b.n	800710a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fa fe40 	bl	8001d64 <HAL_GetTick>
 80070e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070e8:	f7fa fe3c 	bl	8001d64 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b64      	cmp	r3, #100	@ 0x64
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e3c0      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80070fa:	4b59      	ldr	r3, [pc, #356]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <HAL_RCC_OscConfig+0x110>
 8007106:	e000      	b.n	800710a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80ca 	beq.w	80072ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007118:	4b51      	ldr	r3, [pc, #324]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007120:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007122:	4b4f      	ldr	r3, [pc, #316]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007126:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <HAL_RCC_OscConfig+0x166>
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	2b18      	cmp	r3, #24
 8007132:	d156      	bne.n	80071e2 <HAL_RCC_OscConfig+0x20a>
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d151      	bne.n	80071e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800713e:	4b48      	ldr	r3, [pc, #288]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_RCC_OscConfig+0x17e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e392      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007156:	4b42      	ldr	r3, [pc, #264]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f023 0219 	bic.w	r2, r3, #25
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	493f      	ldr	r1, [pc, #252]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007164:	4313      	orrs	r3, r2
 8007166:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fa fdfc 	bl	8001d64 <HAL_GetTick>
 800716c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007170:	f7fa fdf8 	bl	8001d64 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e37c      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007182:	4b37      	ldr	r3, [pc, #220]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718e:	f7fa fdf5 	bl	8001d7c <HAL_GetREVID>
 8007192:	4603      	mov	r3, r0
 8007194:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007198:	4293      	cmp	r3, r2
 800719a:	d817      	bhi.n	80071cc <HAL_RCC_OscConfig+0x1f4>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b40      	cmp	r3, #64	@ 0x40
 80071a2:	d108      	bne.n	80071b6 <HAL_RCC_OscConfig+0x1de>
 80071a4:	4b2e      	ldr	r3, [pc, #184]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80071ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80071ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071b4:	e07a      	b.n	80072ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	031b      	lsls	r3, r3, #12
 80071c4:	4926      	ldr	r1, [pc, #152]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071ca:	e06f      	b.n	80072ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071cc:	4b24      	ldr	r3, [pc, #144]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	061b      	lsls	r3, r3, #24
 80071da:	4921      	ldr	r1, [pc, #132]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071e0:	e064      	b.n	80072ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d047      	beq.n	800727a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f023 0219 	bic.w	r2, r3, #25
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	491a      	ldr	r1, [pc, #104]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fc:	f7fa fdb2 	bl	8001d64 <HAL_GetTick>
 8007200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007204:	f7fa fdae 	bl	8001d64 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e332      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007216:	4b12      	ldr	r3, [pc, #72]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007222:	f7fa fdab 	bl	8001d7c <HAL_GetREVID>
 8007226:	4603      	mov	r3, r0
 8007228:	f241 0203 	movw	r2, #4099	@ 0x1003
 800722c:	4293      	cmp	r3, r2
 800722e:	d819      	bhi.n	8007264 <HAL_RCC_OscConfig+0x28c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b40      	cmp	r3, #64	@ 0x40
 8007236:	d108      	bne.n	800724a <HAL_RCC_OscConfig+0x272>
 8007238:	4b09      	ldr	r3, [pc, #36]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007240:	4a07      	ldr	r2, [pc, #28]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 8007242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007246:	6053      	str	r3, [r2, #4]
 8007248:	e030      	b.n	80072ac <HAL_RCC_OscConfig+0x2d4>
 800724a:	4b05      	ldr	r3, [pc, #20]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	031b      	lsls	r3, r3, #12
 8007258:	4901      	ldr	r1, [pc, #4]	@ (8007260 <HAL_RCC_OscConfig+0x288>)
 800725a:	4313      	orrs	r3, r2
 800725c:	604b      	str	r3, [r1, #4]
 800725e:	e025      	b.n	80072ac <HAL_RCC_OscConfig+0x2d4>
 8007260:	58024400 	.word	0x58024400
 8007264:	4b9a      	ldr	r3, [pc, #616]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	061b      	lsls	r3, r3, #24
 8007272:	4997      	ldr	r1, [pc, #604]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007274:	4313      	orrs	r3, r2
 8007276:	604b      	str	r3, [r1, #4]
 8007278:	e018      	b.n	80072ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800727a:	4b95      	ldr	r3, [pc, #596]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a94      	ldr	r2, [pc, #592]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007286:	f7fa fd6d 	bl	8001d64 <HAL_GetTick>
 800728a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800728e:	f7fa fd69 	bl	8001d64 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e2ed      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072a0:	4b8b      	ldr	r3, [pc, #556]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1f0      	bne.n	800728e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 80a9 	beq.w	800740c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072ba:	4b85      	ldr	r3, [pc, #532]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072c4:	4b82      	ldr	r3, [pc, #520]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80072c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d007      	beq.n	80072e0 <HAL_RCC_OscConfig+0x308>
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b18      	cmp	r3, #24
 80072d4:	d13a      	bne.n	800734c <HAL_RCC_OscConfig+0x374>
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d135      	bne.n	800734c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072e0:	4b7b      	ldr	r3, [pc, #492]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <HAL_RCC_OscConfig+0x320>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	2b80      	cmp	r3, #128	@ 0x80
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e2c1      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072f8:	f7fa fd40 	bl	8001d7c <HAL_GetREVID>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007302:	4293      	cmp	r3, r2
 8007304:	d817      	bhi.n	8007336 <HAL_RCC_OscConfig+0x35e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	2b20      	cmp	r3, #32
 800730c:	d108      	bne.n	8007320 <HAL_RCC_OscConfig+0x348>
 800730e:	4b70      	ldr	r3, [pc, #448]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007316:	4a6e      	ldr	r2, [pc, #440]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800731c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800731e:	e075      	b.n	800740c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007320:	4b6b      	ldr	r3, [pc, #428]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	069b      	lsls	r3, r3, #26
 800732e:	4968      	ldr	r1, [pc, #416]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007330:	4313      	orrs	r3, r2
 8007332:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007334:	e06a      	b.n	800740c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007336:	4b66      	ldr	r3, [pc, #408]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	061b      	lsls	r3, r3, #24
 8007344:	4962      	ldr	r1, [pc, #392]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007346:	4313      	orrs	r3, r2
 8007348:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800734a:	e05f      	b.n	800740c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d042      	beq.n	80073da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007354:	4b5e      	ldr	r3, [pc, #376]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a5d      	ldr	r2, [pc, #372]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 800735a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fa fd00 	bl	8001d64 <HAL_GetTick>
 8007364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007368:	f7fa fcfc 	bl	8001d64 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e280      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800737a:	4b55      	ldr	r3, [pc, #340]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0f0      	beq.n	8007368 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007386:	f7fa fcf9 	bl	8001d7c <HAL_GetREVID>
 800738a:	4603      	mov	r3, r0
 800738c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007390:	4293      	cmp	r3, r2
 8007392:	d817      	bhi.n	80073c4 <HAL_RCC_OscConfig+0x3ec>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	2b20      	cmp	r3, #32
 800739a:	d108      	bne.n	80073ae <HAL_RCC_OscConfig+0x3d6>
 800739c:	4b4c      	ldr	r3, [pc, #304]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80073a4:	4a4a      	ldr	r2, [pc, #296]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80073a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073aa:	6053      	str	r3, [r2, #4]
 80073ac:	e02e      	b.n	800740c <HAL_RCC_OscConfig+0x434>
 80073ae:	4b48      	ldr	r3, [pc, #288]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	069b      	lsls	r3, r3, #26
 80073bc:	4944      	ldr	r1, [pc, #272]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	604b      	str	r3, [r1, #4]
 80073c2:	e023      	b.n	800740c <HAL_RCC_OscConfig+0x434>
 80073c4:	4b42      	ldr	r3, [pc, #264]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	061b      	lsls	r3, r3, #24
 80073d2:	493f      	ldr	r1, [pc, #252]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60cb      	str	r3, [r1, #12]
 80073d8:	e018      	b.n	800740c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80073da:	4b3d      	ldr	r3, [pc, #244]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a3c      	ldr	r2, [pc, #240]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80073e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e6:	f7fa fcbd 	bl	8001d64 <HAL_GetTick>
 80073ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073ec:	e008      	b.n	8007400 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073ee:	f7fa fcb9 	bl	8001d64 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e23d      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007400:	4b33      	ldr	r3, [pc, #204]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f0      	bne.n	80073ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0308 	and.w	r3, r3, #8
 8007414:	2b00      	cmp	r3, #0
 8007416:	d036      	beq.n	8007486 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d019      	beq.n	8007454 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007420:	4b2b      	ldr	r3, [pc, #172]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007424:	4a2a      	ldr	r2, [pc, #168]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007426:	f043 0301 	orr.w	r3, r3, #1
 800742a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742c:	f7fa fc9a 	bl	8001d64 <HAL_GetTick>
 8007430:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007434:	f7fa fc96 	bl	8001d64 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e21a      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007446:	4b22      	ldr	r3, [pc, #136]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0f0      	beq.n	8007434 <HAL_RCC_OscConfig+0x45c>
 8007452:	e018      	b.n	8007486 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007454:	4b1e      	ldr	r3, [pc, #120]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 8007456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007458:	4a1d      	ldr	r2, [pc, #116]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007460:	f7fa fc80 	bl	8001d64 <HAL_GetTick>
 8007464:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007468:	f7fa fc7c 	bl	8001d64 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e200      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800747a:	4b15      	ldr	r3, [pc, #84]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 800747c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f0      	bne.n	8007468 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d039      	beq.n	8007506 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01c      	beq.n	80074d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800749a:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a0c      	ldr	r2, [pc, #48]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80074a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80074a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074a6:	f7fa fc5d 	bl	8001d64 <HAL_GetTick>
 80074aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074ac:	e008      	b.n	80074c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074ae:	f7fa fc59 	bl	8001d64 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d901      	bls.n	80074c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e1dd      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074c0:	4b03      	ldr	r3, [pc, #12]	@ (80074d0 <HAL_RCC_OscConfig+0x4f8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0f0      	beq.n	80074ae <HAL_RCC_OscConfig+0x4d6>
 80074cc:	e01b      	b.n	8007506 <HAL_RCC_OscConfig+0x52e>
 80074ce:	bf00      	nop
 80074d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074d4:	4b9b      	ldr	r3, [pc, #620]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a9a      	ldr	r2, [pc, #616]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80074da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074e0:	f7fa fc40 	bl	8001d64 <HAL_GetTick>
 80074e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074e8:	f7fa fc3c 	bl	8001d64 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e1c0      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074fa:	4b92      	ldr	r3, [pc, #584]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f0      	bne.n	80074e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8081 	beq.w	8007616 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007514:	4b8c      	ldr	r3, [pc, #560]	@ (8007748 <HAL_RCC_OscConfig+0x770>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a8b      	ldr	r2, [pc, #556]	@ (8007748 <HAL_RCC_OscConfig+0x770>)
 800751a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800751e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007520:	f7fa fc20 	bl	8001d64 <HAL_GetTick>
 8007524:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007528:	f7fa fc1c 	bl	8001d64 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b64      	cmp	r3, #100	@ 0x64
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e1a0      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800753a:	4b83      	ldr	r3, [pc, #524]	@ (8007748 <HAL_RCC_OscConfig+0x770>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d106      	bne.n	800755c <HAL_RCC_OscConfig+0x584>
 800754e:	4b7d      	ldr	r3, [pc, #500]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007552:	4a7c      	ldr	r2, [pc, #496]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007554:	f043 0301 	orr.w	r3, r3, #1
 8007558:	6713      	str	r3, [r2, #112]	@ 0x70
 800755a:	e02d      	b.n	80075b8 <HAL_RCC_OscConfig+0x5e0>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10c      	bne.n	800757e <HAL_RCC_OscConfig+0x5a6>
 8007564:	4b77      	ldr	r3, [pc, #476]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007568:	4a76      	ldr	r2, [pc, #472]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 800756a:	f023 0301 	bic.w	r3, r3, #1
 800756e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007570:	4b74      	ldr	r3, [pc, #464]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007574:	4a73      	ldr	r2, [pc, #460]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007576:	f023 0304 	bic.w	r3, r3, #4
 800757a:	6713      	str	r3, [r2, #112]	@ 0x70
 800757c:	e01c      	b.n	80075b8 <HAL_RCC_OscConfig+0x5e0>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b05      	cmp	r3, #5
 8007584:	d10c      	bne.n	80075a0 <HAL_RCC_OscConfig+0x5c8>
 8007586:	4b6f      	ldr	r3, [pc, #444]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758a:	4a6e      	ldr	r2, [pc, #440]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 800758c:	f043 0304 	orr.w	r3, r3, #4
 8007590:	6713      	str	r3, [r2, #112]	@ 0x70
 8007592:	4b6c      	ldr	r3, [pc, #432]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4a6b      	ldr	r2, [pc, #428]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	6713      	str	r3, [r2, #112]	@ 0x70
 800759e:	e00b      	b.n	80075b8 <HAL_RCC_OscConfig+0x5e0>
 80075a0:	4b68      	ldr	r3, [pc, #416]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a4:	4a67      	ldr	r2, [pc, #412]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80075ac:	4b65      	ldr	r3, [pc, #404]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b0:	4a64      	ldr	r2, [pc, #400]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80075b2:	f023 0304 	bic.w	r3, r3, #4
 80075b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d015      	beq.n	80075ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c0:	f7fa fbd0 	bl	8001d64 <HAL_GetTick>
 80075c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075c6:	e00a      	b.n	80075de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c8:	f7fa fbcc 	bl	8001d64 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e14e      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075de:	4b59      	ldr	r3, [pc, #356]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0ee      	beq.n	80075c8 <HAL_RCC_OscConfig+0x5f0>
 80075ea:	e014      	b.n	8007616 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ec:	f7fa fbba 	bl	8001d64 <HAL_GetTick>
 80075f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075f2:	e00a      	b.n	800760a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f4:	f7fa fbb6 	bl	8001d64 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e138      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800760a:	4b4e      	ldr	r3, [pc, #312]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ee      	bne.n	80075f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 812d 	beq.w	800787a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007620:	4b48      	ldr	r3, [pc, #288]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007628:	2b18      	cmp	r3, #24
 800762a:	f000 80bd 	beq.w	80077a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007632:	2b02      	cmp	r3, #2
 8007634:	f040 809e 	bne.w	8007774 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007638:	4b42      	ldr	r3, [pc, #264]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a41      	ldr	r2, [pc, #260]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 800763e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007644:	f7fa fb8e 	bl	8001d64 <HAL_GetTick>
 8007648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800764a:	e008      	b.n	800765e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800764c:	f7fa fb8a 	bl	8001d64 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b02      	cmp	r3, #2
 8007658:	d901      	bls.n	800765e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e10e      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800765e:	4b39      	ldr	r3, [pc, #228]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1f0      	bne.n	800764c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800766a:	4b36      	ldr	r3, [pc, #216]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 800766c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800766e:	4b37      	ldr	r3, [pc, #220]	@ (800774c <HAL_RCC_OscConfig+0x774>)
 8007670:	4013      	ands	r3, r2
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800767a:	0112      	lsls	r2, r2, #4
 800767c:	430a      	orrs	r2, r1
 800767e:	4931      	ldr	r1, [pc, #196]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007680:	4313      	orrs	r3, r2
 8007682:	628b      	str	r3, [r1, #40]	@ 0x28
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007688:	3b01      	subs	r3, #1
 800768a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007692:	3b01      	subs	r3, #1
 8007694:	025b      	lsls	r3, r3, #9
 8007696:	b29b      	uxth	r3, r3
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769e:	3b01      	subs	r3, #1
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ac:	3b01      	subs	r3, #1
 80076ae:	061b      	lsls	r3, r3, #24
 80076b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076b4:	4923      	ldr	r1, [pc, #140]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80076ba:	4b22      	ldr	r3, [pc, #136]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	4a21      	ldr	r2, [pc, #132]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80076c0:	f023 0301 	bic.w	r3, r3, #1
 80076c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80076c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ca:	4b21      	ldr	r3, [pc, #132]	@ (8007750 <HAL_RCC_OscConfig+0x778>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80076d2:	00d2      	lsls	r2, r2, #3
 80076d4:	491b      	ldr	r1, [pc, #108]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076da:	4b1a      	ldr	r3, [pc, #104]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076de:	f023 020c 	bic.w	r2, r3, #12
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	4917      	ldr	r1, [pc, #92]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076ec:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80076ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f0:	f023 0202 	bic.w	r2, r3, #2
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f8:	4912      	ldr	r1, [pc, #72]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076fe:	4b11      	ldr	r3, [pc, #68]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	4a10      	ldr	r2, [pc, #64]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800770a:	4b0e      	ldr	r3, [pc, #56]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	4a0d      	ldr	r2, [pc, #52]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007714:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007716:	4b0b      	ldr	r3, [pc, #44]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	4a0a      	ldr	r2, [pc, #40]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 800771c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007720:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007722:	4b08      	ldr	r3, [pc, #32]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007726:	4a07      	ldr	r2, [pc, #28]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800772e:	4b05      	ldr	r3, [pc, #20]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a04      	ldr	r2, [pc, #16]	@ (8007744 <HAL_RCC_OscConfig+0x76c>)
 8007734:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773a:	f7fa fb13 	bl	8001d64 <HAL_GetTick>
 800773e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007740:	e011      	b.n	8007766 <HAL_RCC_OscConfig+0x78e>
 8007742:	bf00      	nop
 8007744:	58024400 	.word	0x58024400
 8007748:	58024800 	.word	0x58024800
 800774c:	fffffc0c 	.word	0xfffffc0c
 8007750:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007754:	f7fa fb06 	bl	8001d64 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b02      	cmp	r3, #2
 8007760:	d901      	bls.n	8007766 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e08a      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007766:	4b47      	ldr	r3, [pc, #284]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d0f0      	beq.n	8007754 <HAL_RCC_OscConfig+0x77c>
 8007772:	e082      	b.n	800787a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007774:	4b43      	ldr	r3, [pc, #268]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a42      	ldr	r2, [pc, #264]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 800777a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800777e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007780:	f7fa faf0 	bl	8001d64 <HAL_GetTick>
 8007784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007786:	e008      	b.n	800779a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007788:	f7fa faec 	bl	8001d64 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e070      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800779a:	4b3a      	ldr	r3, [pc, #232]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1f0      	bne.n	8007788 <HAL_RCC_OscConfig+0x7b0>
 80077a6:	e068      	b.n	800787a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80077a8:	4b36      	ldr	r3, [pc, #216]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 80077aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077ae:	4b35      	ldr	r3, [pc, #212]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d031      	beq.n	8007820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f003 0203 	and.w	r2, r3, #3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d12a      	bne.n	8007820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	091b      	lsrs	r3, r3, #4
 80077ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d122      	bne.n	8007820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d11a      	bne.n	8007820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	0a5b      	lsrs	r3, r3, #9
 80077ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d111      	bne.n	8007820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	0c1b      	lsrs	r3, r3, #16
 8007800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007808:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800780a:	429a      	cmp	r2, r3
 800780c:	d108      	bne.n	8007820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	0e1b      	lsrs	r3, r3, #24
 8007812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800781c:	429a      	cmp	r2, r3
 800781e:	d001      	beq.n	8007824 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e02b      	b.n	800787c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007824:	4b17      	ldr	r3, [pc, #92]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 8007826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007828:	08db      	lsrs	r3, r3, #3
 800782a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800782e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	429a      	cmp	r2, r3
 8007838:	d01f      	beq.n	800787a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800783a:	4b12      	ldr	r3, [pc, #72]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 800783c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783e:	4a11      	ldr	r2, [pc, #68]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007846:	f7fa fa8d 	bl	8001d64 <HAL_GetTick>
 800784a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800784c:	bf00      	nop
 800784e:	f7fa fa89 	bl	8001d64 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	4293      	cmp	r3, r2
 8007858:	d0f9      	beq.n	800784e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800785a:	4b0a      	ldr	r3, [pc, #40]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 800785c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800785e:	4b0a      	ldr	r3, [pc, #40]	@ (8007888 <HAL_RCC_OscConfig+0x8b0>)
 8007860:	4013      	ands	r3, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007866:	00d2      	lsls	r2, r2, #3
 8007868:	4906      	ldr	r1, [pc, #24]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 800786a:	4313      	orrs	r3, r2
 800786c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800786e:	4b05      	ldr	r3, [pc, #20]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 8007870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007872:	4a04      	ldr	r2, [pc, #16]	@ (8007884 <HAL_RCC_OscConfig+0x8ac>)
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3730      	adds	r7, #48	@ 0x30
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	58024400 	.word	0x58024400
 8007888:	ffff0007 	.word	0xffff0007

0800788c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e19c      	b.n	8007bda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078a0:	4b8a      	ldr	r3, [pc, #552]	@ (8007acc <HAL_RCC_ClockConfig+0x240>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d910      	bls.n	80078d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ae:	4b87      	ldr	r3, [pc, #540]	@ (8007acc <HAL_RCC_ClockConfig+0x240>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f023 020f 	bic.w	r2, r3, #15
 80078b6:	4985      	ldr	r1, [pc, #532]	@ (8007acc <HAL_RCC_ClockConfig+0x240>)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078be:	4b83      	ldr	r3, [pc, #524]	@ (8007acc <HAL_RCC_ClockConfig+0x240>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d001      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e184      	b.n	8007bda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d010      	beq.n	80078fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	4b7b      	ldr	r3, [pc, #492]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d908      	bls.n	80078fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078ec:	4b78      	ldr	r3, [pc, #480]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	4975      	ldr	r1, [pc, #468]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695a      	ldr	r2, [r3, #20]
 800790e:	4b70      	ldr	r3, [pc, #448]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007916:	429a      	cmp	r2, r3
 8007918:	d908      	bls.n	800792c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800791a:	4b6d      	ldr	r3, [pc, #436]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	496a      	ldr	r1, [pc, #424]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007928:	4313      	orrs	r3, r2
 800792a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d010      	beq.n	800795a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	4b64      	ldr	r3, [pc, #400]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007944:	429a      	cmp	r2, r3
 8007946:	d908      	bls.n	800795a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007948:	4b61      	ldr	r3, [pc, #388]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	495e      	ldr	r1, [pc, #376]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007956:	4313      	orrs	r3, r2
 8007958:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d010      	beq.n	8007988 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69da      	ldr	r2, [r3, #28]
 800796a:	4b59      	ldr	r3, [pc, #356]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007972:	429a      	cmp	r2, r3
 8007974:	d908      	bls.n	8007988 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007976:	4b56      	ldr	r3, [pc, #344]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	4953      	ldr	r1, [pc, #332]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007984:	4313      	orrs	r3, r2
 8007986:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d010      	beq.n	80079b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	4b4d      	ldr	r3, [pc, #308]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d908      	bls.n	80079b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079a4:	4b4a      	ldr	r3, [pc, #296]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	f023 020f 	bic.w	r2, r3, #15
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	4947      	ldr	r1, [pc, #284]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d055      	beq.n	8007a6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80079c2:	4b43      	ldr	r3, [pc, #268]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	4940      	ldr	r1, [pc, #256]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d107      	bne.n	80079ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079dc:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d121      	bne.n	8007a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0f6      	b.n	8007bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d107      	bne.n	8007a04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079f4:	4b36      	ldr	r3, [pc, #216]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d115      	bne.n	8007a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e0ea      	b.n	8007bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d107      	bne.n	8007a1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a0c:	4b30      	ldr	r3, [pc, #192]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d109      	bne.n	8007a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e0de      	b.n	8007bda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e0d6      	b.n	8007bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a2c:	4b28      	ldr	r3, [pc, #160]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f023 0207 	bic.w	r2, r3, #7
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	4925      	ldr	r1, [pc, #148]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a3e:	f7fa f991 	bl	8001d64 <HAL_GetTick>
 8007a42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a44:	e00a      	b.n	8007a5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a46:	f7fa f98d 	bl	8001d64 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d901      	bls.n	8007a5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e0be      	b.n	8007bda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d1eb      	bne.n	8007a46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d010      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	4b14      	ldr	r3, [pc, #80]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d208      	bcs.n	8007a9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a8a:	4b11      	ldr	r3, [pc, #68]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f023 020f 	bic.w	r2, r3, #15
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	490e      	ldr	r1, [pc, #56]	@ (8007ad0 <HAL_RCC_ClockConfig+0x244>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007acc <HAL_RCC_ClockConfig+0x240>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d214      	bcs.n	8007ad4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aaa:	4b08      	ldr	r3, [pc, #32]	@ (8007acc <HAL_RCC_ClockConfig+0x240>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f023 020f 	bic.w	r2, r3, #15
 8007ab2:	4906      	ldr	r1, [pc, #24]	@ (8007acc <HAL_RCC_ClockConfig+0x240>)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aba:	4b04      	ldr	r3, [pc, #16]	@ (8007acc <HAL_RCC_ClockConfig+0x240>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d005      	beq.n	8007ad4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e086      	b.n	8007bda <HAL_RCC_ClockConfig+0x34e>
 8007acc:	52002000 	.word	0x52002000
 8007ad0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d010      	beq.n	8007b02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d208      	bcs.n	8007b02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007af0:	4b3c      	ldr	r3, [pc, #240]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	4939      	ldr	r1, [pc, #228]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d010      	beq.n	8007b30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695a      	ldr	r2, [r3, #20]
 8007b12:	4b34      	ldr	r3, [pc, #208]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d208      	bcs.n	8007b30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b1e:	4b31      	ldr	r3, [pc, #196]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	492e      	ldr	r1, [pc, #184]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d010      	beq.n	8007b5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699a      	ldr	r2, [r3, #24]
 8007b40:	4b28      	ldr	r3, [pc, #160]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b42:	69db      	ldr	r3, [r3, #28]
 8007b44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d208      	bcs.n	8007b5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b4c:	4b25      	ldr	r3, [pc, #148]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	4922      	ldr	r1, [pc, #136]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d010      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69da      	ldr	r2, [r3, #28]
 8007b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d208      	bcs.n	8007b8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	4917      	ldr	r1, [pc, #92]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b8c:	f000 f834 	bl	8007bf8 <HAL_RCC_GetSysClockFreq>
 8007b90:	4602      	mov	r2, r0
 8007b92:	4b14      	ldr	r3, [pc, #80]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	4912      	ldr	r1, [pc, #72]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007b9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007baa:	4b0e      	ldr	r3, [pc, #56]	@ (8007be4 <HAL_RCC_ClockConfig+0x358>)
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8007be8 <HAL_RCC_ClockConfig+0x35c>)
 8007bb4:	5cd3      	ldrb	r3, [r2, r3]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8007bec <HAL_RCC_ClockConfig+0x360>)
 8007bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf0 <HAL_RCC_ClockConfig+0x364>)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007bca:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf4 <HAL_RCC_ClockConfig+0x368>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7f9 fd16 	bl	8001600 <HAL_InitTick>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	58024400 	.word	0x58024400
 8007be8:	0800fcdc 	.word	0x0800fcdc
 8007bec:	24000004 	.word	0x24000004
 8007bf0:	24000000 	.word	0x24000000
 8007bf4:	24000020 	.word	0x24000020

08007bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b089      	sub	sp, #36	@ 0x24
 8007bfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bfe:	4bb3      	ldr	r3, [pc, #716]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c06:	2b18      	cmp	r3, #24
 8007c08:	f200 8155 	bhi.w	8007eb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8007c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c79 	.word	0x08007c79
 8007c18:	08007eb7 	.word	0x08007eb7
 8007c1c:	08007eb7 	.word	0x08007eb7
 8007c20:	08007eb7 	.word	0x08007eb7
 8007c24:	08007eb7 	.word	0x08007eb7
 8007c28:	08007eb7 	.word	0x08007eb7
 8007c2c:	08007eb7 	.word	0x08007eb7
 8007c30:	08007eb7 	.word	0x08007eb7
 8007c34:	08007c9f 	.word	0x08007c9f
 8007c38:	08007eb7 	.word	0x08007eb7
 8007c3c:	08007eb7 	.word	0x08007eb7
 8007c40:	08007eb7 	.word	0x08007eb7
 8007c44:	08007eb7 	.word	0x08007eb7
 8007c48:	08007eb7 	.word	0x08007eb7
 8007c4c:	08007eb7 	.word	0x08007eb7
 8007c50:	08007eb7 	.word	0x08007eb7
 8007c54:	08007ca5 	.word	0x08007ca5
 8007c58:	08007eb7 	.word	0x08007eb7
 8007c5c:	08007eb7 	.word	0x08007eb7
 8007c60:	08007eb7 	.word	0x08007eb7
 8007c64:	08007eb7 	.word	0x08007eb7
 8007c68:	08007eb7 	.word	0x08007eb7
 8007c6c:	08007eb7 	.word	0x08007eb7
 8007c70:	08007eb7 	.word	0x08007eb7
 8007c74:	08007cab 	.word	0x08007cab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c78:	4b94      	ldr	r3, [pc, #592]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d009      	beq.n	8007c98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c84:	4b91      	ldr	r3, [pc, #580]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	08db      	lsrs	r3, r3, #3
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	4a90      	ldr	r2, [pc, #576]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c90:	fa22 f303 	lsr.w	r3, r2, r3
 8007c94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c96:	e111      	b.n	8007ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c98:	4b8d      	ldr	r3, [pc, #564]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c9a:	61bb      	str	r3, [r7, #24]
      break;
 8007c9c:	e10e      	b.n	8007ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8007ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ca0:	61bb      	str	r3, [r7, #24]
      break;
 8007ca2:	e10b      	b.n	8007ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8007ed8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007ca6:	61bb      	str	r3, [r7, #24]
      break;
 8007ca8:	e108      	b.n	8007ebc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007caa:	4b88      	ldr	r3, [pc, #544]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007cb4:	4b85      	ldr	r3, [pc, #532]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	091b      	lsrs	r3, r3, #4
 8007cba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007cc0:	4b82      	ldr	r3, [pc, #520]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007cca:	4b80      	ldr	r3, [pc, #512]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cce:	08db      	lsrs	r3, r3, #3
 8007cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	fb02 f303 	mul.w	r3, r2, r3
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 80e1 	beq.w	8007eb0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	f000 8083 	beq.w	8007dfc <HAL_RCC_GetSysClockFreq+0x204>
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	f200 80a1 	bhi.w	8007e40 <HAL_RCC_GetSysClockFreq+0x248>
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_RCC_GetSysClockFreq+0x114>
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d056      	beq.n	8007db8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007d0a:	e099      	b.n	8007e40 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d02d      	beq.n	8007d74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d18:	4b6c      	ldr	r3, [pc, #432]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	08db      	lsrs	r3, r3, #3
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	4a6b      	ldr	r2, [pc, #428]	@ (8007ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
 8007d28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d42:	4b62      	ldr	r3, [pc, #392]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d72:	e087      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007ee0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d86:	4b51      	ldr	r3, [pc, #324]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007db6:	e065      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dca:	4b40      	ldr	r3, [pc, #256]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dfa:	e043      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007ee8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e16:	ee07 3a90 	vmov	s15, r3
 8007e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e3e:	e021      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e52:	4b1e      	ldr	r3, [pc, #120]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e5a:	ee07 3a90 	vmov	s15, r3
 8007e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e84:	4b11      	ldr	r3, [pc, #68]	@ (8007ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e88:	0a5b      	lsrs	r3, r3, #9
 8007e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e8e:	3301      	adds	r3, #1
 8007e90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea8:	ee17 3a90 	vmov	r3, s15
 8007eac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007eae:	e005      	b.n	8007ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61bb      	str	r3, [r7, #24]
      break;
 8007eb4:	e002      	b.n	8007ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007eb6:	4b07      	ldr	r3, [pc, #28]	@ (8007ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007eb8:	61bb      	str	r3, [r7, #24]
      break;
 8007eba:	bf00      	nop
  }

  return sysclockfreq;
 8007ebc:	69bb      	ldr	r3, [r7, #24]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3724      	adds	r7, #36	@ 0x24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	03d09000 	.word	0x03d09000
 8007ed4:	003d0900 	.word	0x003d0900
 8007ed8:	017d7840 	.word	0x017d7840
 8007edc:	46000000 	.word	0x46000000
 8007ee0:	4c742400 	.word	0x4c742400
 8007ee4:	4a742400 	.word	0x4a742400
 8007ee8:	4bbebc20 	.word	0x4bbebc20

08007eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ef2:	f7ff fe81 	bl	8007bf8 <HAL_RCC_GetSysClockFreq>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	4b10      	ldr	r3, [pc, #64]	@ (8007f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	0a1b      	lsrs	r3, r3, #8
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	490f      	ldr	r1, [pc, #60]	@ (8007f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f04:	5ccb      	ldrb	r3, [r1, r3]
 8007f06:	f003 031f 	and.w	r3, r3, #31
 8007f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f10:	4b0a      	ldr	r3, [pc, #40]	@ (8007f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	4a09      	ldr	r2, [pc, #36]	@ (8007f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8007f1a:	5cd3      	ldrb	r3, [r2, r3]
 8007f1c:	f003 031f 	and.w	r3, r3, #31
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	fa22 f303 	lsr.w	r3, r2, r3
 8007f26:	4a07      	ldr	r2, [pc, #28]	@ (8007f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f2a:	4a07      	ldr	r2, [pc, #28]	@ (8007f48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f30:	4b04      	ldr	r3, [pc, #16]	@ (8007f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f32:	681b      	ldr	r3, [r3, #0]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	58024400 	.word	0x58024400
 8007f40:	0800fcdc 	.word	0x0800fcdc
 8007f44:	24000004 	.word	0x24000004
 8007f48:	24000000 	.word	0x24000000

08007f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f50:	f7ff ffcc 	bl	8007eec <HAL_RCC_GetHCLKFreq>
 8007f54:	4602      	mov	r2, r0
 8007f56:	4b06      	ldr	r3, [pc, #24]	@ (8007f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	091b      	lsrs	r3, r3, #4
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	4904      	ldr	r1, [pc, #16]	@ (8007f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f62:	5ccb      	ldrb	r3, [r1, r3]
 8007f64:	f003 031f 	and.w	r3, r3, #31
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	58024400 	.word	0x58024400
 8007f74:	0800fcdc 	.word	0x0800fcdc

08007f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f7c:	f7ff ffb6 	bl	8007eec <HAL_RCC_GetHCLKFreq>
 8007f80:	4602      	mov	r2, r0
 8007f82:	4b06      	ldr	r3, [pc, #24]	@ (8007f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	0a1b      	lsrs	r3, r3, #8
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	4904      	ldr	r1, [pc, #16]	@ (8007fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f8e:	5ccb      	ldrb	r3, [r1, r3]
 8007f90:	f003 031f 	and.w	r3, r3, #31
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	58024400 	.word	0x58024400
 8007fa0:	0800fcdc 	.word	0x0800fcdc

08007fa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	223f      	movs	r2, #63	@ 0x3f
 8007fb2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008020 <HAL_RCC_GetClockConfig+0x7c>)
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	f003 0207 	and.w	r2, r3, #7
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007fc0:	4b17      	ldr	r3, [pc, #92]	@ (8008020 <HAL_RCC_GetClockConfig+0x7c>)
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007fcc:	4b14      	ldr	r3, [pc, #80]	@ (8008020 <HAL_RCC_GetClockConfig+0x7c>)
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	f003 020f 	and.w	r2, r3, #15
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007fd8:	4b11      	ldr	r3, [pc, #68]	@ (8008020 <HAL_RCC_GetClockConfig+0x7c>)
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8008020 <HAL_RCC_GetClockConfig+0x7c>)
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8008020 <HAL_RCC_GetClockConfig+0x7c>)
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007ffc:	4b08      	ldr	r3, [pc, #32]	@ (8008020 <HAL_RCC_GetClockConfig+0x7c>)
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008008:	4b06      	ldr	r3, [pc, #24]	@ (8008024 <HAL_RCC_GetClockConfig+0x80>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 020f 	and.w	r2, r3, #15
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	601a      	str	r2, [r3, #0]
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	58024400 	.word	0x58024400
 8008024:	52002000 	.word	0x52002000

08008028 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800802c:	b0ca      	sub	sp, #296	@ 0x128
 800802e:	af00      	add	r7, sp, #0
 8008030:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008034:	2300      	movs	r3, #0
 8008036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800803a:	2300      	movs	r3, #0
 800803c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800804c:	2500      	movs	r5, #0
 800804e:	ea54 0305 	orrs.w	r3, r4, r5
 8008052:	d049      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800805a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800805e:	d02f      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008060:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008064:	d828      	bhi.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008066:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800806a:	d01a      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800806c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008070:	d822      	bhi.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800807a:	d007      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800807c:	e01c      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800807e:	4bb8      	ldr	r3, [pc, #736]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008082:	4ab7      	ldr	r2, [pc, #732]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800808a:	e01a      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008090:	3308      	adds	r3, #8
 8008092:	2102      	movs	r1, #2
 8008094:	4618      	mov	r0, r3
 8008096:	f002 fb61 	bl	800a75c <RCCEx_PLL2_Config>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80080a0:	e00f      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a6:	3328      	adds	r3, #40	@ 0x28
 80080a8:	2102      	movs	r1, #2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f002 fc08 	bl	800a8c0 <RCCEx_PLL3_Config>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80080b6:	e004      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080be:	e000      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80080c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80080ca:	4ba5      	ldr	r3, [pc, #660]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80080d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080d8:	4aa1      	ldr	r2, [pc, #644]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080da:	430b      	orrs	r3, r1
 80080dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80080de:	e003      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80080e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80080f4:	f04f 0900 	mov.w	r9, #0
 80080f8:	ea58 0309 	orrs.w	r3, r8, r9
 80080fc:	d047      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80080fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008104:	2b04      	cmp	r3, #4
 8008106:	d82a      	bhi.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008108:	a201      	add	r2, pc, #4	@ (adr r2, 8008110 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810e:	bf00      	nop
 8008110:	08008125 	.word	0x08008125
 8008114:	08008133 	.word	0x08008133
 8008118:	08008149 	.word	0x08008149
 800811c:	08008167 	.word	0x08008167
 8008120:	08008167 	.word	0x08008167
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008124:	4b8e      	ldr	r3, [pc, #568]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008128:	4a8d      	ldr	r2, [pc, #564]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800812a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800812e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008130:	e01a      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008136:	3308      	adds	r3, #8
 8008138:	2100      	movs	r1, #0
 800813a:	4618      	mov	r0, r3
 800813c:	f002 fb0e 	bl	800a75c <RCCEx_PLL2_Config>
 8008140:	4603      	mov	r3, r0
 8008142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008146:	e00f      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814c:	3328      	adds	r3, #40	@ 0x28
 800814e:	2100      	movs	r1, #0
 8008150:	4618      	mov	r0, r3
 8008152:	f002 fbb5 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008156:	4603      	mov	r3, r0
 8008158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800815c:	e004      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008164:	e000      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10a      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008170:	4b7b      	ldr	r3, [pc, #492]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008174:	f023 0107 	bic.w	r1, r3, #7
 8008178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800817e:	4a78      	ldr	r2, [pc, #480]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008180:	430b      	orrs	r3, r1
 8008182:	6513      	str	r3, [r2, #80]	@ 0x50
 8008184:	e003      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800818a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800819a:	f04f 0b00 	mov.w	fp, #0
 800819e:	ea5a 030b 	orrs.w	r3, sl, fp
 80081a2:	d04c      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80081a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081ae:	d030      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80081b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081b4:	d829      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80081b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80081b8:	d02d      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80081ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80081bc:	d825      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80081be:	2b80      	cmp	r3, #128	@ 0x80
 80081c0:	d018      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80081c2:	2b80      	cmp	r3, #128	@ 0x80
 80081c4:	d821      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80081ca:	2b40      	cmp	r3, #64	@ 0x40
 80081cc:	d007      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80081ce:	e01c      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d0:	4b63      	ldr	r3, [pc, #396]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d4:	4a62      	ldr	r2, [pc, #392]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80081dc:	e01c      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e2:	3308      	adds	r3, #8
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f002 fab8 	bl	800a75c <RCCEx_PLL2_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80081f2:	e011      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f8:	3328      	adds	r3, #40	@ 0x28
 80081fa:	2100      	movs	r1, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f002 fb5f 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008208:	e006      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008210:	e002      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008212:	bf00      	nop
 8008214:	e000      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008220:	4b4f      	ldr	r3, [pc, #316]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008224:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800822e:	4a4c      	ldr	r2, [pc, #304]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008230:	430b      	orrs	r3, r1
 8008232:	6513      	str	r3, [r2, #80]	@ 0x50
 8008234:	e003      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800823a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800824a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800824e:	2300      	movs	r3, #0
 8008250:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008254:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008258:	460b      	mov	r3, r1
 800825a:	4313      	orrs	r3, r2
 800825c:	d053      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008262:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008266:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800826a:	d035      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800826c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008270:	d82e      	bhi.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008272:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008276:	d031      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008278:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800827c:	d828      	bhi.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800827e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008282:	d01a      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008288:	d822      	bhi.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800828e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008292:	d007      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008294:	e01c      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008296:	4b32      	ldr	r3, [pc, #200]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829a:	4a31      	ldr	r2, [pc, #196]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800829c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082a2:	e01c      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a8:	3308      	adds	r3, #8
 80082aa:	2100      	movs	r1, #0
 80082ac:	4618      	mov	r0, r3
 80082ae:	f002 fa55 	bl	800a75c <RCCEx_PLL2_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80082b8:	e011      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082be:	3328      	adds	r3, #40	@ 0x28
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f002 fafc 	bl	800a8c0 <RCCEx_PLL3_Config>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082ce:	e006      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082d6:	e002      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80082d8:	bf00      	nop
 80082da:	e000      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80082dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10b      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80082e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80082f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082f8:	430b      	orrs	r3, r1
 80082fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80082fc:	e003      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008312:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008316:	2300      	movs	r3, #0
 8008318:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800831c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008320:	460b      	mov	r3, r1
 8008322:	4313      	orrs	r3, r2
 8008324:	d056      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800832e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008332:	d038      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008338:	d831      	bhi.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800833a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800833e:	d034      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008340:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008344:	d82b      	bhi.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008346:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800834a:	d01d      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800834c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008350:	d825      	bhi.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008352:	2b00      	cmp	r3, #0
 8008354:	d006      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008356:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800835a:	d00a      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800835c:	e01f      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800835e:	bf00      	nop
 8008360:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008364:	4ba2      	ldr	r3, [pc, #648]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008368:	4aa1      	ldr	r2, [pc, #644]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800836a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800836e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008370:	e01c      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008376:	3308      	adds	r3, #8
 8008378:	2100      	movs	r1, #0
 800837a:	4618      	mov	r0, r3
 800837c:	f002 f9ee 	bl	800a75c <RCCEx_PLL2_Config>
 8008380:	4603      	mov	r3, r0
 8008382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008386:	e011      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838c:	3328      	adds	r3, #40	@ 0x28
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f002 fa95 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008396:	4603      	mov	r3, r0
 8008398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800839c:	e006      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083a4:	e002      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80083a6:	bf00      	nop
 80083a8:	e000      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80083aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10b      	bne.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80083b4:	4b8e      	ldr	r3, [pc, #568]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80083bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80083c4:	4a8a      	ldr	r2, [pc, #552]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083c6:	430b      	orrs	r3, r1
 80083c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80083ca:	e003      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80083d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80083e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80083e4:	2300      	movs	r3, #0
 80083e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80083ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80083ee:	460b      	mov	r3, r1
 80083f0:	4313      	orrs	r3, r2
 80083f2:	d03a      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80083f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083fa:	2b30      	cmp	r3, #48	@ 0x30
 80083fc:	d01f      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80083fe:	2b30      	cmp	r3, #48	@ 0x30
 8008400:	d819      	bhi.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008402:	2b20      	cmp	r3, #32
 8008404:	d00c      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008406:	2b20      	cmp	r3, #32
 8008408:	d815      	bhi.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d019      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800840e:	2b10      	cmp	r3, #16
 8008410:	d111      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008412:	4b77      	ldr	r3, [pc, #476]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008416:	4a76      	ldr	r2, [pc, #472]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800841c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800841e:	e011      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008424:	3308      	adds	r3, #8
 8008426:	2102      	movs	r1, #2
 8008428:	4618      	mov	r0, r3
 800842a:	f002 f997 	bl	800a75c <RCCEx_PLL2_Config>
 800842e:	4603      	mov	r3, r0
 8008430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008434:	e006      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800843c:	e002      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800843e:	bf00      	nop
 8008440:	e000      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800844c:	4b68      	ldr	r3, [pc, #416]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800844e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008450:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800845a:	4a65      	ldr	r2, [pc, #404]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800845c:	430b      	orrs	r3, r1
 800845e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008460:	e003      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800846a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008476:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800847a:	2300      	movs	r3, #0
 800847c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008480:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008484:	460b      	mov	r3, r1
 8008486:	4313      	orrs	r3, r2
 8008488:	d051      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008494:	d035      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800849a:	d82e      	bhi.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800849c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084a0:	d031      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80084a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084a6:	d828      	bhi.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80084a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ac:	d01a      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80084ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084b2:	d822      	bhi.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d003      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80084b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084bc:	d007      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80084be:	e01c      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c0:	4b4b      	ldr	r3, [pc, #300]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c4:	4a4a      	ldr	r2, [pc, #296]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80084cc:	e01c      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d2:	3308      	adds	r3, #8
 80084d4:	2100      	movs	r1, #0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f002 f940 	bl	800a75c <RCCEx_PLL2_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80084e2:	e011      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e8:	3328      	adds	r3, #40	@ 0x28
 80084ea:	2100      	movs	r1, #0
 80084ec:	4618      	mov	r0, r3
 80084ee:	f002 f9e7 	bl	800a8c0 <RCCEx_PLL3_Config>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80084f8:	e006      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008500:	e002      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008502:	bf00      	nop
 8008504:	e000      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008510:	4b37      	ldr	r3, [pc, #220]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008514:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800851e:	4a34      	ldr	r2, [pc, #208]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008520:	430b      	orrs	r3, r1
 8008522:	6513      	str	r3, [r2, #80]	@ 0x50
 8008524:	e003      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800852a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800852e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800853a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800853e:	2300      	movs	r3, #0
 8008540:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008544:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008548:	460b      	mov	r3, r1
 800854a:	4313      	orrs	r3, r2
 800854c:	d056      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800854e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008558:	d033      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800855a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800855e:	d82c      	bhi.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008564:	d02f      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800856a:	d826      	bhi.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800856c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008570:	d02b      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008572:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008576:	d820      	bhi.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800857c:	d012      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800857e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008582:	d81a      	bhi.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d022      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800858c:	d115      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800858e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008592:	3308      	adds	r3, #8
 8008594:	2101      	movs	r1, #1
 8008596:	4618      	mov	r0, r3
 8008598:	f002 f8e0 	bl	800a75c <RCCEx_PLL2_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80085a2:	e015      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a8:	3328      	adds	r3, #40	@ 0x28
 80085aa:	2101      	movs	r1, #1
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 f987 	bl	800a8c0 <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80085b8:	e00a      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085c0:	e006      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80085c2:	bf00      	nop
 80085c4:	e004      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80085c6:	bf00      	nop
 80085c8:	e002      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80085ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10d      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80085d8:	4b05      	ldr	r3, [pc, #20]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80085e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085e6:	4a02      	ldr	r2, [pc, #8]	@ (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085e8:	430b      	orrs	r3, r1
 80085ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80085ec:	e006      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80085ee:	bf00      	nop
 80085f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800860c:	2300      	movs	r3, #0
 800860e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008612:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	d055      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800861c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008628:	d033      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800862a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800862e:	d82c      	bhi.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008634:	d02f      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800863a:	d826      	bhi.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800863c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008640:	d02b      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008642:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008646:	d820      	bhi.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800864c:	d012      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800864e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008652:	d81a      	bhi.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d022      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800865c:	d115      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008662:	3308      	adds	r3, #8
 8008664:	2101      	movs	r1, #1
 8008666:	4618      	mov	r0, r3
 8008668:	f002 f878 	bl	800a75c <RCCEx_PLL2_Config>
 800866c:	4603      	mov	r3, r0
 800866e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008672:	e015      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	3328      	adds	r3, #40	@ 0x28
 800867a:	2101      	movs	r1, #1
 800867c:	4618      	mov	r0, r3
 800867e:	f002 f91f 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008682:	4603      	mov	r3, r0
 8008684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008688:	e00a      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008690:	e006      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008692:	bf00      	nop
 8008694:	e004      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008696:	bf00      	nop
 8008698:	e002      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800869a:	bf00      	nop
 800869c:	e000      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800869e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10b      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80086a8:	4ba3      	ldr	r3, [pc, #652]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80086b8:	4a9f      	ldr	r2, [pc, #636]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086ba:	430b      	orrs	r3, r1
 80086bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80086be:	e003      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80086d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80086de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80086e2:	460b      	mov	r3, r1
 80086e4:	4313      	orrs	r3, r2
 80086e6:	d037      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80086e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086f2:	d00e      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80086f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086f8:	d816      	bhi.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d018      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80086fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008702:	d111      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008704:	4b8c      	ldr	r3, [pc, #560]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008708:	4a8b      	ldr	r2, [pc, #556]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800870a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800870e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008710:	e00f      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008716:	3308      	adds	r3, #8
 8008718:	2101      	movs	r1, #1
 800871a:	4618      	mov	r0, r3
 800871c:	f002 f81e 	bl	800a75c <RCCEx_PLL2_Config>
 8008720:	4603      	mov	r3, r0
 8008722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008726:	e004      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800872e:	e000      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10a      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800873a:	4b7f      	ldr	r3, [pc, #508]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800873c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800873e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008748:	4a7b      	ldr	r2, [pc, #492]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800874a:	430b      	orrs	r3, r1
 800874c:	6513      	str	r3, [r2, #80]	@ 0x50
 800874e:	e003      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008760:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008768:	2300      	movs	r3, #0
 800876a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800876e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008772:	460b      	mov	r3, r1
 8008774:	4313      	orrs	r3, r2
 8008776:	d039      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800877e:	2b03      	cmp	r3, #3
 8008780:	d81c      	bhi.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008782:	a201      	add	r2, pc, #4	@ (adr r2, 8008788 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	080087c5 	.word	0x080087c5
 800878c:	08008799 	.word	0x08008799
 8008790:	080087a7 	.word	0x080087a7
 8008794:	080087c5 	.word	0x080087c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008798:	4b67      	ldr	r3, [pc, #412]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800879a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879c:	4a66      	ldr	r2, [pc, #408]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800879e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80087a4:	e00f      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087aa:	3308      	adds	r3, #8
 80087ac:	2102      	movs	r1, #2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 ffd4 	bl	800a75c <RCCEx_PLL2_Config>
 80087b4:	4603      	mov	r3, r0
 80087b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80087ba:	e004      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087c2:	e000      	b.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80087c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10a      	bne.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80087ce:	4b5a      	ldr	r3, [pc, #360]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087d2:	f023 0103 	bic.w	r1, r3, #3
 80087d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087dc:	4a56      	ldr	r2, [pc, #344]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087de:	430b      	orrs	r3, r1
 80087e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087e2:	e003      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80087f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087fc:	2300      	movs	r3, #0
 80087fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008802:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008806:	460b      	mov	r3, r1
 8008808:	4313      	orrs	r3, r2
 800880a:	f000 809f 	beq.w	800894c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800880e:	4b4b      	ldr	r3, [pc, #300]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a4a      	ldr	r2, [pc, #296]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800881a:	f7f9 faa3 	bl	8001d64 <HAL_GetTick>
 800881e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008822:	e00b      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008824:	f7f9 fa9e 	bl	8001d64 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b64      	cmp	r3, #100	@ 0x64
 8008832:	d903      	bls.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800883a:	e005      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800883c:	4b3f      	ldr	r3, [pc, #252]	@ (800893c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0ed      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800884c:	2b00      	cmp	r3, #0
 800884e:	d179      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008850:	4b39      	ldr	r3, [pc, #228]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008852:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800885c:	4053      	eors	r3, r2
 800885e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008862:	2b00      	cmp	r3, #0
 8008864:	d015      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008866:	4b34      	ldr	r3, [pc, #208]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800886a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800886e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008872:	4b31      	ldr	r3, [pc, #196]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008876:	4a30      	ldr	r2, [pc, #192]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800887c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800887e:	4b2e      	ldr	r3, [pc, #184]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008882:	4a2d      	ldr	r2, [pc, #180]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008888:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800888a:	4a2b      	ldr	r2, [pc, #172]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800888c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008890:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008896:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800889a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800889e:	d118      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a0:	f7f9 fa60 	bl	8001d64 <HAL_GetTick>
 80088a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088a8:	e00d      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088aa:	f7f9 fa5b 	bl	8001d64 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80088b4:	1ad2      	subs	r2, r2, r3
 80088b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d903      	bls.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80088c4:	e005      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088c6:	4b1c      	ldr	r3, [pc, #112]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0eb      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80088d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d129      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80088e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088ea:	d10e      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80088ec:	4b12      	ldr	r3, [pc, #72]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80088f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80088fc:	091a      	lsrs	r2, r3, #4
 80088fe:	4b10      	ldr	r3, [pc, #64]	@ (8008940 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008900:	4013      	ands	r3, r2
 8008902:	4a0d      	ldr	r2, [pc, #52]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008904:	430b      	orrs	r3, r1
 8008906:	6113      	str	r3, [r2, #16]
 8008908:	e005      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800890a:	4b0b      	ldr	r3, [pc, #44]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	4a0a      	ldr	r2, [pc, #40]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008910:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008914:	6113      	str	r3, [r2, #16]
 8008916:	4b08      	ldr	r3, [pc, #32]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008918:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800891a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008926:	4a04      	ldr	r2, [pc, #16]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008928:	430b      	orrs	r3, r1
 800892a:	6713      	str	r3, [r2, #112]	@ 0x70
 800892c:	e00e      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800892e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008936:	e009      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008938:	58024400 	.word	0x58024400
 800893c:	58024800 	.word	0x58024800
 8008940:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800894c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f002 0301 	and.w	r3, r2, #1
 8008958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800895c:	2300      	movs	r3, #0
 800895e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008962:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008966:	460b      	mov	r3, r1
 8008968:	4313      	orrs	r3, r2
 800896a:	f000 8089 	beq.w	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008974:	2b28      	cmp	r3, #40	@ 0x28
 8008976:	d86b      	bhi.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008978:	a201      	add	r2, pc, #4	@ (adr r2, 8008980 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897e:	bf00      	nop
 8008980:	08008a59 	.word	0x08008a59
 8008984:	08008a51 	.word	0x08008a51
 8008988:	08008a51 	.word	0x08008a51
 800898c:	08008a51 	.word	0x08008a51
 8008990:	08008a51 	.word	0x08008a51
 8008994:	08008a51 	.word	0x08008a51
 8008998:	08008a51 	.word	0x08008a51
 800899c:	08008a51 	.word	0x08008a51
 80089a0:	08008a25 	.word	0x08008a25
 80089a4:	08008a51 	.word	0x08008a51
 80089a8:	08008a51 	.word	0x08008a51
 80089ac:	08008a51 	.word	0x08008a51
 80089b0:	08008a51 	.word	0x08008a51
 80089b4:	08008a51 	.word	0x08008a51
 80089b8:	08008a51 	.word	0x08008a51
 80089bc:	08008a51 	.word	0x08008a51
 80089c0:	08008a3b 	.word	0x08008a3b
 80089c4:	08008a51 	.word	0x08008a51
 80089c8:	08008a51 	.word	0x08008a51
 80089cc:	08008a51 	.word	0x08008a51
 80089d0:	08008a51 	.word	0x08008a51
 80089d4:	08008a51 	.word	0x08008a51
 80089d8:	08008a51 	.word	0x08008a51
 80089dc:	08008a51 	.word	0x08008a51
 80089e0:	08008a59 	.word	0x08008a59
 80089e4:	08008a51 	.word	0x08008a51
 80089e8:	08008a51 	.word	0x08008a51
 80089ec:	08008a51 	.word	0x08008a51
 80089f0:	08008a51 	.word	0x08008a51
 80089f4:	08008a51 	.word	0x08008a51
 80089f8:	08008a51 	.word	0x08008a51
 80089fc:	08008a51 	.word	0x08008a51
 8008a00:	08008a59 	.word	0x08008a59
 8008a04:	08008a51 	.word	0x08008a51
 8008a08:	08008a51 	.word	0x08008a51
 8008a0c:	08008a51 	.word	0x08008a51
 8008a10:	08008a51 	.word	0x08008a51
 8008a14:	08008a51 	.word	0x08008a51
 8008a18:	08008a51 	.word	0x08008a51
 8008a1c:	08008a51 	.word	0x08008a51
 8008a20:	08008a59 	.word	0x08008a59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a28:	3308      	adds	r3, #8
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f001 fe95 	bl	800a75c <RCCEx_PLL2_Config>
 8008a32:	4603      	mov	r3, r0
 8008a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008a38:	e00f      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3e:	3328      	adds	r3, #40	@ 0x28
 8008a40:	2101      	movs	r1, #1
 8008a42:	4618      	mov	r0, r3
 8008a44:	f001 ff3c 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008a4e:	e004      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a56:	e000      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008a62:	4bbf      	ldr	r3, [pc, #764]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a70:	4abb      	ldr	r2, [pc, #748]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a72:	430b      	orrs	r3, r1
 8008a74:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a76:	e003      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f002 0302 	and.w	r3, r2, #2
 8008a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a90:	2300      	movs	r3, #0
 8008a92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008a96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	d041      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	d824      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008afd 	.word	0x08008afd
 8008ab4:	08008ac9 	.word	0x08008ac9
 8008ab8:	08008adf 	.word	0x08008adf
 8008abc:	08008afd 	.word	0x08008afd
 8008ac0:	08008afd 	.word	0x08008afd
 8008ac4:	08008afd 	.word	0x08008afd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008acc:	3308      	adds	r3, #8
 8008ace:	2101      	movs	r1, #1
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 fe43 	bl	800a75c <RCCEx_PLL2_Config>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008adc:	e00f      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae2:	3328      	adds	r3, #40	@ 0x28
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 feea 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008af2:	e004      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008afa:	e000      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10a      	bne.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008b06:	4b96      	ldr	r3, [pc, #600]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b0a:	f023 0107 	bic.w	r1, r3, #7
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b14:	4a92      	ldr	r2, [pc, #584]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b16:	430b      	orrs	r3, r1
 8008b18:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b1a:	e003      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f002 0304 	and.w	r3, r2, #4
 8008b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b34:	2300      	movs	r3, #0
 8008b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4313      	orrs	r3, r2
 8008b42:	d044      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b4c:	2b05      	cmp	r3, #5
 8008b4e:	d825      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008b50:	a201      	add	r2, pc, #4	@ (adr r2, 8008b58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b56:	bf00      	nop
 8008b58:	08008ba5 	.word	0x08008ba5
 8008b5c:	08008b71 	.word	0x08008b71
 8008b60:	08008b87 	.word	0x08008b87
 8008b64:	08008ba5 	.word	0x08008ba5
 8008b68:	08008ba5 	.word	0x08008ba5
 8008b6c:	08008ba5 	.word	0x08008ba5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b74:	3308      	adds	r3, #8
 8008b76:	2101      	movs	r1, #1
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 fdef 	bl	800a75c <RCCEx_PLL2_Config>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008b84:	e00f      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8a:	3328      	adds	r3, #40	@ 0x28
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 fe96 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008b9a:	e004      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ba2:	e000      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10b      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008bae:	4b6c      	ldr	r3, [pc, #432]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb2:	f023 0107 	bic.w	r1, r3, #7
 8008bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bbe:	4a68      	ldr	r2, [pc, #416]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bc4:	e003      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f002 0320 	and.w	r3, r2, #32
 8008bda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008bde:	2300      	movs	r3, #0
 8008be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008be8:	460b      	mov	r3, r1
 8008bea:	4313      	orrs	r3, r2
 8008bec:	d055      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bfa:	d033      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c00:	d82c      	bhi.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c06:	d02f      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c0c:	d826      	bhi.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c12:	d02b      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008c14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c18:	d820      	bhi.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c1e:	d012      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c24:	d81a      	bhi.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d022      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c2e:	d115      	bne.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c34:	3308      	adds	r3, #8
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 fd8f 	bl	800a75c <RCCEx_PLL2_Config>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008c44:	e015      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4a:	3328      	adds	r3, #40	@ 0x28
 8008c4c:	2102      	movs	r1, #2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f001 fe36 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008c5a:	e00a      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c62:	e006      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c64:	bf00      	nop
 8008c66:	e004      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c68:	bf00      	nop
 8008c6a:	e002      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c6c:	bf00      	nop
 8008c6e:	e000      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10b      	bne.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c7a:	4b39      	ldr	r3, [pc, #228]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8a:	4a35      	ldr	r2, [pc, #212]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c8c:	430b      	orrs	r3, r1
 8008c8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c90:	e003      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008caa:	2300      	movs	r3, #0
 8008cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008cb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	d058      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008cc6:	d033      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008cc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008ccc:	d82c      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cd2:	d02f      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cd8:	d826      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008cda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cde:	d02b      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008ce0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ce4:	d820      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cea:	d012      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cf0:	d81a      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d022      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cfa:	d115      	bne.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d00:	3308      	adds	r3, #8
 8008d02:	2100      	movs	r1, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 fd29 	bl	800a75c <RCCEx_PLL2_Config>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008d10:	e015      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d16:	3328      	adds	r3, #40	@ 0x28
 8008d18:	2102      	movs	r1, #2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 fdd0 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008d26:	e00a      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d2e:	e006      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d30:	bf00      	nop
 8008d32:	e004      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d34:	bf00      	nop
 8008d36:	e002      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d38:	bf00      	nop
 8008d3a:	e000      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10e      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d46:	4b06      	ldr	r3, [pc, #24]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008d56:	4a02      	ldr	r2, [pc, #8]	@ (8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d5c:	e006      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008d5e:	bf00      	nop
 8008d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008d86:	460b      	mov	r3, r1
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	d055      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008d98:	d033      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008d9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008d9e:	d82c      	bhi.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008da4:	d02f      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008daa:	d826      	bhi.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008dac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008db0:	d02b      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008db2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008db6:	d820      	bhi.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dbc:	d012      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008dc2:	d81a      	bhi.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d022      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dcc:	d115      	bne.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd2:	3308      	adds	r3, #8
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 fcc0 	bl	800a75c <RCCEx_PLL2_Config>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008de2:	e015      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de8:	3328      	adds	r3, #40	@ 0x28
 8008dea:	2102      	movs	r1, #2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f001 fd67 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008df8:	e00a      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e00:	e006      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e02:	bf00      	nop
 8008e04:	e004      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e06:	bf00      	nop
 8008e08:	e002      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e0a:	bf00      	nop
 8008e0c:	e000      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10b      	bne.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e18:	4ba1      	ldr	r3, [pc, #644]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e28:	4a9d      	ldr	r2, [pc, #628]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e2a:	430b      	orrs	r3, r1
 8008e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e2e:	e003      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f002 0308 	and.w	r3, r2, #8
 8008e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008e52:	460b      	mov	r3, r1
 8008e54:	4313      	orrs	r3, r2
 8008e56:	d01e      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e64:	d10c      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6a:	3328      	adds	r3, #40	@ 0x28
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fd26 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008e80:	4b87      	ldr	r3, [pc, #540]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e90:	4a83      	ldr	r2, [pc, #524]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e92:	430b      	orrs	r3, r1
 8008e94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f002 0310 	and.w	r3, r2, #16
 8008ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008eac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	d01e      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ec2:	d10c      	bne.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec8:	3328      	adds	r3, #40	@ 0x28
 8008eca:	2102      	movs	r1, #2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 fcf7 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ede:	4b70      	ldr	r3, [pc, #448]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ee2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008eee:	4a6c      	ldr	r2, [pc, #432]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ef0:	430b      	orrs	r3, r1
 8008ef2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f04:	2300      	movs	r3, #0
 8008f06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008f0e:	460b      	mov	r3, r1
 8008f10:	4313      	orrs	r3, r2
 8008f12:	d03e      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f20:	d022      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f26:	d81b      	bhi.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f30:	d00b      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008f32:	e015      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f38:	3308      	adds	r3, #8
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 fc0d 	bl	800a75c <RCCEx_PLL2_Config>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008f48:	e00f      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f4e:	3328      	adds	r3, #40	@ 0x28
 8008f50:	2102      	movs	r1, #2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 fcb4 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008f5e:	e004      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f66:	e000      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10b      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f72:	4b4b      	ldr	r3, [pc, #300]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f82:	4a47      	ldr	r2, [pc, #284]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f84:	430b      	orrs	r3, r1
 8008f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f88:	e003      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008f9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fa4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4313      	orrs	r3, r2
 8008fac:	d03b      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fba:	d01f      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008fbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fc0:	d818      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fc6:	d003      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fcc:	d007      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008fce:	e011      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fd0:	4b33      	ldr	r3, [pc, #204]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd4:	4a32      	ldr	r2, [pc, #200]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008fdc:	e00f      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe2:	3328      	adds	r3, #40	@ 0x28
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f001 fc6a 	bl	800a8c0 <RCCEx_PLL3_Config>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ff2:	e004      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ffa:	e000      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009006:	4b26      	ldr	r3, [pc, #152]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800900e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009016:	4a22      	ldr	r2, [pc, #136]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009018:	430b      	orrs	r3, r1
 800901a:	6553      	str	r3, [r2, #84]	@ 0x54
 800901c:	e003      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009032:	673b      	str	r3, [r7, #112]	@ 0x70
 8009034:	2300      	movs	r3, #0
 8009036:	677b      	str	r3, [r7, #116]	@ 0x74
 8009038:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800903c:	460b      	mov	r3, r1
 800903e:	4313      	orrs	r3, r2
 8009040:	d034      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800904c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009050:	d007      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009052:	e011      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009054:	4b12      	ldr	r3, [pc, #72]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009058:	4a11      	ldr	r2, [pc, #68]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800905a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800905e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009060:	e00e      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009066:	3308      	adds	r3, #8
 8009068:	2102      	movs	r1, #2
 800906a:	4618      	mov	r0, r3
 800906c:	f001 fb76 	bl	800a75c <RCCEx_PLL2_Config>
 8009070:	4603      	mov	r3, r0
 8009072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009076:	e003      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800907e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10d      	bne.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009088:	4b05      	ldr	r3, [pc, #20]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800908a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800908c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009096:	4a02      	ldr	r2, [pc, #8]	@ (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009098:	430b      	orrs	r3, r1
 800909a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800909c:	e006      	b.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800909e:	bf00      	nop
 80090a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80090ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80090b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090ba:	2300      	movs	r3, #0
 80090bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80090c2:	460b      	mov	r3, r1
 80090c4:	4313      	orrs	r3, r2
 80090c6:	d00c      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80090c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090cc:	3328      	adds	r3, #40	@ 0x28
 80090ce:	2102      	movs	r1, #2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 fbf5 	bl	800a8c0 <RCCEx_PLL3_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80090e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80090ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80090f0:	2300      	movs	r3, #0
 80090f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80090f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80090f8:	460b      	mov	r3, r1
 80090fa:	4313      	orrs	r3, r2
 80090fc:	d038      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80090fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800910a:	d018      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800910c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009110:	d811      	bhi.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009116:	d014      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800911c:	d80b      	bhi.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800911e:	2b00      	cmp	r3, #0
 8009120:	d011      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009126:	d106      	bne.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009128:	4bc3      	ldr	r3, [pc, #780]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	4ac2      	ldr	r2, [pc, #776]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800912e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009134:	e008      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800913c:	e004      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800913e:	bf00      	nop
 8009140:	e002      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10b      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009150:	4bb9      	ldr	r3, [pc, #740]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009154:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800915c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009160:	4ab5      	ldr	r2, [pc, #724]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009162:	430b      	orrs	r3, r1
 8009164:	6553      	str	r3, [r2, #84]	@ 0x54
 8009166:	e003      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800916c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800917c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800917e:	2300      	movs	r3, #0
 8009180:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009182:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009186:	460b      	mov	r3, r1
 8009188:	4313      	orrs	r3, r2
 800918a:	d009      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800918c:	4baa      	ldr	r3, [pc, #680]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800918e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009190:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800919a:	4aa7      	ldr	r2, [pc, #668]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800919c:	430b      	orrs	r3, r1
 800919e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80091a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80091ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80091ae:	2300      	movs	r3, #0
 80091b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80091b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80091b6:	460b      	mov	r3, r1
 80091b8:	4313      	orrs	r3, r2
 80091ba:	d00a      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80091bc:	4b9e      	ldr	r3, [pc, #632]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80091c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80091cc:	4a9a      	ldr	r2, [pc, #616]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091ce:	430b      	orrs	r3, r1
 80091d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80091d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80091de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091e0:	2300      	movs	r3, #0
 80091e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80091e8:	460b      	mov	r3, r1
 80091ea:	4313      	orrs	r3, r2
 80091ec:	d009      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80091ee:	4b92      	ldr	r3, [pc, #584]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80091f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091fc:	4a8e      	ldr	r2, [pc, #568]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091fe:	430b      	orrs	r3, r1
 8009200:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800920e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009210:	2300      	movs	r3, #0
 8009212:	647b      	str	r3, [r7, #68]	@ 0x44
 8009214:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009218:	460b      	mov	r3, r1
 800921a:	4313      	orrs	r3, r2
 800921c:	d00e      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800921e:	4b86      	ldr	r3, [pc, #536]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	4a85      	ldr	r2, [pc, #532]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009224:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009228:	6113      	str	r3, [r2, #16]
 800922a:	4b83      	ldr	r3, [pc, #524]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800922c:	6919      	ldr	r1, [r3, #16]
 800922e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009232:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009236:	4a80      	ldr	r2, [pc, #512]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009238:	430b      	orrs	r3, r1
 800923a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800923c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009248:	63bb      	str	r3, [r7, #56]	@ 0x38
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800924e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009252:	460b      	mov	r3, r1
 8009254:	4313      	orrs	r3, r2
 8009256:	d009      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009258:	4b77      	ldr	r3, [pc, #476]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800925a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800925c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009266:	4a74      	ldr	r2, [pc, #464]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009268:	430b      	orrs	r3, r1
 800926a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009278:	633b      	str	r3, [r7, #48]	@ 0x30
 800927a:	2300      	movs	r3, #0
 800927c:	637b      	str	r3, [r7, #52]	@ 0x34
 800927e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009282:	460b      	mov	r3, r1
 8009284:	4313      	orrs	r3, r2
 8009286:	d00a      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009288:	4b6b      	ldr	r3, [pc, #428]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800928a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800928c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009298:	4a67      	ldr	r2, [pc, #412]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800929a:	430b      	orrs	r3, r1
 800929c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	2100      	movs	r1, #0
 80092a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80092b4:	460b      	mov	r3, r1
 80092b6:	4313      	orrs	r3, r2
 80092b8:	d011      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092be:	3308      	adds	r3, #8
 80092c0:	2100      	movs	r1, #0
 80092c2:	4618      	mov	r0, r3
 80092c4:	f001 fa4a 	bl	800a75c <RCCEx_PLL2_Config>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80092ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80092de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	2100      	movs	r1, #0
 80092e8:	6239      	str	r1, [r7, #32]
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80092f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80092f4:	460b      	mov	r3, r1
 80092f6:	4313      	orrs	r3, r2
 80092f8:	d011      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fe:	3308      	adds	r3, #8
 8009300:	2101      	movs	r1, #1
 8009302:	4618      	mov	r0, r3
 8009304:	f001 fa2a 	bl	800a75c <RCCEx_PLL2_Config>
 8009308:	4603      	mov	r3, r0
 800930a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800930e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800931a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	2100      	movs	r1, #0
 8009328:	61b9      	str	r1, [r7, #24]
 800932a:	f003 0304 	and.w	r3, r3, #4
 800932e:	61fb      	str	r3, [r7, #28]
 8009330:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009334:	460b      	mov	r3, r1
 8009336:	4313      	orrs	r3, r2
 8009338:	d011      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933e:	3308      	adds	r3, #8
 8009340:	2102      	movs	r1, #2
 8009342:	4618      	mov	r0, r3
 8009344:	f001 fa0a 	bl	800a75c <RCCEx_PLL2_Config>
 8009348:	4603      	mov	r3, r0
 800934a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800934e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800935a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800935e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	2100      	movs	r1, #0
 8009368:	6139      	str	r1, [r7, #16]
 800936a:	f003 0308 	and.w	r3, r3, #8
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009374:	460b      	mov	r3, r1
 8009376:	4313      	orrs	r3, r2
 8009378:	d011      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937e:	3328      	adds	r3, #40	@ 0x28
 8009380:	2100      	movs	r1, #0
 8009382:	4618      	mov	r0, r3
 8009384:	f001 fa9c 	bl	800a8c0 <RCCEx_PLL3_Config>
 8009388:	4603      	mov	r3, r0
 800938a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800938e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800939a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800939e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	2100      	movs	r1, #0
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	f003 0310 	and.w	r3, r3, #16
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80093b4:	460b      	mov	r3, r1
 80093b6:	4313      	orrs	r3, r2
 80093b8:	d011      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093be:	3328      	adds	r3, #40	@ 0x28
 80093c0:	2101      	movs	r1, #1
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 fa7c 	bl	800a8c0 <RCCEx_PLL3_Config>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80093ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80093de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	2100      	movs	r1, #0
 80093e8:	6039      	str	r1, [r7, #0]
 80093ea:	f003 0320 	and.w	r3, r3, #32
 80093ee:	607b      	str	r3, [r7, #4]
 80093f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80093f4:	460b      	mov	r3, r1
 80093f6:	4313      	orrs	r3, r2
 80093f8:	d011      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fe:	3328      	adds	r3, #40	@ 0x28
 8009400:	2102      	movs	r1, #2
 8009402:	4618      	mov	r0, r3
 8009404:	f001 fa5c 	bl	800a8c0 <RCCEx_PLL3_Config>
 8009408:	4603      	mov	r3, r0
 800940a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800940e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800941a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800941e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	e000      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
}
 800942c:	4618      	mov	r0, r3
 800942e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009432:	46bd      	mov	sp, r7
 8009434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009438:	58024400 	.word	0x58024400

0800943c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b090      	sub	sp, #64	@ 0x40
 8009440:	af00      	add	r7, sp, #0
 8009442:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800944e:	430b      	orrs	r3, r1
 8009450:	f040 8094 	bne.w	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009454:	4b9e      	ldr	r3, [pc, #632]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	2b04      	cmp	r3, #4
 8009462:	f200 8087 	bhi.w	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009466:	a201      	add	r2, pc, #4	@ (adr r2, 800946c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	08009481 	.word	0x08009481
 8009470:	080094a9 	.word	0x080094a9
 8009474:	080094d1 	.word	0x080094d1
 8009478:	0800956d 	.word	0x0800956d
 800947c:	080094f9 	.word	0x080094f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009480:	4b93      	ldr	r3, [pc, #588]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009488:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800948c:	d108      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800948e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009492:	4618      	mov	r0, r3
 8009494:	f001 f810 	bl	800a4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949c:	f000 bd45 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a4:	f000 bd41 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094a8:	4b89      	ldr	r3, [pc, #548]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094b4:	d108      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094b6:	f107 0318 	add.w	r3, r7, #24
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fd54 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094c4:	f000 bd31 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094cc:	f000 bd2d 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094d0:	4b7f      	ldr	r3, [pc, #508]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094dc:	d108      	bne.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094de:	f107 030c 	add.w	r3, r7, #12
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 fe94 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ec:	f000 bd1d 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f4:	f000 bd19 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094f8:	4b75      	ldr	r3, [pc, #468]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009500:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009502:	4b73      	ldr	r3, [pc, #460]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0304 	and.w	r3, r3, #4
 800950a:	2b04      	cmp	r3, #4
 800950c:	d10c      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800950e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009510:	2b00      	cmp	r3, #0
 8009512:	d109      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009514:	4b6e      	ldr	r3, [pc, #440]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	08db      	lsrs	r3, r3, #3
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	4a6d      	ldr	r2, [pc, #436]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
 8009524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009526:	e01f      	b.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009528:	4b69      	ldr	r3, [pc, #420]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009534:	d106      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800953c:	d102      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800953e:	4b66      	ldr	r3, [pc, #408]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009542:	e011      	b.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009544:	4b62      	ldr	r3, [pc, #392]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800954c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009550:	d106      	bne.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009554:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009558:	d102      	bne.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800955a:	4b60      	ldr	r3, [pc, #384]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800955c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800955e:	e003      	b.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009564:	f000 bce1 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009568:	f000 bcdf 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800956c:	4b5c      	ldr	r3, [pc, #368]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800956e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009570:	f000 bcdb 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009578:	f000 bcd7 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800957c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009580:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009584:	430b      	orrs	r3, r1
 8009586:	f040 80ad 	bne.w	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800958a:	4b51      	ldr	r3, [pc, #324]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800958c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800958e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009592:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800959a:	d056      	beq.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095a2:	f200 8090 	bhi.w	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80095aa:	f000 8088 	beq.w	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80095b2:	f200 8088 	bhi.w	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80095b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b8:	2b80      	cmp	r3, #128	@ 0x80
 80095ba:	d032      	beq.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80095bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095be:	2b80      	cmp	r3, #128	@ 0x80
 80095c0:	f200 8081 	bhi.w	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	2b40      	cmp	r3, #64	@ 0x40
 80095ce:	d014      	beq.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80095d0:	e079      	b.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095d2:	4b3f      	ldr	r3, [pc, #252]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095de:	d108      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 ff67 	bl	800a4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ee:	f000 bc9c 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f6:	f000 bc98 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095fa:	4b35      	ldr	r3, [pc, #212]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009606:	d108      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009608:	f107 0318 	add.w	r3, r7, #24
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fcab 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009616:	f000 bc88 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800961e:	f000 bc84 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009622:	4b2b      	ldr	r3, [pc, #172]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800962a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800962e:	d108      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009630:	f107 030c 	add.w	r3, r7, #12
 8009634:	4618      	mov	r0, r3
 8009636:	f000 fdeb 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800963e:	f000 bc74 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009646:	f000 bc70 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800964a:	4b21      	ldr	r3, [pc, #132]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800964c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800964e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009652:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009654:	4b1e      	ldr	r3, [pc, #120]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0304 	and.w	r3, r3, #4
 800965c:	2b04      	cmp	r3, #4
 800965e:	d10c      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009662:	2b00      	cmp	r3, #0
 8009664:	d109      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009666:	4b1a      	ldr	r3, [pc, #104]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	08db      	lsrs	r3, r3, #3
 800966c:	f003 0303 	and.w	r3, r3, #3
 8009670:	4a18      	ldr	r2, [pc, #96]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009672:	fa22 f303 	lsr.w	r3, r2, r3
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009678:	e01f      	b.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800967a:	4b15      	ldr	r3, [pc, #84]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009686:	d106      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800968a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800968e:	d102      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009690:	4b11      	ldr	r3, [pc, #68]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009694:	e011      	b.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009696:	4b0e      	ldr	r3, [pc, #56]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800969e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096a2:	d106      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80096a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096aa:	d102      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096ac:	4b0b      	ldr	r3, [pc, #44]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b0:	e003      	b.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096b2:	2300      	movs	r3, #0
 80096b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096b6:	f000 bc38 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096ba:	f000 bc36 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096be:	4b08      	ldr	r3, [pc, #32]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c2:	f000 bc32 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ca:	f000 bc2e 	b.w	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096ce:	bf00      	nop
 80096d0:	58024400 	.word	0x58024400
 80096d4:	03d09000 	.word	0x03d09000
 80096d8:	003d0900 	.word	0x003d0900
 80096dc:	017d7840 	.word	0x017d7840
 80096e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80096e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80096ec:	430b      	orrs	r3, r1
 80096ee:	f040 809c 	bne.w	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80096f2:	4b9e      	ldr	r3, [pc, #632]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80096f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80096fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80096fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009702:	d054      	beq.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800970a:	f200 808b 	bhi.w	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009714:	f000 8083 	beq.w	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800971e:	f200 8081 	bhi.w	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009728:	d02f      	beq.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009730:	d878      	bhi.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009734:	2b00      	cmp	r3, #0
 8009736:	d004      	beq.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800973e:	d012      	beq.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009740:	e070      	b.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009742:	4b8a      	ldr	r3, [pc, #552]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800974a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800974e:	d107      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009754:	4618      	mov	r0, r3
 8009756:	f000 feaf 	bl	800a4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800975a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800975e:	e3e4      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009764:	e3e1      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009766:	4b81      	ldr	r3, [pc, #516]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800976e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009772:	d107      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009774:	f107 0318 	add.w	r3, r7, #24
 8009778:	4618      	mov	r0, r3
 800977a:	f000 fbf5 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009782:	e3d2      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009788:	e3cf      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800978a:	4b78      	ldr	r3, [pc, #480]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009796:	d107      	bne.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009798:	f107 030c 	add.w	r3, r7, #12
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fd37 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a6:	e3c0      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ac:	e3bd      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097ae:	4b6f      	ldr	r3, [pc, #444]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80097b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097b8:	4b6c      	ldr	r3, [pc, #432]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d10c      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80097c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d109      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ca:	4b68      	ldr	r3, [pc, #416]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	08db      	lsrs	r3, r3, #3
 80097d0:	f003 0303 	and.w	r3, r3, #3
 80097d4:	4a66      	ldr	r2, [pc, #408]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80097d6:	fa22 f303 	lsr.w	r3, r2, r3
 80097da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097dc:	e01e      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097de:	4b63      	ldr	r3, [pc, #396]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ea:	d106      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80097ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097f2:	d102      	bne.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097f4:	4b5f      	ldr	r3, [pc, #380]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80097f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097f8:	e010      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097fa:	4b5c      	ldr	r3, [pc, #368]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009806:	d106      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800980a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800980e:	d102      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009810:	4b59      	ldr	r3, [pc, #356]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009814:	e002      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800981a:	e386      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800981c:	e385      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800981e:	4b57      	ldr	r3, [pc, #348]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009822:	e382      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009828:	e37f      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800982a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800982e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009832:	430b      	orrs	r3, r1
 8009834:	f040 80a7 	bne.w	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009838:	4b4c      	ldr	r3, [pc, #304]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800983a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800983c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009840:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009844:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009848:	d055      	beq.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009850:	f200 8096 	bhi.w	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009856:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800985a:	f000 8084 	beq.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009864:	f200 808c 	bhi.w	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800986e:	d030      	beq.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009876:	f200 8083 	bhi.w	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	2b00      	cmp	r3, #0
 800987e:	d004      	beq.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009882:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009886:	d012      	beq.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009888:	e07a      	b.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800988a:	4b38      	ldr	r3, [pc, #224]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009896:	d107      	bne.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fe0b 	bl	800a4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a6:	e340      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ac:	e33d      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098ae:	4b2f      	ldr	r3, [pc, #188]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098ba:	d107      	bne.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098bc:	f107 0318 	add.w	r3, r7, #24
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fb51 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ca:	e32e      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d0:	e32b      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098d2:	4b26      	ldr	r3, [pc, #152]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098de:	d107      	bne.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098e0:	f107 030c 	add.w	r3, r7, #12
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fc93 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ee:	e31c      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f4:	e319      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098f6:	4b1d      	ldr	r3, [pc, #116]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009900:	4b1a      	ldr	r3, [pc, #104]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b04      	cmp	r3, #4
 800990a:	d10c      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800990c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990e:	2b00      	cmp	r3, #0
 8009910:	d109      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009912:	4b16      	ldr	r3, [pc, #88]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	08db      	lsrs	r3, r3, #3
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	4a14      	ldr	r2, [pc, #80]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800991e:	fa22 f303 	lsr.w	r3, r2, r3
 8009922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009924:	e01e      	b.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009926:	4b11      	ldr	r3, [pc, #68]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800992e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009932:	d106      	bne.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800993a:	d102      	bne.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800993c:	4b0d      	ldr	r3, [pc, #52]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800993e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009940:	e010      	b.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009942:	4b0a      	ldr	r3, [pc, #40]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800994a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800994e:	d106      	bne.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009956:	d102      	bne.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009958:	4b07      	ldr	r3, [pc, #28]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800995a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800995c:	e002      	b.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009962:	e2e2      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009964:	e2e1      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009966:	4b05      	ldr	r3, [pc, #20]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800996a:	e2de      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800996c:	58024400 	.word	0x58024400
 8009970:	03d09000 	.word	0x03d09000
 8009974:	003d0900 	.word	0x003d0900
 8009978:	017d7840 	.word	0x017d7840
 800997c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009984:	e2d1      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800998a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800998e:	430b      	orrs	r3, r1
 8009990:	f040 809c 	bne.w	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009994:	4b93      	ldr	r3, [pc, #588]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009998:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800999c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800999e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099a4:	d054      	beq.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80099a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099ac:	f200 808b 	bhi.w	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099b6:	f000 8083 	beq.w	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80099ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099c0:	f200 8081 	bhi.w	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80099c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099ca:	d02f      	beq.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80099cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099d2:	d878      	bhi.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80099d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80099da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e0:	d012      	beq.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80099e2:	e070      	b.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099e4:	4b7f      	ldr	r3, [pc, #508]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099f0:	d107      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fd5e 	bl	800a4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a00:	e293      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a06:	e290      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a08:	4b76      	ldr	r3, [pc, #472]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a14:	d107      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a16:	f107 0318 	add.w	r3, r7, #24
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 faa4 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a24:	e281      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a2a:	e27e      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a38:	d107      	bne.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a3a:	f107 030c 	add.w	r3, r7, #12
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fbe6 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a48:	e26f      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4e:	e26c      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a50:	4b64      	ldr	r3, [pc, #400]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a5a:	4b62      	ldr	r3, [pc, #392]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d10c      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d109      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a6c:	4b5d      	ldr	r3, [pc, #372]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	08db      	lsrs	r3, r3, #3
 8009a72:	f003 0303 	and.w	r3, r3, #3
 8009a76:	4a5c      	ldr	r2, [pc, #368]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009a78:	fa22 f303 	lsr.w	r3, r2, r3
 8009a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a7e:	e01e      	b.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a80:	4b58      	ldr	r3, [pc, #352]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a8c:	d106      	bne.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a94:	d102      	bne.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a96:	4b55      	ldr	r3, [pc, #340]	@ (8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a9a:	e010      	b.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a9c:	4b51      	ldr	r3, [pc, #324]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aa8:	d106      	bne.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ab0:	d102      	bne.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ab6:	e002      	b.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009abc:	e235      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009abe:	e234      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac4:	e231      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aca:	e22e      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ad0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	f040 808f 	bne.w	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009ada:	4b42      	ldr	r3, [pc, #264]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ade:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009aea:	d06b      	beq.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009af2:	d874      	bhi.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009afa:	d056      	beq.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009b02:	d86c      	bhi.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009b0a:	d03b      	beq.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009b12:	d864      	bhi.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b1a:	d021      	beq.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b22:	d85c      	bhi.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d004      	beq.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b30:	d004      	beq.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009b32:	e054      	b.n	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009b34:	f7fe fa0a 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 8009b38:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009b3a:	e1f6      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b3c:	4b29      	ldr	r3, [pc, #164]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b48:	d107      	bne.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b4a:	f107 0318 	add.w	r3, r7, #24
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fa0a 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b58:	e1e7      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b5e:	e1e4      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b60:	4b20      	ldr	r3, [pc, #128]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b6c:	d107      	bne.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b6e:	f107 030c 	add.w	r3, r7, #12
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fb4c 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b7c:	e1d5      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b82:	e1d2      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b84:	4b17      	ldr	r3, [pc, #92]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	d109      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b90:	4b14      	ldr	r3, [pc, #80]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	08db      	lsrs	r3, r3, #3
 8009b96:	f003 0303 	and.w	r3, r3, #3
 8009b9a:	4a13      	ldr	r2, [pc, #76]	@ (8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ba2:	e1c2      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba8:	e1bf      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009baa:	4b0e      	ldr	r3, [pc, #56]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb6:	d102      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bbc:	e1b5      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc2:	e1b2      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bc4:	4b07      	ldr	r3, [pc, #28]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bd0:	d102      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009bd2:	4b07      	ldr	r3, [pc, #28]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bd6:	e1a8      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bdc:	e1a5      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be2:	e1a2      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009be4:	58024400 	.word	0x58024400
 8009be8:	03d09000 	.word	0x03d09000
 8009bec:	003d0900 	.word	0x003d0900
 8009bf0:	017d7840 	.word	0x017d7840
 8009bf4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bfc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009c00:	430b      	orrs	r3, r1
 8009c02:	d173      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009c04:	4b9c      	ldr	r3, [pc, #624]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009c0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c14:	d02f      	beq.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c1c:	d863      	bhi.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c2a:	d012      	beq.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009c2c:	e05b      	b.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c2e:	4b92      	ldr	r3, [pc, #584]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c3a:	d107      	bne.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c3c:	f107 0318 	add.w	r3, r7, #24
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 f991 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c4a:	e16e      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c50:	e16b      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c52:	4b89      	ldr	r3, [pc, #548]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c5e:	d107      	bne.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c60:	f107 030c 	add.w	r3, r7, #12
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fad3 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c6e:	e15c      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c74:	e159      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c76:	4b80      	ldr	r3, [pc, #512]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c80:	4b7d      	ldr	r3, [pc, #500]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b04      	cmp	r3, #4
 8009c8a:	d10c      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d109      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c92:	4b79      	ldr	r3, [pc, #484]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	08db      	lsrs	r3, r3, #3
 8009c98:	f003 0303 	and.w	r3, r3, #3
 8009c9c:	4a77      	ldr	r2, [pc, #476]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ca4:	e01e      	b.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ca6:	4b74      	ldr	r3, [pc, #464]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cb2:	d106      	bne.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cba:	d102      	bne.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cbc:	4b70      	ldr	r3, [pc, #448]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cc0:	e010      	b.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cce:	d106      	bne.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cd6:	d102      	bne.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cdc:	e002      	b.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009ce2:	e122      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ce4:	e121      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cea:	e11e      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	d133      	bne.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d0e:	d012      	beq.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009d10:	e023      	b.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d12:	4b59      	ldr	r3, [pc, #356]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d1e:	d107      	bne.n	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fbc7 	bl	800a4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d2e:	e0fc      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d34:	e0f9      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d36:	4b50      	ldr	r3, [pc, #320]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d42:	d107      	bne.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d44:	f107 0318 	add.w	r3, r7, #24
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 f90d 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d52:	e0ea      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d58:	e0e7      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d5e:	e0e4      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d64:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009d68:	430b      	orrs	r3, r1
 8009d6a:	f040 808d 	bne.w	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009d6e:	4b42      	ldr	r3, [pc, #264]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d72:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009d76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d7e:	d06b      	beq.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d86:	d874      	bhi.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d8e:	d056      	beq.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d96:	d86c      	bhi.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d9e:	d03b      	beq.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009da6:	d864      	bhi.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dae:	d021      	beq.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009db6:	d85c      	bhi.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d004      	beq.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dc4:	d004      	beq.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009dc6:	e054      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009dc8:	f000 f8b8 	bl	8009f3c <HAL_RCCEx_GetD3PCLK1Freq>
 8009dcc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dce:	e0ac      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dd0:	4b29      	ldr	r3, [pc, #164]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ddc:	d107      	bne.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dde:	f107 0318 	add.w	r3, r7, #24
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 f8c0 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dec:	e09d      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df2:	e09a      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009df4:	4b20      	ldr	r3, [pc, #128]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e00:	d107      	bne.n	8009e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e02:	f107 030c 	add.w	r3, r7, #12
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fa02 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e10:	e08b      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e16:	e088      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e18:	4b17      	ldr	r3, [pc, #92]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d109      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e24:	4b14      	ldr	r3, [pc, #80]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	08db      	lsrs	r3, r3, #3
 8009e2a:	f003 0303 	and.w	r3, r3, #3
 8009e2e:	4a13      	ldr	r2, [pc, #76]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009e30:	fa22 f303 	lsr.w	r3, r2, r3
 8009e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e36:	e078      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e3c:	e075      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e4a:	d102      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e50:	e06b      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e56:	e068      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009e58:	4b07      	ldr	r3, [pc, #28]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e64:	d102      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009e66:	4b07      	ldr	r3, [pc, #28]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e6a:	e05e      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e70:	e05b      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e76:	e058      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e78:	58024400 	.word	0x58024400
 8009e7c:	03d09000 	.word	0x03d09000
 8009e80:	003d0900 	.word	0x003d0900
 8009e84:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e8c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009e90:	430b      	orrs	r3, r1
 8009e92:	d148      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009e94:	4b27      	ldr	r3, [pc, #156]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ea4:	d02a      	beq.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eac:	d838      	bhi.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d004      	beq.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009eba:	d00d      	beq.n	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009ebc:	e030      	b.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eca:	d102      	bne.n	8009ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ed0:	e02b      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed6:	e028      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ed8:	4b16      	ldr	r3, [pc, #88]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ee0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ee4:	d107      	bne.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 fae4 	bl	800a4b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ef4:	e019      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009efa:	e016      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009efc:	4b0d      	ldr	r3, [pc, #52]	@ (8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f08:	d107      	bne.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f0a:	f107 0318 	add.w	r3, r7, #24
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 f82a 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f18:	e007      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f1e:	e004      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f24:	e001      	b.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3740      	adds	r7, #64	@ 0x40
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	58024400 	.word	0x58024400
 8009f38:	017d7840 	.word	0x017d7840

08009f3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009f40:	f7fd ffd4 	bl	8007eec <HAL_RCC_GetHCLKFreq>
 8009f44:	4602      	mov	r2, r0
 8009f46:	4b06      	ldr	r3, [pc, #24]	@ (8009f60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	091b      	lsrs	r3, r3, #4
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	4904      	ldr	r1, [pc, #16]	@ (8009f64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009f52:	5ccb      	ldrb	r3, [r1, r3]
 8009f54:	f003 031f 	and.w	r3, r3, #31
 8009f58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	58024400 	.word	0x58024400
 8009f64:	0800fcdc 	.word	0x0800fcdc

08009f68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b089      	sub	sp, #36	@ 0x24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f70:	4ba1      	ldr	r3, [pc, #644]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009f7a:	4b9f      	ldr	r3, [pc, #636]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f7e:	0b1b      	lsrs	r3, r3, #12
 8009f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f86:	4b9c      	ldr	r3, [pc, #624]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8a:	091b      	lsrs	r3, r3, #4
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009f92:	4b99      	ldr	r3, [pc, #612]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f96:	08db      	lsrs	r3, r3, #3
 8009f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	fb02 f303 	mul.w	r3, r2, r3
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 8111 	beq.w	800a1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	f000 8083 	beq.w	800a0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	f200 80a1 	bhi.w	800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d056      	beq.n	800a080 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009fd2:	e099      	b.n	800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fd4:	4b88      	ldr	r3, [pc, #544]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0320 	and.w	r3, r3, #32
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d02d      	beq.n	800a03c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fe0:	4b85      	ldr	r3, [pc, #532]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	08db      	lsrs	r3, r3, #3
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	4a84      	ldr	r2, [pc, #528]	@ (800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009fec:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	ee07 3a90 	vmov	s15, r3
 8009ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a00a:	4b7b      	ldr	r3, [pc, #492]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a00c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a012:	ee07 3a90 	vmov	s15, r3
 800a016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a01a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a01e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a02a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a036:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a03a:	e087      	b.n	800a14c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a046:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a204 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a04e:	4b6a      	ldr	r3, [pc, #424]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a056:	ee07 3a90 	vmov	s15, r3
 800a05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a05e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a062:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a06e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a07a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a07e:	e065      	b.n	800a14c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	ee07 3a90 	vmov	s15, r3
 800a086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a08a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a08e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a092:	4b59      	ldr	r3, [pc, #356]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0c2:	e043      	b.n	800a14c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	ee07 3a90 	vmov	s15, r3
 800a0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a20c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d6:	4b48      	ldr	r3, [pc, #288]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a106:	e021      	b.n	800a14c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a112:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a11a:	4b37      	ldr	r3, [pc, #220]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a12e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a13a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a14a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a14c:	4b2a      	ldr	r3, [pc, #168]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a14e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a150:	0a5b      	lsrs	r3, r3, #9
 800a152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a15e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a166:	edd7 6a07 	vldr	s13, [r7, #28]
 800a16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a172:	ee17 2a90 	vmov	r2, s15
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a17a:	4b1f      	ldr	r3, [pc, #124]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a17e:	0c1b      	lsrs	r3, r3, #16
 800a180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a184:	ee07 3a90 	vmov	s15, r3
 800a188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a190:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a194:	edd7 6a07 	vldr	s13, [r7, #28]
 800a198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a19c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1a0:	ee17 2a90 	vmov	r2, s15
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a1a8:	4b13      	ldr	r3, [pc, #76]	@ (800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ac:	0e1b      	lsrs	r3, r3, #24
 800a1ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1b2:	ee07 3a90 	vmov	s15, r3
 800a1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ce:	ee17 2a90 	vmov	r2, s15
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a1d6:	e008      	b.n	800a1ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	609a      	str	r2, [r3, #8]
}
 800a1ea:	bf00      	nop
 800a1ec:	3724      	adds	r7, #36	@ 0x24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	58024400 	.word	0x58024400
 800a1fc:	03d09000 	.word	0x03d09000
 800a200:	46000000 	.word	0x46000000
 800a204:	4c742400 	.word	0x4c742400
 800a208:	4a742400 	.word	0x4a742400
 800a20c:	4bbebc20 	.word	0x4bbebc20

0800a210 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a210:	b480      	push	{r7}
 800a212:	b089      	sub	sp, #36	@ 0x24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a218:	4ba1      	ldr	r3, [pc, #644]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a222:	4b9f      	ldr	r3, [pc, #636]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a226:	0d1b      	lsrs	r3, r3, #20
 800a228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a22c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a22e:	4b9c      	ldr	r3, [pc, #624]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a232:	0a1b      	lsrs	r3, r3, #8
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a23a:	4b99      	ldr	r3, [pc, #612]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a23c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a23e:	08db      	lsrs	r3, r3, #3
 800a240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	fb02 f303 	mul.w	r3, r2, r3
 800a24a:	ee07 3a90 	vmov	s15, r3
 800a24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a252:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 8111 	beq.w	800a480 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	2b02      	cmp	r3, #2
 800a262:	f000 8083 	beq.w	800a36c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	2b02      	cmp	r3, #2
 800a26a:	f200 80a1 	bhi.w	800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d003      	beq.n	800a27c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d056      	beq.n	800a328 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a27a:	e099      	b.n	800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a27c:	4b88      	ldr	r3, [pc, #544]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b00      	cmp	r3, #0
 800a286:	d02d      	beq.n	800a2e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a288:	4b85      	ldr	r3, [pc, #532]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	08db      	lsrs	r3, r3, #3
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	4a84      	ldr	r2, [pc, #528]	@ (800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a294:	fa22 f303 	lsr.w	r3, r2, r3
 800a298:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	ee07 3a90 	vmov	s15, r3
 800a2a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2b2:	4b7b      	ldr	r3, [pc, #492]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ba:	ee07 3a90 	vmov	s15, r3
 800a2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2e2:	e087      	b.n	800a3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	ee07 3a90 	vmov	s15, r3
 800a2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a4ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a2f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2f6:	4b6a      	ldr	r3, [pc, #424]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2fe:	ee07 3a90 	vmov	s15, r3
 800a302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a306:	ed97 6a03 	vldr	s12, [r7, #12]
 800a30a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a30e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a31a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a326:	e065      	b.n	800a3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	ee07 3a90 	vmov	s15, r3
 800a32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a332:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a33a:	4b59      	ldr	r3, [pc, #356]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a342:	ee07 3a90 	vmov	s15, r3
 800a346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a34a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a34e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a35a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a35e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a362:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a36a:	e043      	b.n	800a3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	ee07 3a90 	vmov	s15, r3
 800a372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a376:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a4b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a37e:	4b48      	ldr	r3, [pc, #288]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a386:	ee07 3a90 	vmov	s15, r3
 800a38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a38e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a392:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a39a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a39e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3ae:	e021      	b.n	800a3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	ee07 3a90 	vmov	s15, r3
 800a3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3c2:	4b37      	ldr	r3, [pc, #220]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a3f4:	4b2a      	ldr	r3, [pc, #168]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f8:	0a5b      	lsrs	r3, r3, #9
 800a3fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a40a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a40e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a41a:	ee17 2a90 	vmov	r2, s15
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a422:	4b1f      	ldr	r3, [pc, #124]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a426:	0c1b      	lsrs	r3, r3, #16
 800a428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a42c:	ee07 3a90 	vmov	s15, r3
 800a430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a434:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a438:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a43c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a448:	ee17 2a90 	vmov	r2, s15
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a450:	4b13      	ldr	r3, [pc, #76]	@ (800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a454:	0e1b      	lsrs	r3, r3, #24
 800a456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a45a:	ee07 3a90 	vmov	s15, r3
 800a45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a46a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a46e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a476:	ee17 2a90 	vmov	r2, s15
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a47e:	e008      	b.n	800a492 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	609a      	str	r2, [r3, #8]
}
 800a492:	bf00      	nop
 800a494:	3724      	adds	r7, #36	@ 0x24
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	58024400 	.word	0x58024400
 800a4a4:	03d09000 	.word	0x03d09000
 800a4a8:	46000000 	.word	0x46000000
 800a4ac:	4c742400 	.word	0x4c742400
 800a4b0:	4a742400 	.word	0x4a742400
 800a4b4:	4bbebc20 	.word	0x4bbebc20

0800a4b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b089      	sub	sp, #36	@ 0x24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4c0:	4ba0      	ldr	r3, [pc, #640]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c4:	f003 0303 	and.w	r3, r3, #3
 800a4c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a4ca:	4b9e      	ldr	r3, [pc, #632]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ce:	091b      	lsrs	r3, r3, #4
 800a4d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a4d6:	4b9b      	ldr	r3, [pc, #620]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a4e0:	4b98      	ldr	r3, [pc, #608]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4e4:	08db      	lsrs	r3, r3, #3
 800a4e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	fb02 f303 	mul.w	r3, r2, r3
 800a4f0:	ee07 3a90 	vmov	s15, r3
 800a4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 8111 	beq.w	800a726 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	2b02      	cmp	r3, #2
 800a508:	f000 8083 	beq.w	800a612 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	f200 80a1 	bhi.w	800a656 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d056      	beq.n	800a5ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a520:	e099      	b.n	800a656 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a522:	4b88      	ldr	r3, [pc, #544]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d02d      	beq.n	800a58a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a52e:	4b85      	ldr	r3, [pc, #532]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	08db      	lsrs	r3, r3, #3
 800a534:	f003 0303 	and.w	r3, r3, #3
 800a538:	4a83      	ldr	r2, [pc, #524]	@ (800a748 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a53a:	fa22 f303 	lsr.w	r3, r2, r3
 800a53e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	ee07 3a90 	vmov	s15, r3
 800a546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	ee07 3a90 	vmov	s15, r3
 800a550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a558:	4b7a      	ldr	r3, [pc, #488]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a55a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a55c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a560:	ee07 3a90 	vmov	s15, r3
 800a564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a568:	ed97 6a03 	vldr	s12, [r7, #12]
 800a56c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a578:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a57c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a580:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a584:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a588:	e087      	b.n	800a69a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	ee07 3a90 	vmov	s15, r3
 800a590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a594:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a750 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a59c:	4b69      	ldr	r3, [pc, #420]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a59e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a4:	ee07 3a90 	vmov	s15, r3
 800a5a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5cc:	e065      	b.n	800a69a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a754 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a5dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5e0:	4b58      	ldr	r3, [pc, #352]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e8:	ee07 3a90 	vmov	s15, r3
 800a5ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a610:	e043      	b.n	800a69a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	ee07 3a90 	vmov	s15, r3
 800a618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a758 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a624:	4b47      	ldr	r3, [pc, #284]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62c:	ee07 3a90 	vmov	s15, r3
 800a630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a634:	ed97 6a03 	vldr	s12, [r7, #12]
 800a638:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a63c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a64c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a654:	e021      	b.n	800a69a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	ee07 3a90 	vmov	s15, r3
 800a65c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a660:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a750 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a668:	4b36      	ldr	r3, [pc, #216]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a66a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a66c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a670:	ee07 3a90 	vmov	s15, r3
 800a674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a678:	ed97 6a03 	vldr	s12, [r7, #12]
 800a67c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a74c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a68c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a690:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a698:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a69a:	4b2a      	ldr	r3, [pc, #168]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a69c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a69e:	0a5b      	lsrs	r3, r3, #9
 800a6a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c0:	ee17 2a90 	vmov	r2, s15
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a6c8:	4b1e      	ldr	r3, [pc, #120]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6cc:	0c1b      	lsrs	r3, r3, #16
 800a6ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6d2:	ee07 3a90 	vmov	s15, r3
 800a6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ee:	ee17 2a90 	vmov	r2, s15
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a6f6:	4b13      	ldr	r3, [pc, #76]	@ (800a744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6fa:	0e1b      	lsrs	r3, r3, #24
 800a6fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a700:	ee07 3a90 	vmov	s15, r3
 800a704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a708:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a70c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a710:	edd7 6a07 	vldr	s13, [r7, #28]
 800a714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a71c:	ee17 2a90 	vmov	r2, s15
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a724:	e008      	b.n	800a738 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	609a      	str	r2, [r3, #8]
}
 800a738:	bf00      	nop
 800a73a:	3724      	adds	r7, #36	@ 0x24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	58024400 	.word	0x58024400
 800a748:	03d09000 	.word	0x03d09000
 800a74c:	46000000 	.word	0x46000000
 800a750:	4c742400 	.word	0x4c742400
 800a754:	4a742400 	.word	0x4a742400
 800a758:	4bbebc20 	.word	0x4bbebc20

0800a75c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a76a:	4b53      	ldr	r3, [pc, #332]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	2b03      	cmp	r3, #3
 800a774:	d101      	bne.n	800a77a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e099      	b.n	800a8ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a77a:	4b4f      	ldr	r3, [pc, #316]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a4e      	ldr	r2, [pc, #312]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a780:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a786:	f7f7 faed 	bl	8001d64 <HAL_GetTick>
 800a78a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a78c:	e008      	b.n	800a7a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a78e:	f7f7 fae9 	bl	8001d64 <HAL_GetTick>
 800a792:	4602      	mov	r2, r0
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d901      	bls.n	800a7a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e086      	b.n	800a8ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7a0:	4b45      	ldr	r3, [pc, #276]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1f0      	bne.n	800a78e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a7ac:	4b42      	ldr	r3, [pc, #264]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a7ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	031b      	lsls	r3, r3, #12
 800a7ba:	493f      	ldr	r1, [pc, #252]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	628b      	str	r3, [r1, #40]	@ 0x28
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	025b      	lsls	r3, r3, #9
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	041b      	lsls	r3, r3, #16
 800a7de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	061b      	lsls	r3, r3, #24
 800a7ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a7f0:	4931      	ldr	r1, [pc, #196]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a7f6:	4b30      	ldr	r3, [pc, #192]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	492d      	ldr	r1, [pc, #180]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a804:	4313      	orrs	r3, r2
 800a806:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a808:	4b2b      	ldr	r3, [pc, #172]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a80c:	f023 0220 	bic.w	r2, r3, #32
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	4928      	ldr	r1, [pc, #160]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a816:	4313      	orrs	r3, r2
 800a818:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a81a:	4b27      	ldr	r3, [pc, #156]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81e:	4a26      	ldr	r2, [pc, #152]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a820:	f023 0310 	bic.w	r3, r3, #16
 800a824:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a826:	4b24      	ldr	r3, [pc, #144]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a82a:	4b24      	ldr	r3, [pc, #144]	@ (800a8bc <RCCEx_PLL2_Config+0x160>)
 800a82c:	4013      	ands	r3, r2
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	69d2      	ldr	r2, [r2, #28]
 800a832:	00d2      	lsls	r2, r2, #3
 800a834:	4920      	ldr	r1, [pc, #128]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a836:	4313      	orrs	r3, r2
 800a838:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a83a:	4b1f      	ldr	r3, [pc, #124]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83e:	4a1e      	ldr	r2, [pc, #120]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a840:	f043 0310 	orr.w	r3, r3, #16
 800a844:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d106      	bne.n	800a85a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a84c:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a850:	4a19      	ldr	r2, [pc, #100]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a852:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a856:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a858:	e00f      	b.n	800a87a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d106      	bne.n	800a86e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a860:	4b15      	ldr	r3, [pc, #84]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a864:	4a14      	ldr	r2, [pc, #80]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a86a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a86c:	e005      	b.n	800a87a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a86e:	4b12      	ldr	r3, [pc, #72]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a872:	4a11      	ldr	r2, [pc, #68]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a874:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a878:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a87a:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a0e      	ldr	r2, [pc, #56]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a880:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a886:	f7f7 fa6d 	bl	8001d64 <HAL_GetTick>
 800a88a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a88c:	e008      	b.n	800a8a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a88e:	f7f7 fa69 	bl	8001d64 <HAL_GetTick>
 800a892:	4602      	mov	r2, r0
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d901      	bls.n	800a8a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e006      	b.n	800a8ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a8a0:	4b05      	ldr	r3, [pc, #20]	@ (800a8b8 <RCCEx_PLL2_Config+0x15c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d0f0      	beq.n	800a88e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	58024400 	.word	0x58024400
 800a8bc:	ffff0007 	.word	0xffff0007

0800a8c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a8ce:	4b53      	ldr	r3, [pc, #332]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	d101      	bne.n	800a8de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e099      	b.n	800aa12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a8de:	4b4f      	ldr	r3, [pc, #316]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a4e      	ldr	r2, [pc, #312]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a8e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a8e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8ea:	f7f7 fa3b 	bl	8001d64 <HAL_GetTick>
 800a8ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a8f0:	e008      	b.n	800a904 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a8f2:	f7f7 fa37 	bl	8001d64 <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d901      	bls.n	800a904 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e086      	b.n	800aa12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a904:	4b45      	ldr	r3, [pc, #276]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1f0      	bne.n	800a8f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a910:	4b42      	ldr	r3, [pc, #264]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a914:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	051b      	lsls	r3, r3, #20
 800a91e:	493f      	ldr	r1, [pc, #252]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a920:	4313      	orrs	r3, r2
 800a922:	628b      	str	r3, [r1, #40]	@ 0x28
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	3b01      	subs	r3, #1
 800a92a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	3b01      	subs	r3, #1
 800a934:	025b      	lsls	r3, r3, #9
 800a936:	b29b      	uxth	r3, r3
 800a938:	431a      	orrs	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	3b01      	subs	r3, #1
 800a940:	041b      	lsls	r3, r3, #16
 800a942:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a946:	431a      	orrs	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	061b      	lsls	r3, r3, #24
 800a950:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a954:	4931      	ldr	r1, [pc, #196]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a956:	4313      	orrs	r3, r2
 800a958:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a95a:	4b30      	ldr	r3, [pc, #192]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	695b      	ldr	r3, [r3, #20]
 800a966:	492d      	ldr	r1, [pc, #180]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a968:	4313      	orrs	r3, r2
 800a96a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a96c:	4b2b      	ldr	r3, [pc, #172]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a970:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	4928      	ldr	r1, [pc, #160]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a97e:	4b27      	ldr	r3, [pc, #156]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a982:	4a26      	ldr	r2, [pc, #152]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a98a:	4b24      	ldr	r3, [pc, #144]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a98c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a98e:	4b24      	ldr	r3, [pc, #144]	@ (800aa20 <RCCEx_PLL3_Config+0x160>)
 800a990:	4013      	ands	r3, r2
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	69d2      	ldr	r2, [r2, #28]
 800a996:	00d2      	lsls	r2, r2, #3
 800a998:	4920      	ldr	r1, [pc, #128]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a99a:	4313      	orrs	r3, r2
 800a99c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a99e:	4b1f      	ldr	r3, [pc, #124]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a2:	4a1e      	ldr	r2, [pc, #120]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a9b0:	4b1a      	ldr	r3, [pc, #104]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b4:	4a19      	ldr	r2, [pc, #100]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a9ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9bc:	e00f      	b.n	800a9de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d106      	bne.n	800a9d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a9c4:	4b15      	ldr	r3, [pc, #84]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c8:	4a14      	ldr	r2, [pc, #80]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a9ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9d0:	e005      	b.n	800a9de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a9d2:	4b12      	ldr	r3, [pc, #72]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d6:	4a11      	ldr	r2, [pc, #68]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a9dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a9de:	4b0f      	ldr	r3, [pc, #60]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a0e      	ldr	r2, [pc, #56]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800a9e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9ea:	f7f7 f9bb 	bl	8001d64 <HAL_GetTick>
 800a9ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a9f0:	e008      	b.n	800aa04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a9f2:	f7f7 f9b7 	bl	8001d64 <HAL_GetTick>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d901      	bls.n	800aa04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e006      	b.n	800aa12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa04:	4b05      	ldr	r3, [pc, #20]	@ (800aa1c <RCCEx_PLL3_Config+0x15c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0f0      	beq.n	800a9f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	58024400 	.word	0x58024400
 800aa20:	ffff0007 	.word	0xffff0007

0800aa24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e049      	b.n	800aaca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d106      	bne.n	800aa50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7f6 fd1a 	bl	8001484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2202      	movs	r2, #2
 800aa54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3304      	adds	r3, #4
 800aa60:	4619      	mov	r1, r3
 800aa62:	4610      	mov	r0, r2
 800aa64:	f000 fb46 	bl	800b0f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d001      	beq.n	800aaec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e04c      	b.n	800ab86 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2202      	movs	r2, #2
 800aaf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a26      	ldr	r2, [pc, #152]	@ (800ab94 <HAL_TIM_Base_Start+0xc0>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d022      	beq.n	800ab44 <HAL_TIM_Base_Start+0x70>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab06:	d01d      	beq.n	800ab44 <HAL_TIM_Base_Start+0x70>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a22      	ldr	r2, [pc, #136]	@ (800ab98 <HAL_TIM_Base_Start+0xc4>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d018      	beq.n	800ab44 <HAL_TIM_Base_Start+0x70>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a21      	ldr	r2, [pc, #132]	@ (800ab9c <HAL_TIM_Base_Start+0xc8>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d013      	beq.n	800ab44 <HAL_TIM_Base_Start+0x70>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a1f      	ldr	r2, [pc, #124]	@ (800aba0 <HAL_TIM_Base_Start+0xcc>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d00e      	beq.n	800ab44 <HAL_TIM_Base_Start+0x70>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a1e      	ldr	r2, [pc, #120]	@ (800aba4 <HAL_TIM_Base_Start+0xd0>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d009      	beq.n	800ab44 <HAL_TIM_Base_Start+0x70>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a1c      	ldr	r2, [pc, #112]	@ (800aba8 <HAL_TIM_Base_Start+0xd4>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d004      	beq.n	800ab44 <HAL_TIM_Base_Start+0x70>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a1b      	ldr	r2, [pc, #108]	@ (800abac <HAL_TIM_Base_Start+0xd8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d115      	bne.n	800ab70 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689a      	ldr	r2, [r3, #8]
 800ab4a:	4b19      	ldr	r3, [pc, #100]	@ (800abb0 <HAL_TIM_Base_Start+0xdc>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b06      	cmp	r3, #6
 800ab54:	d015      	beq.n	800ab82 <HAL_TIM_Base_Start+0xae>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab5c:	d011      	beq.n	800ab82 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f042 0201 	orr.w	r2, r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab6e:	e008      	b.n	800ab82 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0201 	orr.w	r2, r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	e000      	b.n	800ab84 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	40010000 	.word	0x40010000
 800ab98:	40000400 	.word	0x40000400
 800ab9c:	40000800 	.word	0x40000800
 800aba0:	40000c00 	.word	0x40000c00
 800aba4:	40010400 	.word	0x40010400
 800aba8:	40001800 	.word	0x40001800
 800abac:	40014000 	.word	0x40014000
 800abb0:	00010007 	.word	0x00010007

0800abb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d001      	beq.n	800abcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e054      	b.n	800ac76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2202      	movs	r2, #2
 800abd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68da      	ldr	r2, [r3, #12]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f042 0201 	orr.w	r2, r2, #1
 800abe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a26      	ldr	r2, [pc, #152]	@ (800ac84 <HAL_TIM_Base_Start_IT+0xd0>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d022      	beq.n	800ac34 <HAL_TIM_Base_Start_IT+0x80>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abf6:	d01d      	beq.n	800ac34 <HAL_TIM_Base_Start_IT+0x80>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a22      	ldr	r2, [pc, #136]	@ (800ac88 <HAL_TIM_Base_Start_IT+0xd4>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d018      	beq.n	800ac34 <HAL_TIM_Base_Start_IT+0x80>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a21      	ldr	r2, [pc, #132]	@ (800ac8c <HAL_TIM_Base_Start_IT+0xd8>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d013      	beq.n	800ac34 <HAL_TIM_Base_Start_IT+0x80>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a1f      	ldr	r2, [pc, #124]	@ (800ac90 <HAL_TIM_Base_Start_IT+0xdc>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00e      	beq.n	800ac34 <HAL_TIM_Base_Start_IT+0x80>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a1e      	ldr	r2, [pc, #120]	@ (800ac94 <HAL_TIM_Base_Start_IT+0xe0>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d009      	beq.n	800ac34 <HAL_TIM_Base_Start_IT+0x80>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a1c      	ldr	r2, [pc, #112]	@ (800ac98 <HAL_TIM_Base_Start_IT+0xe4>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d004      	beq.n	800ac34 <HAL_TIM_Base_Start_IT+0x80>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a1b      	ldr	r2, [pc, #108]	@ (800ac9c <HAL_TIM_Base_Start_IT+0xe8>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d115      	bne.n	800ac60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689a      	ldr	r2, [r3, #8]
 800ac3a:	4b19      	ldr	r3, [pc, #100]	@ (800aca0 <HAL_TIM_Base_Start_IT+0xec>)
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2b06      	cmp	r3, #6
 800ac44:	d015      	beq.n	800ac72 <HAL_TIM_Base_Start_IT+0xbe>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac4c:	d011      	beq.n	800ac72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f042 0201 	orr.w	r2, r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac5e:	e008      	b.n	800ac72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f042 0201 	orr.w	r2, r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	e000      	b.n	800ac74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	40010000 	.word	0x40010000
 800ac88:	40000400 	.word	0x40000400
 800ac8c:	40000800 	.word	0x40000800
 800ac90:	40000c00 	.word	0x40000c00
 800ac94:	40010400 	.word	0x40010400
 800ac98:	40001800 	.word	0x40001800
 800ac9c:	40014000 	.word	0x40014000
 800aca0:	00010007 	.word	0x00010007

0800aca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	f003 0302 	and.w	r3, r3, #2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d020      	beq.n	800ad08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f003 0302 	and.w	r3, r3, #2
 800accc:	2b00      	cmp	r3, #0
 800acce:	d01b      	beq.n	800ad08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f06f 0202 	mvn.w	r2, #2
 800acd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	f003 0303 	and.w	r3, r3, #3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f9e2 	bl	800b0b8 <HAL_TIM_IC_CaptureCallback>
 800acf4:	e005      	b.n	800ad02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f9d4 	bl	800b0a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f9e5 	bl	800b0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f003 0304 	and.w	r3, r3, #4
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d020      	beq.n	800ad54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d01b      	beq.n	800ad54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f06f 0204 	mvn.w	r2, #4
 800ad24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2202      	movs	r2, #2
 800ad2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d003      	beq.n	800ad42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f9bc 	bl	800b0b8 <HAL_TIM_IC_CaptureCallback>
 800ad40:	e005      	b.n	800ad4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f9ae 	bl	800b0a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f9bf 	bl	800b0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f003 0308 	and.w	r3, r3, #8
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d020      	beq.n	800ada0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f003 0308 	and.w	r3, r3, #8
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d01b      	beq.n	800ada0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f06f 0208 	mvn.w	r2, #8
 800ad70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2204      	movs	r2, #4
 800ad76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	f003 0303 	and.w	r3, r3, #3
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f996 	bl	800b0b8 <HAL_TIM_IC_CaptureCallback>
 800ad8c:	e005      	b.n	800ad9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 f988 	bl	800b0a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f999 	bl	800b0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	f003 0310 	and.w	r3, r3, #16
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d020      	beq.n	800adec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f003 0310 	and.w	r3, r3, #16
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01b      	beq.n	800adec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f06f 0210 	mvn.w	r2, #16
 800adbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2208      	movs	r2, #8
 800adc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f970 	bl	800b0b8 <HAL_TIM_IC_CaptureCallback>
 800add8:	e005      	b.n	800ade6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f962 	bl	800b0a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f973 	bl	800b0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00c      	beq.n	800ae10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d007      	beq.n	800ae10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f06f 0201 	mvn.w	r2, #1
 800ae08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7f6 f9aa 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d104      	bne.n	800ae24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00c      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ae36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fb31 	bl	800b4a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00c      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d007      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fb29 	bl	800b4b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00c      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d007      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ae7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f92d 	bl	800b0e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f003 0320 	and.w	r3, r3, #32
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00c      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 0320 	and.w	r3, r3, #32
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d007      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f06f 0220 	mvn.w	r2, #32
 800aea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 faf1 	bl	800b48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aeaa:	bf00      	nop
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d101      	bne.n	800aed0 <HAL_TIM_ConfigClockSource+0x1c>
 800aecc:	2302      	movs	r3, #2
 800aece:	e0dc      	b.n	800b08a <HAL_TIM_ConfigClockSource+0x1d6>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2202      	movs	r2, #2
 800aedc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	4b6a      	ldr	r3, [pc, #424]	@ (800b094 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aeec:	4013      	ands	r3, r2
 800aeee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a64      	ldr	r2, [pc, #400]	@ (800b098 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af06:	4293      	cmp	r3, r2
 800af08:	f000 80a9 	beq.w	800b05e <HAL_TIM_ConfigClockSource+0x1aa>
 800af0c:	4a62      	ldr	r2, [pc, #392]	@ (800b098 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	f200 80ae 	bhi.w	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af14:	4a61      	ldr	r2, [pc, #388]	@ (800b09c <HAL_TIM_ConfigClockSource+0x1e8>)
 800af16:	4293      	cmp	r3, r2
 800af18:	f000 80a1 	beq.w	800b05e <HAL_TIM_ConfigClockSource+0x1aa>
 800af1c:	4a5f      	ldr	r2, [pc, #380]	@ (800b09c <HAL_TIM_ConfigClockSource+0x1e8>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	f200 80a6 	bhi.w	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af24:	4a5e      	ldr	r2, [pc, #376]	@ (800b0a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af26:	4293      	cmp	r3, r2
 800af28:	f000 8099 	beq.w	800b05e <HAL_TIM_ConfigClockSource+0x1aa>
 800af2c:	4a5c      	ldr	r2, [pc, #368]	@ (800b0a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	f200 809e 	bhi.w	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800af38:	f000 8091 	beq.w	800b05e <HAL_TIM_ConfigClockSource+0x1aa>
 800af3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800af40:	f200 8096 	bhi.w	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af48:	f000 8089 	beq.w	800b05e <HAL_TIM_ConfigClockSource+0x1aa>
 800af4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af50:	f200 808e 	bhi.w	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af58:	d03e      	beq.n	800afd8 <HAL_TIM_ConfigClockSource+0x124>
 800af5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af5e:	f200 8087 	bhi.w	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af66:	f000 8086 	beq.w	800b076 <HAL_TIM_ConfigClockSource+0x1c2>
 800af6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af6e:	d87f      	bhi.n	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af70:	2b70      	cmp	r3, #112	@ 0x70
 800af72:	d01a      	beq.n	800afaa <HAL_TIM_ConfigClockSource+0xf6>
 800af74:	2b70      	cmp	r3, #112	@ 0x70
 800af76:	d87b      	bhi.n	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af78:	2b60      	cmp	r3, #96	@ 0x60
 800af7a:	d050      	beq.n	800b01e <HAL_TIM_ConfigClockSource+0x16a>
 800af7c:	2b60      	cmp	r3, #96	@ 0x60
 800af7e:	d877      	bhi.n	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af80:	2b50      	cmp	r3, #80	@ 0x50
 800af82:	d03c      	beq.n	800affe <HAL_TIM_ConfigClockSource+0x14a>
 800af84:	2b50      	cmp	r3, #80	@ 0x50
 800af86:	d873      	bhi.n	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af88:	2b40      	cmp	r3, #64	@ 0x40
 800af8a:	d058      	beq.n	800b03e <HAL_TIM_ConfigClockSource+0x18a>
 800af8c:	2b40      	cmp	r3, #64	@ 0x40
 800af8e:	d86f      	bhi.n	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af90:	2b30      	cmp	r3, #48	@ 0x30
 800af92:	d064      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0x1aa>
 800af94:	2b30      	cmp	r3, #48	@ 0x30
 800af96:	d86b      	bhi.n	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800af98:	2b20      	cmp	r3, #32
 800af9a:	d060      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0x1aa>
 800af9c:	2b20      	cmp	r3, #32
 800af9e:	d867      	bhi.n	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d05c      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0x1aa>
 800afa4:	2b10      	cmp	r3, #16
 800afa6:	d05a      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0x1aa>
 800afa8:	e062      	b.n	800b070 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afba:	f000 f9b9 	bl	800b330 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800afcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	609a      	str	r2, [r3, #8]
      break;
 800afd6:	e04f      	b.n	800b078 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800afe8:	f000 f9a2 	bl	800b330 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	689a      	ldr	r2, [r3, #8]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800affa:	609a      	str	r2, [r3, #8]
      break;
 800affc:	e03c      	b.n	800b078 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b00a:	461a      	mov	r2, r3
 800b00c:	f000 f912 	bl	800b234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2150      	movs	r1, #80	@ 0x50
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f96c 	bl	800b2f4 <TIM_ITRx_SetConfig>
      break;
 800b01c:	e02c      	b.n	800b078 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b02a:	461a      	mov	r2, r3
 800b02c:	f000 f931 	bl	800b292 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2160      	movs	r1, #96	@ 0x60
 800b036:	4618      	mov	r0, r3
 800b038:	f000 f95c 	bl	800b2f4 <TIM_ITRx_SetConfig>
      break;
 800b03c:	e01c      	b.n	800b078 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b04a:	461a      	mov	r2, r3
 800b04c:	f000 f8f2 	bl	800b234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2140      	movs	r1, #64	@ 0x40
 800b056:	4618      	mov	r0, r3
 800b058:	f000 f94c 	bl	800b2f4 <TIM_ITRx_SetConfig>
      break;
 800b05c:	e00c      	b.n	800b078 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4619      	mov	r1, r3
 800b068:	4610      	mov	r0, r2
 800b06a:	f000 f943 	bl	800b2f4 <TIM_ITRx_SetConfig>
      break;
 800b06e:	e003      	b.n	800b078 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	73fb      	strb	r3, [r7, #15]
      break;
 800b074:	e000      	b.n	800b078 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b088:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	ffceff88 	.word	0xffceff88
 800b098:	00100040 	.word	0x00100040
 800b09c:	00100030 	.word	0x00100030
 800b0a0:	00100020 	.word	0x00100020

0800b0a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a43      	ldr	r2, [pc, #268]	@ (800b214 <TIM_Base_SetConfig+0x120>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d013      	beq.n	800b134 <TIM_Base_SetConfig+0x40>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b112:	d00f      	beq.n	800b134 <TIM_Base_SetConfig+0x40>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a40      	ldr	r2, [pc, #256]	@ (800b218 <TIM_Base_SetConfig+0x124>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d00b      	beq.n	800b134 <TIM_Base_SetConfig+0x40>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a3f      	ldr	r2, [pc, #252]	@ (800b21c <TIM_Base_SetConfig+0x128>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d007      	beq.n	800b134 <TIM_Base_SetConfig+0x40>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a3e      	ldr	r2, [pc, #248]	@ (800b220 <TIM_Base_SetConfig+0x12c>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d003      	beq.n	800b134 <TIM_Base_SetConfig+0x40>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a3d      	ldr	r2, [pc, #244]	@ (800b224 <TIM_Base_SetConfig+0x130>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d108      	bne.n	800b146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b13a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a32      	ldr	r2, [pc, #200]	@ (800b214 <TIM_Base_SetConfig+0x120>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d01f      	beq.n	800b18e <TIM_Base_SetConfig+0x9a>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b154:	d01b      	beq.n	800b18e <TIM_Base_SetConfig+0x9a>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a2f      	ldr	r2, [pc, #188]	@ (800b218 <TIM_Base_SetConfig+0x124>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d017      	beq.n	800b18e <TIM_Base_SetConfig+0x9a>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a2e      	ldr	r2, [pc, #184]	@ (800b21c <TIM_Base_SetConfig+0x128>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d013      	beq.n	800b18e <TIM_Base_SetConfig+0x9a>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a2d      	ldr	r2, [pc, #180]	@ (800b220 <TIM_Base_SetConfig+0x12c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d00f      	beq.n	800b18e <TIM_Base_SetConfig+0x9a>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a2c      	ldr	r2, [pc, #176]	@ (800b224 <TIM_Base_SetConfig+0x130>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d00b      	beq.n	800b18e <TIM_Base_SetConfig+0x9a>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a2b      	ldr	r2, [pc, #172]	@ (800b228 <TIM_Base_SetConfig+0x134>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d007      	beq.n	800b18e <TIM_Base_SetConfig+0x9a>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a2a      	ldr	r2, [pc, #168]	@ (800b22c <TIM_Base_SetConfig+0x138>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d003      	beq.n	800b18e <TIM_Base_SetConfig+0x9a>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a29      	ldr	r2, [pc, #164]	@ (800b230 <TIM_Base_SetConfig+0x13c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d108      	bne.n	800b1a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	695b      	ldr	r3, [r3, #20]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	689a      	ldr	r2, [r3, #8]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a14      	ldr	r2, [pc, #80]	@ (800b214 <TIM_Base_SetConfig+0x120>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d00f      	beq.n	800b1e6 <TIM_Base_SetConfig+0xf2>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a16      	ldr	r2, [pc, #88]	@ (800b224 <TIM_Base_SetConfig+0x130>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d00b      	beq.n	800b1e6 <TIM_Base_SetConfig+0xf2>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a15      	ldr	r2, [pc, #84]	@ (800b228 <TIM_Base_SetConfig+0x134>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d007      	beq.n	800b1e6 <TIM_Base_SetConfig+0xf2>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a14      	ldr	r2, [pc, #80]	@ (800b22c <TIM_Base_SetConfig+0x138>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d003      	beq.n	800b1e6 <TIM_Base_SetConfig+0xf2>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a13      	ldr	r2, [pc, #76]	@ (800b230 <TIM_Base_SetConfig+0x13c>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d103      	bne.n	800b1ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	691a      	ldr	r2, [r3, #16]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f043 0204 	orr.w	r2, r3, #4
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	601a      	str	r2, [r3, #0]
}
 800b206:	bf00      	nop
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	40010000 	.word	0x40010000
 800b218:	40000400 	.word	0x40000400
 800b21c:	40000800 	.word	0x40000800
 800b220:	40000c00 	.word	0x40000c00
 800b224:	40010400 	.word	0x40010400
 800b228:	40014000 	.word	0x40014000
 800b22c:	40014400 	.word	0x40014400
 800b230:	40014800 	.word	0x40014800

0800b234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6a1b      	ldr	r3, [r3, #32]
 800b244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	f023 0201 	bic.w	r2, r3, #1
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b25e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	011b      	lsls	r3, r3, #4
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	4313      	orrs	r3, r2
 800b268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f023 030a 	bic.w	r3, r3, #10
 800b270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	4313      	orrs	r3, r2
 800b278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	621a      	str	r2, [r3, #32]
}
 800b286:	bf00      	nop
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b292:	b480      	push	{r7}
 800b294:	b087      	sub	sp, #28
 800b296:	af00      	add	r7, sp, #0
 800b298:	60f8      	str	r0, [r7, #12]
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6a1b      	ldr	r3, [r3, #32]
 800b2a8:	f023 0210 	bic.w	r2, r3, #16
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b2bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	031b      	lsls	r3, r3, #12
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b2ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	011b      	lsls	r3, r3, #4
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	621a      	str	r2, [r3, #32]
}
 800b2e6:	bf00      	nop
 800b2e8:	371c      	adds	r7, #28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
	...

0800b2f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4b09      	ldr	r3, [pc, #36]	@ (800b32c <TIM_ITRx_SetConfig+0x38>)
 800b308:	4013      	ands	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	4313      	orrs	r3, r2
 800b312:	f043 0307 	orr.w	r3, r3, #7
 800b316:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	609a      	str	r2, [r3, #8]
}
 800b31e:	bf00      	nop
 800b320:	3714      	adds	r7, #20
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	ffcfff8f 	.word	0xffcfff8f

0800b330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b330:	b480      	push	{r7}
 800b332:	b087      	sub	sp, #28
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
 800b33c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b34a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	021a      	lsls	r2, r3, #8
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	431a      	orrs	r2, r3
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	4313      	orrs	r3, r2
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	609a      	str	r2, [r3, #8]
}
 800b364:	bf00      	nop
 800b366:	371c      	adds	r7, #28
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b380:	2b01      	cmp	r3, #1
 800b382:	d101      	bne.n	800b388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b384:	2302      	movs	r3, #2
 800b386:	e06d      	b.n	800b464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2202      	movs	r2, #2
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a30      	ldr	r2, [pc, #192]	@ (800b470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d004      	beq.n	800b3bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a2f      	ldr	r2, [pc, #188]	@ (800b474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d108      	bne.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b3c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a20      	ldr	r2, [pc, #128]	@ (800b470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d022      	beq.n	800b438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3fa:	d01d      	beq.n	800b438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a1d      	ldr	r2, [pc, #116]	@ (800b478 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d018      	beq.n	800b438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a1c      	ldr	r2, [pc, #112]	@ (800b47c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d013      	beq.n	800b438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a1a      	ldr	r2, [pc, #104]	@ (800b480 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d00e      	beq.n	800b438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a15      	ldr	r2, [pc, #84]	@ (800b474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d009      	beq.n	800b438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a16      	ldr	r2, [pc, #88]	@ (800b484 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d004      	beq.n	800b438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a15      	ldr	r2, [pc, #84]	@ (800b488 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d10c      	bne.n	800b452 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b43e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	4313      	orrs	r3, r2
 800b448:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	40010000 	.word	0x40010000
 800b474:	40010400 	.word	0x40010400
 800b478:	40000400 	.word	0x40000400
 800b47c:	40000800 	.word	0x40000800
 800b480:	40000c00 	.word	0x40000c00
 800b484:	40001800 	.word	0x40001800
 800b488:	40014000 	.word	0x40014000

0800b48c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e042      	b.n	800b560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d106      	bne.n	800b4f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7f5 ffeb 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2224      	movs	r2, #36	@ 0x24
 800b4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f022 0201 	bic.w	r2, r2, #1
 800b508:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fe1e 	bl	800c154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f8b3 	bl	800b684 <UART_SetConfig>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b01      	cmp	r3, #1
 800b522:	d101      	bne.n	800b528 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e01b      	b.n	800b560 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	689a      	ldr	r2, [r3, #8]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f042 0201 	orr.w	r2, r2, #1
 800b556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 fe9d 	bl	800c298 <UART_CheckIdleState>
 800b55e:	4603      	mov	r3, r0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08a      	sub	sp, #40	@ 0x28
 800b56c:	af02      	add	r7, sp, #8
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	4613      	mov	r3, r2
 800b576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b57e:	2b20      	cmp	r3, #32
 800b580:	d17b      	bne.n	800b67a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <HAL_UART_Transmit+0x26>
 800b588:	88fb      	ldrh	r3, [r7, #6]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	e074      	b.n	800b67c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2221      	movs	r2, #33	@ 0x21
 800b59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5a2:	f7f6 fbdf 	bl	8001d64 <HAL_GetTick>
 800b5a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	88fa      	ldrh	r2, [r7, #6]
 800b5ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	88fa      	ldrh	r2, [r7, #6]
 800b5b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5c0:	d108      	bne.n	800b5d4 <HAL_UART_Transmit+0x6c>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d104      	bne.n	800b5d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	61bb      	str	r3, [r7, #24]
 800b5d2:	e003      	b.n	800b5dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b5dc:	e030      	b.n	800b640 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2180      	movs	r1, #128	@ 0x80
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 feff 	bl	800c3ec <UART_WaitOnFlagUntilTimeout>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d005      	beq.n	800b600 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2220      	movs	r2, #32
 800b5f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e03d      	b.n	800b67c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10b      	bne.n	800b61e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b614:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	3302      	adds	r3, #2
 800b61a:	61bb      	str	r3, [r7, #24]
 800b61c:	e007      	b.n	800b62e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	3301      	adds	r3, #1
 800b62c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b634:	b29b      	uxth	r3, r3
 800b636:	3b01      	subs	r3, #1
 800b638:	b29a      	uxth	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b646:	b29b      	uxth	r3, r3
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1c8      	bne.n	800b5de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2200      	movs	r2, #0
 800b654:	2140      	movs	r1, #64	@ 0x40
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f000 fec8 	bl	800c3ec <UART_WaitOnFlagUntilTimeout>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d005      	beq.n	800b66e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2220      	movs	r2, #32
 800b666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b66a:	2303      	movs	r3, #3
 800b66c:	e006      	b.n	800b67c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2220      	movs	r2, #32
 800b672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	e000      	b.n	800b67c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b67a:	2302      	movs	r3, #2
  }
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3720      	adds	r7, #32
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b688:	b092      	sub	sp, #72	@ 0x48
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	689a      	ldr	r2, [r3, #8]
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	431a      	orrs	r2, r3
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	69db      	ldr	r3, [r3, #28]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	4bbe      	ldr	r3, [pc, #760]	@ (800b9ac <UART_SetConfig+0x328>)
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	6812      	ldr	r2, [r2, #0]
 800b6ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	68da      	ldr	r2, [r3, #12]
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	430a      	orrs	r2, r1
 800b6d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4ab3      	ldr	r2, [pc, #716]	@ (800b9b0 <UART_SetConfig+0x32c>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d004      	beq.n	800b6f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	6a1b      	ldr	r3, [r3, #32]
 800b6ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	689a      	ldr	r2, [r3, #8]
 800b6f6:	4baf      	ldr	r3, [pc, #700]	@ (800b9b4 <UART_SetConfig+0x330>)
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	6812      	ldr	r2, [r2, #0]
 800b6fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b700:	430b      	orrs	r3, r1
 800b702:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b70a:	f023 010f 	bic.w	r1, r3, #15
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	430a      	orrs	r2, r1
 800b718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4aa6      	ldr	r2, [pc, #664]	@ (800b9b8 <UART_SetConfig+0x334>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d177      	bne.n	800b814 <UART_SetConfig+0x190>
 800b724:	4ba5      	ldr	r3, [pc, #660]	@ (800b9bc <UART_SetConfig+0x338>)
 800b726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b72c:	2b28      	cmp	r3, #40	@ 0x28
 800b72e:	d86d      	bhi.n	800b80c <UART_SetConfig+0x188>
 800b730:	a201      	add	r2, pc, #4	@ (adr r2, 800b738 <UART_SetConfig+0xb4>)
 800b732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b736:	bf00      	nop
 800b738:	0800b7dd 	.word	0x0800b7dd
 800b73c:	0800b80d 	.word	0x0800b80d
 800b740:	0800b80d 	.word	0x0800b80d
 800b744:	0800b80d 	.word	0x0800b80d
 800b748:	0800b80d 	.word	0x0800b80d
 800b74c:	0800b80d 	.word	0x0800b80d
 800b750:	0800b80d 	.word	0x0800b80d
 800b754:	0800b80d 	.word	0x0800b80d
 800b758:	0800b7e5 	.word	0x0800b7e5
 800b75c:	0800b80d 	.word	0x0800b80d
 800b760:	0800b80d 	.word	0x0800b80d
 800b764:	0800b80d 	.word	0x0800b80d
 800b768:	0800b80d 	.word	0x0800b80d
 800b76c:	0800b80d 	.word	0x0800b80d
 800b770:	0800b80d 	.word	0x0800b80d
 800b774:	0800b80d 	.word	0x0800b80d
 800b778:	0800b7ed 	.word	0x0800b7ed
 800b77c:	0800b80d 	.word	0x0800b80d
 800b780:	0800b80d 	.word	0x0800b80d
 800b784:	0800b80d 	.word	0x0800b80d
 800b788:	0800b80d 	.word	0x0800b80d
 800b78c:	0800b80d 	.word	0x0800b80d
 800b790:	0800b80d 	.word	0x0800b80d
 800b794:	0800b80d 	.word	0x0800b80d
 800b798:	0800b7f5 	.word	0x0800b7f5
 800b79c:	0800b80d 	.word	0x0800b80d
 800b7a0:	0800b80d 	.word	0x0800b80d
 800b7a4:	0800b80d 	.word	0x0800b80d
 800b7a8:	0800b80d 	.word	0x0800b80d
 800b7ac:	0800b80d 	.word	0x0800b80d
 800b7b0:	0800b80d 	.word	0x0800b80d
 800b7b4:	0800b80d 	.word	0x0800b80d
 800b7b8:	0800b7fd 	.word	0x0800b7fd
 800b7bc:	0800b80d 	.word	0x0800b80d
 800b7c0:	0800b80d 	.word	0x0800b80d
 800b7c4:	0800b80d 	.word	0x0800b80d
 800b7c8:	0800b80d 	.word	0x0800b80d
 800b7cc:	0800b80d 	.word	0x0800b80d
 800b7d0:	0800b80d 	.word	0x0800b80d
 800b7d4:	0800b80d 	.word	0x0800b80d
 800b7d8:	0800b805 	.word	0x0800b805
 800b7dc:	2301      	movs	r3, #1
 800b7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7e2:	e222      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b7e4:	2304      	movs	r3, #4
 800b7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ea:	e21e      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b7ec:	2308      	movs	r3, #8
 800b7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7f2:	e21a      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b7f4:	2310      	movs	r3, #16
 800b7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7fa:	e216      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b7fc:	2320      	movs	r3, #32
 800b7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b802:	e212      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b804:	2340      	movs	r3, #64	@ 0x40
 800b806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b80a:	e20e      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b80c:	2380      	movs	r3, #128	@ 0x80
 800b80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b812:	e20a      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a69      	ldr	r2, [pc, #420]	@ (800b9c0 <UART_SetConfig+0x33c>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d130      	bne.n	800b880 <UART_SetConfig+0x1fc>
 800b81e:	4b67      	ldr	r3, [pc, #412]	@ (800b9bc <UART_SetConfig+0x338>)
 800b820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b822:	f003 0307 	and.w	r3, r3, #7
 800b826:	2b05      	cmp	r3, #5
 800b828:	d826      	bhi.n	800b878 <UART_SetConfig+0x1f4>
 800b82a:	a201      	add	r2, pc, #4	@ (adr r2, 800b830 <UART_SetConfig+0x1ac>)
 800b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b830:	0800b849 	.word	0x0800b849
 800b834:	0800b851 	.word	0x0800b851
 800b838:	0800b859 	.word	0x0800b859
 800b83c:	0800b861 	.word	0x0800b861
 800b840:	0800b869 	.word	0x0800b869
 800b844:	0800b871 	.word	0x0800b871
 800b848:	2300      	movs	r3, #0
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84e:	e1ec      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b850:	2304      	movs	r3, #4
 800b852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b856:	e1e8      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b858:	2308      	movs	r3, #8
 800b85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b85e:	e1e4      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b860:	2310      	movs	r3, #16
 800b862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b866:	e1e0      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b868:	2320      	movs	r3, #32
 800b86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86e:	e1dc      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b870:	2340      	movs	r3, #64	@ 0x40
 800b872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b876:	e1d8      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b878:	2380      	movs	r3, #128	@ 0x80
 800b87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b87e:	e1d4      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a4f      	ldr	r2, [pc, #316]	@ (800b9c4 <UART_SetConfig+0x340>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d130      	bne.n	800b8ec <UART_SetConfig+0x268>
 800b88a:	4b4c      	ldr	r3, [pc, #304]	@ (800b9bc <UART_SetConfig+0x338>)
 800b88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	2b05      	cmp	r3, #5
 800b894:	d826      	bhi.n	800b8e4 <UART_SetConfig+0x260>
 800b896:	a201      	add	r2, pc, #4	@ (adr r2, 800b89c <UART_SetConfig+0x218>)
 800b898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89c:	0800b8b5 	.word	0x0800b8b5
 800b8a0:	0800b8bd 	.word	0x0800b8bd
 800b8a4:	0800b8c5 	.word	0x0800b8c5
 800b8a8:	0800b8cd 	.word	0x0800b8cd
 800b8ac:	0800b8d5 	.word	0x0800b8d5
 800b8b0:	0800b8dd 	.word	0x0800b8dd
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ba:	e1b6      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b8bc:	2304      	movs	r3, #4
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8c2:	e1b2      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b8c4:	2308      	movs	r3, #8
 800b8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ca:	e1ae      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b8cc:	2310      	movs	r3, #16
 800b8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8d2:	e1aa      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b8d4:	2320      	movs	r3, #32
 800b8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8da:	e1a6      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b8dc:	2340      	movs	r3, #64	@ 0x40
 800b8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e2:	e1a2      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b8e4:	2380      	movs	r3, #128	@ 0x80
 800b8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ea:	e19e      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a35      	ldr	r2, [pc, #212]	@ (800b9c8 <UART_SetConfig+0x344>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d130      	bne.n	800b958 <UART_SetConfig+0x2d4>
 800b8f6:	4b31      	ldr	r3, [pc, #196]	@ (800b9bc <UART_SetConfig+0x338>)
 800b8f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8fa:	f003 0307 	and.w	r3, r3, #7
 800b8fe:	2b05      	cmp	r3, #5
 800b900:	d826      	bhi.n	800b950 <UART_SetConfig+0x2cc>
 800b902:	a201      	add	r2, pc, #4	@ (adr r2, 800b908 <UART_SetConfig+0x284>)
 800b904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b908:	0800b921 	.word	0x0800b921
 800b90c:	0800b929 	.word	0x0800b929
 800b910:	0800b931 	.word	0x0800b931
 800b914:	0800b939 	.word	0x0800b939
 800b918:	0800b941 	.word	0x0800b941
 800b91c:	0800b949 	.word	0x0800b949
 800b920:	2300      	movs	r3, #0
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b926:	e180      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b928:	2304      	movs	r3, #4
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92e:	e17c      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b930:	2308      	movs	r3, #8
 800b932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b936:	e178      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b938:	2310      	movs	r3, #16
 800b93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b93e:	e174      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b940:	2320      	movs	r3, #32
 800b942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b946:	e170      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b948:	2340      	movs	r3, #64	@ 0x40
 800b94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94e:	e16c      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b950:	2380      	movs	r3, #128	@ 0x80
 800b952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b956:	e168      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a1b      	ldr	r2, [pc, #108]	@ (800b9cc <UART_SetConfig+0x348>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d142      	bne.n	800b9e8 <UART_SetConfig+0x364>
 800b962:	4b16      	ldr	r3, [pc, #88]	@ (800b9bc <UART_SetConfig+0x338>)
 800b964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b05      	cmp	r3, #5
 800b96c:	d838      	bhi.n	800b9e0 <UART_SetConfig+0x35c>
 800b96e:	a201      	add	r2, pc, #4	@ (adr r2, 800b974 <UART_SetConfig+0x2f0>)
 800b970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b974:	0800b98d 	.word	0x0800b98d
 800b978:	0800b995 	.word	0x0800b995
 800b97c:	0800b99d 	.word	0x0800b99d
 800b980:	0800b9a5 	.word	0x0800b9a5
 800b984:	0800b9d1 	.word	0x0800b9d1
 800b988:	0800b9d9 	.word	0x0800b9d9
 800b98c:	2300      	movs	r3, #0
 800b98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b992:	e14a      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b994:	2304      	movs	r3, #4
 800b996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b99a:	e146      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b99c:	2308      	movs	r3, #8
 800b99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9a2:	e142      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b9a4:	2310      	movs	r3, #16
 800b9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9aa:	e13e      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b9ac:	cfff69f3 	.word	0xcfff69f3
 800b9b0:	58000c00 	.word	0x58000c00
 800b9b4:	11fff4ff 	.word	0x11fff4ff
 800b9b8:	40011000 	.word	0x40011000
 800b9bc:	58024400 	.word	0x58024400
 800b9c0:	40004400 	.word	0x40004400
 800b9c4:	40004800 	.word	0x40004800
 800b9c8:	40004c00 	.word	0x40004c00
 800b9cc:	40005000 	.word	0x40005000
 800b9d0:	2320      	movs	r3, #32
 800b9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d6:	e128      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b9d8:	2340      	movs	r3, #64	@ 0x40
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9de:	e124      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b9e0:	2380      	movs	r3, #128	@ 0x80
 800b9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e6:	e120      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4acb      	ldr	r2, [pc, #812]	@ (800bd1c <UART_SetConfig+0x698>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d176      	bne.n	800bae0 <UART_SetConfig+0x45c>
 800b9f2:	4bcb      	ldr	r3, [pc, #812]	@ (800bd20 <UART_SetConfig+0x69c>)
 800b9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b9fa:	2b28      	cmp	r3, #40	@ 0x28
 800b9fc:	d86c      	bhi.n	800bad8 <UART_SetConfig+0x454>
 800b9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800ba04 <UART_SetConfig+0x380>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800baa9 	.word	0x0800baa9
 800ba08:	0800bad9 	.word	0x0800bad9
 800ba0c:	0800bad9 	.word	0x0800bad9
 800ba10:	0800bad9 	.word	0x0800bad9
 800ba14:	0800bad9 	.word	0x0800bad9
 800ba18:	0800bad9 	.word	0x0800bad9
 800ba1c:	0800bad9 	.word	0x0800bad9
 800ba20:	0800bad9 	.word	0x0800bad9
 800ba24:	0800bab1 	.word	0x0800bab1
 800ba28:	0800bad9 	.word	0x0800bad9
 800ba2c:	0800bad9 	.word	0x0800bad9
 800ba30:	0800bad9 	.word	0x0800bad9
 800ba34:	0800bad9 	.word	0x0800bad9
 800ba38:	0800bad9 	.word	0x0800bad9
 800ba3c:	0800bad9 	.word	0x0800bad9
 800ba40:	0800bad9 	.word	0x0800bad9
 800ba44:	0800bab9 	.word	0x0800bab9
 800ba48:	0800bad9 	.word	0x0800bad9
 800ba4c:	0800bad9 	.word	0x0800bad9
 800ba50:	0800bad9 	.word	0x0800bad9
 800ba54:	0800bad9 	.word	0x0800bad9
 800ba58:	0800bad9 	.word	0x0800bad9
 800ba5c:	0800bad9 	.word	0x0800bad9
 800ba60:	0800bad9 	.word	0x0800bad9
 800ba64:	0800bac1 	.word	0x0800bac1
 800ba68:	0800bad9 	.word	0x0800bad9
 800ba6c:	0800bad9 	.word	0x0800bad9
 800ba70:	0800bad9 	.word	0x0800bad9
 800ba74:	0800bad9 	.word	0x0800bad9
 800ba78:	0800bad9 	.word	0x0800bad9
 800ba7c:	0800bad9 	.word	0x0800bad9
 800ba80:	0800bad9 	.word	0x0800bad9
 800ba84:	0800bac9 	.word	0x0800bac9
 800ba88:	0800bad9 	.word	0x0800bad9
 800ba8c:	0800bad9 	.word	0x0800bad9
 800ba90:	0800bad9 	.word	0x0800bad9
 800ba94:	0800bad9 	.word	0x0800bad9
 800ba98:	0800bad9 	.word	0x0800bad9
 800ba9c:	0800bad9 	.word	0x0800bad9
 800baa0:	0800bad9 	.word	0x0800bad9
 800baa4:	0800bad1 	.word	0x0800bad1
 800baa8:	2301      	movs	r3, #1
 800baaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baae:	e0bc      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bab0:	2304      	movs	r3, #4
 800bab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab6:	e0b8      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bab8:	2308      	movs	r3, #8
 800baba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800babe:	e0b4      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bac0:	2310      	movs	r3, #16
 800bac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac6:	e0b0      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bac8:	2320      	movs	r3, #32
 800baca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bace:	e0ac      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bad0:	2340      	movs	r3, #64	@ 0x40
 800bad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad6:	e0a8      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bad8:	2380      	movs	r3, #128	@ 0x80
 800bada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bade:	e0a4      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a8f      	ldr	r2, [pc, #572]	@ (800bd24 <UART_SetConfig+0x6a0>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d130      	bne.n	800bb4c <UART_SetConfig+0x4c8>
 800baea:	4b8d      	ldr	r3, [pc, #564]	@ (800bd20 <UART_SetConfig+0x69c>)
 800baec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baee:	f003 0307 	and.w	r3, r3, #7
 800baf2:	2b05      	cmp	r3, #5
 800baf4:	d826      	bhi.n	800bb44 <UART_SetConfig+0x4c0>
 800baf6:	a201      	add	r2, pc, #4	@ (adr r2, 800bafc <UART_SetConfig+0x478>)
 800baf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bafc:	0800bb15 	.word	0x0800bb15
 800bb00:	0800bb1d 	.word	0x0800bb1d
 800bb04:	0800bb25 	.word	0x0800bb25
 800bb08:	0800bb2d 	.word	0x0800bb2d
 800bb0c:	0800bb35 	.word	0x0800bb35
 800bb10:	0800bb3d 	.word	0x0800bb3d
 800bb14:	2300      	movs	r3, #0
 800bb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1a:	e086      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb22:	e082      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb24:	2308      	movs	r3, #8
 800bb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2a:	e07e      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb32:	e07a      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb34:	2320      	movs	r3, #32
 800bb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb3a:	e076      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb3c:	2340      	movs	r3, #64	@ 0x40
 800bb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb42:	e072      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb44:	2380      	movs	r3, #128	@ 0x80
 800bb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb4a:	e06e      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a75      	ldr	r2, [pc, #468]	@ (800bd28 <UART_SetConfig+0x6a4>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d130      	bne.n	800bbb8 <UART_SetConfig+0x534>
 800bb56:	4b72      	ldr	r3, [pc, #456]	@ (800bd20 <UART_SetConfig+0x69c>)
 800bb58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb5a:	f003 0307 	and.w	r3, r3, #7
 800bb5e:	2b05      	cmp	r3, #5
 800bb60:	d826      	bhi.n	800bbb0 <UART_SetConfig+0x52c>
 800bb62:	a201      	add	r2, pc, #4	@ (adr r2, 800bb68 <UART_SetConfig+0x4e4>)
 800bb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb68:	0800bb81 	.word	0x0800bb81
 800bb6c:	0800bb89 	.word	0x0800bb89
 800bb70:	0800bb91 	.word	0x0800bb91
 800bb74:	0800bb99 	.word	0x0800bb99
 800bb78:	0800bba1 	.word	0x0800bba1
 800bb7c:	0800bba9 	.word	0x0800bba9
 800bb80:	2300      	movs	r3, #0
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb86:	e050      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb88:	2304      	movs	r3, #4
 800bb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8e:	e04c      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb90:	2308      	movs	r3, #8
 800bb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb96:	e048      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bb98:	2310      	movs	r3, #16
 800bb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb9e:	e044      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bba0:	2320      	movs	r3, #32
 800bba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bba6:	e040      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bba8:	2340      	movs	r3, #64	@ 0x40
 800bbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbae:	e03c      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bbb0:	2380      	movs	r3, #128	@ 0x80
 800bbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbb6:	e038      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a5b      	ldr	r2, [pc, #364]	@ (800bd2c <UART_SetConfig+0x6a8>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d130      	bne.n	800bc24 <UART_SetConfig+0x5a0>
 800bbc2:	4b57      	ldr	r3, [pc, #348]	@ (800bd20 <UART_SetConfig+0x69c>)
 800bbc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbc6:	f003 0307 	and.w	r3, r3, #7
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	d826      	bhi.n	800bc1c <UART_SetConfig+0x598>
 800bbce:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <UART_SetConfig+0x550>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bbed 	.word	0x0800bbed
 800bbd8:	0800bbf5 	.word	0x0800bbf5
 800bbdc:	0800bbfd 	.word	0x0800bbfd
 800bbe0:	0800bc05 	.word	0x0800bc05
 800bbe4:	0800bc0d 	.word	0x0800bc0d
 800bbe8:	0800bc15 	.word	0x0800bc15
 800bbec:	2302      	movs	r3, #2
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf2:	e01a      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbfa:	e016      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc02:	e012      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bc04:	2310      	movs	r3, #16
 800bc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc0a:	e00e      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bc0c:	2320      	movs	r3, #32
 800bc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc12:	e00a      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bc14:	2340      	movs	r3, #64	@ 0x40
 800bc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc1a:	e006      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bc1c:	2380      	movs	r3, #128	@ 0x80
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc22:	e002      	b.n	800bc2a <UART_SetConfig+0x5a6>
 800bc24:	2380      	movs	r3, #128	@ 0x80
 800bc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a3f      	ldr	r2, [pc, #252]	@ (800bd2c <UART_SetConfig+0x6a8>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	f040 80f8 	bne.w	800be26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc3a:	2b20      	cmp	r3, #32
 800bc3c:	dc46      	bgt.n	800bccc <UART_SetConfig+0x648>
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	f2c0 8082 	blt.w	800bd48 <UART_SetConfig+0x6c4>
 800bc44:	3b02      	subs	r3, #2
 800bc46:	2b1e      	cmp	r3, #30
 800bc48:	d87e      	bhi.n	800bd48 <UART_SetConfig+0x6c4>
 800bc4a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc50 <UART_SetConfig+0x5cc>)
 800bc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc50:	0800bcd3 	.word	0x0800bcd3
 800bc54:	0800bd49 	.word	0x0800bd49
 800bc58:	0800bcdb 	.word	0x0800bcdb
 800bc5c:	0800bd49 	.word	0x0800bd49
 800bc60:	0800bd49 	.word	0x0800bd49
 800bc64:	0800bd49 	.word	0x0800bd49
 800bc68:	0800bceb 	.word	0x0800bceb
 800bc6c:	0800bd49 	.word	0x0800bd49
 800bc70:	0800bd49 	.word	0x0800bd49
 800bc74:	0800bd49 	.word	0x0800bd49
 800bc78:	0800bd49 	.word	0x0800bd49
 800bc7c:	0800bd49 	.word	0x0800bd49
 800bc80:	0800bd49 	.word	0x0800bd49
 800bc84:	0800bd49 	.word	0x0800bd49
 800bc88:	0800bcfb 	.word	0x0800bcfb
 800bc8c:	0800bd49 	.word	0x0800bd49
 800bc90:	0800bd49 	.word	0x0800bd49
 800bc94:	0800bd49 	.word	0x0800bd49
 800bc98:	0800bd49 	.word	0x0800bd49
 800bc9c:	0800bd49 	.word	0x0800bd49
 800bca0:	0800bd49 	.word	0x0800bd49
 800bca4:	0800bd49 	.word	0x0800bd49
 800bca8:	0800bd49 	.word	0x0800bd49
 800bcac:	0800bd49 	.word	0x0800bd49
 800bcb0:	0800bd49 	.word	0x0800bd49
 800bcb4:	0800bd49 	.word	0x0800bd49
 800bcb8:	0800bd49 	.word	0x0800bd49
 800bcbc:	0800bd49 	.word	0x0800bd49
 800bcc0:	0800bd49 	.word	0x0800bd49
 800bcc4:	0800bd49 	.word	0x0800bd49
 800bcc8:	0800bd3b 	.word	0x0800bd3b
 800bccc:	2b40      	cmp	r3, #64	@ 0x40
 800bcce:	d037      	beq.n	800bd40 <UART_SetConfig+0x6bc>
 800bcd0:	e03a      	b.n	800bd48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bcd2:	f7fe f933 	bl	8009f3c <HAL_RCCEx_GetD3PCLK1Freq>
 800bcd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bcd8:	e03c      	b.n	800bd54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe f942 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bce8:	e034      	b.n	800bd54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcea:	f107 0318 	add.w	r3, r7, #24
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fe fa8e 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcf8:	e02c      	b.n	800bd54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcfa:	4b09      	ldr	r3, [pc, #36]	@ (800bd20 <UART_SetConfig+0x69c>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 0320 	and.w	r3, r3, #32
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d016      	beq.n	800bd34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd06:	4b06      	ldr	r3, [pc, #24]	@ (800bd20 <UART_SetConfig+0x69c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	08db      	lsrs	r3, r3, #3
 800bd0c:	f003 0303 	and.w	r3, r3, #3
 800bd10:	4a07      	ldr	r2, [pc, #28]	@ (800bd30 <UART_SetConfig+0x6ac>)
 800bd12:	fa22 f303 	lsr.w	r3, r2, r3
 800bd16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd18:	e01c      	b.n	800bd54 <UART_SetConfig+0x6d0>
 800bd1a:	bf00      	nop
 800bd1c:	40011400 	.word	0x40011400
 800bd20:	58024400 	.word	0x58024400
 800bd24:	40007800 	.word	0x40007800
 800bd28:	40007c00 	.word	0x40007c00
 800bd2c:	58000c00 	.word	0x58000c00
 800bd30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bd34:	4b9d      	ldr	r3, [pc, #628]	@ (800bfac <UART_SetConfig+0x928>)
 800bd36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd38:	e00c      	b.n	800bd54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd3a:	4b9d      	ldr	r3, [pc, #628]	@ (800bfb0 <UART_SetConfig+0x92c>)
 800bd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd3e:	e009      	b.n	800bd54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd46:	e005      	b.n	800bd54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bd52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 81de 	beq.w	800c118 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd60:	4a94      	ldr	r2, [pc, #592]	@ (800bfb4 <UART_SetConfig+0x930>)
 800bd62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd66:	461a      	mov	r2, r3
 800bd68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	685a      	ldr	r2, [r3, #4]
 800bd74:	4613      	mov	r3, r2
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	4413      	add	r3, r2
 800bd7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d305      	bcc.n	800bd8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d903      	bls.n	800bd94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bd92:	e1c1      	b.n	800c118 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd96:	2200      	movs	r2, #0
 800bd98:	60bb      	str	r3, [r7, #8]
 800bd9a:	60fa      	str	r2, [r7, #12]
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda0:	4a84      	ldr	r2, [pc, #528]	@ (800bfb4 <UART_SetConfig+0x930>)
 800bda2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	2200      	movs	r2, #0
 800bdaa:	603b      	str	r3, [r7, #0]
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bdb6:	f7f4 faeb 	bl	8000390 <__aeabi_uldivmod>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	f04f 0200 	mov.w	r2, #0
 800bdc6:	f04f 0300 	mov.w	r3, #0
 800bdca:	020b      	lsls	r3, r1, #8
 800bdcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bdd0:	0202      	lsls	r2, r0, #8
 800bdd2:	6979      	ldr	r1, [r7, #20]
 800bdd4:	6849      	ldr	r1, [r1, #4]
 800bdd6:	0849      	lsrs	r1, r1, #1
 800bdd8:	2000      	movs	r0, #0
 800bdda:	460c      	mov	r4, r1
 800bddc:	4605      	mov	r5, r0
 800bdde:	eb12 0804 	adds.w	r8, r2, r4
 800bde2:	eb43 0905 	adc.w	r9, r3, r5
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	469a      	mov	sl, r3
 800bdee:	4693      	mov	fp, r2
 800bdf0:	4652      	mov	r2, sl
 800bdf2:	465b      	mov	r3, fp
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	4649      	mov	r1, r9
 800bdf8:	f7f4 faca 	bl	8000390 <__aeabi_uldivmod>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4613      	mov	r3, r2
 800be02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be0a:	d308      	bcc.n	800be1e <UART_SetConfig+0x79a>
 800be0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be12:	d204      	bcs.n	800be1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be1a:	60da      	str	r2, [r3, #12]
 800be1c:	e17c      	b.n	800c118 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800be24:	e178      	b.n	800c118 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be2e:	f040 80c5 	bne.w	800bfbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800be32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be36:	2b20      	cmp	r3, #32
 800be38:	dc48      	bgt.n	800becc <UART_SetConfig+0x848>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	db7b      	blt.n	800bf36 <UART_SetConfig+0x8b2>
 800be3e:	2b20      	cmp	r3, #32
 800be40:	d879      	bhi.n	800bf36 <UART_SetConfig+0x8b2>
 800be42:	a201      	add	r2, pc, #4	@ (adr r2, 800be48 <UART_SetConfig+0x7c4>)
 800be44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be48:	0800bed3 	.word	0x0800bed3
 800be4c:	0800bedb 	.word	0x0800bedb
 800be50:	0800bf37 	.word	0x0800bf37
 800be54:	0800bf37 	.word	0x0800bf37
 800be58:	0800bee3 	.word	0x0800bee3
 800be5c:	0800bf37 	.word	0x0800bf37
 800be60:	0800bf37 	.word	0x0800bf37
 800be64:	0800bf37 	.word	0x0800bf37
 800be68:	0800bef3 	.word	0x0800bef3
 800be6c:	0800bf37 	.word	0x0800bf37
 800be70:	0800bf37 	.word	0x0800bf37
 800be74:	0800bf37 	.word	0x0800bf37
 800be78:	0800bf37 	.word	0x0800bf37
 800be7c:	0800bf37 	.word	0x0800bf37
 800be80:	0800bf37 	.word	0x0800bf37
 800be84:	0800bf37 	.word	0x0800bf37
 800be88:	0800bf03 	.word	0x0800bf03
 800be8c:	0800bf37 	.word	0x0800bf37
 800be90:	0800bf37 	.word	0x0800bf37
 800be94:	0800bf37 	.word	0x0800bf37
 800be98:	0800bf37 	.word	0x0800bf37
 800be9c:	0800bf37 	.word	0x0800bf37
 800bea0:	0800bf37 	.word	0x0800bf37
 800bea4:	0800bf37 	.word	0x0800bf37
 800bea8:	0800bf37 	.word	0x0800bf37
 800beac:	0800bf37 	.word	0x0800bf37
 800beb0:	0800bf37 	.word	0x0800bf37
 800beb4:	0800bf37 	.word	0x0800bf37
 800beb8:	0800bf37 	.word	0x0800bf37
 800bebc:	0800bf37 	.word	0x0800bf37
 800bec0:	0800bf37 	.word	0x0800bf37
 800bec4:	0800bf37 	.word	0x0800bf37
 800bec8:	0800bf29 	.word	0x0800bf29
 800becc:	2b40      	cmp	r3, #64	@ 0x40
 800bece:	d02e      	beq.n	800bf2e <UART_SetConfig+0x8aa>
 800bed0:	e031      	b.n	800bf36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bed2:	f7fc f83b 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800bed6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bed8:	e033      	b.n	800bf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800beda:	f7fc f84d 	bl	8007f78 <HAL_RCC_GetPCLK2Freq>
 800bede:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bee0:	e02f      	b.n	800bf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe f83e 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800beec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bef0:	e027      	b.n	800bf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bef2:	f107 0318 	add.w	r3, r7, #24
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe f98a 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf00:	e01f      	b.n	800bf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf02:	4b2d      	ldr	r3, [pc, #180]	@ (800bfb8 <UART_SetConfig+0x934>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 0320 	and.w	r3, r3, #32
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d009      	beq.n	800bf22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf0e:	4b2a      	ldr	r3, [pc, #168]	@ (800bfb8 <UART_SetConfig+0x934>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	08db      	lsrs	r3, r3, #3
 800bf14:	f003 0303 	and.w	r3, r3, #3
 800bf18:	4a24      	ldr	r2, [pc, #144]	@ (800bfac <UART_SetConfig+0x928>)
 800bf1a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf20:	e00f      	b.n	800bf42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bf22:	4b22      	ldr	r3, [pc, #136]	@ (800bfac <UART_SetConfig+0x928>)
 800bf24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf26:	e00c      	b.n	800bf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf28:	4b21      	ldr	r3, [pc, #132]	@ (800bfb0 <UART_SetConfig+0x92c>)
 800bf2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf2c:	e009      	b.n	800bf42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf34:	e005      	b.n	800bf42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bf36:	2300      	movs	r3, #0
 800bf38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bf40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 80e7 	beq.w	800c118 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf4e:	4a19      	ldr	r2, [pc, #100]	@ (800bfb4 <UART_SetConfig+0x930>)
 800bf50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf54:	461a      	mov	r2, r3
 800bf56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf58:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf5c:	005a      	lsls	r2, r3, #1
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	085b      	lsrs	r3, r3, #1
 800bf64:	441a      	add	r2, r3
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf72:	2b0f      	cmp	r3, #15
 800bf74:	d916      	bls.n	800bfa4 <UART_SetConfig+0x920>
 800bf76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf7c:	d212      	bcs.n	800bfa4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	f023 030f 	bic.w	r3, r3, #15
 800bf86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8a:	085b      	lsrs	r3, r3, #1
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	f003 0307 	and.w	r3, r3, #7
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bf96:	4313      	orrs	r3, r2
 800bf98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bfa0:	60da      	str	r2, [r3, #12]
 800bfa2:	e0b9      	b.n	800c118 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bfaa:	e0b5      	b.n	800c118 <UART_SetConfig+0xa94>
 800bfac:	03d09000 	.word	0x03d09000
 800bfb0:	003d0900 	.word	0x003d0900
 800bfb4:	0800fd6c 	.word	0x0800fd6c
 800bfb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bfbc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bfc0:	2b20      	cmp	r3, #32
 800bfc2:	dc49      	bgt.n	800c058 <UART_SetConfig+0x9d4>
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	db7c      	blt.n	800c0c2 <UART_SetConfig+0xa3e>
 800bfc8:	2b20      	cmp	r3, #32
 800bfca:	d87a      	bhi.n	800c0c2 <UART_SetConfig+0xa3e>
 800bfcc:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd4 <UART_SetConfig+0x950>)
 800bfce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd2:	bf00      	nop
 800bfd4:	0800c05f 	.word	0x0800c05f
 800bfd8:	0800c067 	.word	0x0800c067
 800bfdc:	0800c0c3 	.word	0x0800c0c3
 800bfe0:	0800c0c3 	.word	0x0800c0c3
 800bfe4:	0800c06f 	.word	0x0800c06f
 800bfe8:	0800c0c3 	.word	0x0800c0c3
 800bfec:	0800c0c3 	.word	0x0800c0c3
 800bff0:	0800c0c3 	.word	0x0800c0c3
 800bff4:	0800c07f 	.word	0x0800c07f
 800bff8:	0800c0c3 	.word	0x0800c0c3
 800bffc:	0800c0c3 	.word	0x0800c0c3
 800c000:	0800c0c3 	.word	0x0800c0c3
 800c004:	0800c0c3 	.word	0x0800c0c3
 800c008:	0800c0c3 	.word	0x0800c0c3
 800c00c:	0800c0c3 	.word	0x0800c0c3
 800c010:	0800c0c3 	.word	0x0800c0c3
 800c014:	0800c08f 	.word	0x0800c08f
 800c018:	0800c0c3 	.word	0x0800c0c3
 800c01c:	0800c0c3 	.word	0x0800c0c3
 800c020:	0800c0c3 	.word	0x0800c0c3
 800c024:	0800c0c3 	.word	0x0800c0c3
 800c028:	0800c0c3 	.word	0x0800c0c3
 800c02c:	0800c0c3 	.word	0x0800c0c3
 800c030:	0800c0c3 	.word	0x0800c0c3
 800c034:	0800c0c3 	.word	0x0800c0c3
 800c038:	0800c0c3 	.word	0x0800c0c3
 800c03c:	0800c0c3 	.word	0x0800c0c3
 800c040:	0800c0c3 	.word	0x0800c0c3
 800c044:	0800c0c3 	.word	0x0800c0c3
 800c048:	0800c0c3 	.word	0x0800c0c3
 800c04c:	0800c0c3 	.word	0x0800c0c3
 800c050:	0800c0c3 	.word	0x0800c0c3
 800c054:	0800c0b5 	.word	0x0800c0b5
 800c058:	2b40      	cmp	r3, #64	@ 0x40
 800c05a:	d02e      	beq.n	800c0ba <UART_SetConfig+0xa36>
 800c05c:	e031      	b.n	800c0c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c05e:	f7fb ff75 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 800c062:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c064:	e033      	b.n	800c0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c066:	f7fb ff87 	bl	8007f78 <HAL_RCC_GetPCLK2Freq>
 800c06a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c06c:	e02f      	b.n	800c0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c06e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c072:	4618      	mov	r0, r3
 800c074:	f7fd ff78 	bl	8009f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c07c:	e027      	b.n	800c0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c07e:	f107 0318 	add.w	r3, r7, #24
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe f8c4 	bl	800a210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c08c:	e01f      	b.n	800c0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c08e:	4b2d      	ldr	r3, [pc, #180]	@ (800c144 <UART_SetConfig+0xac0>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 0320 	and.w	r3, r3, #32
 800c096:	2b00      	cmp	r3, #0
 800c098:	d009      	beq.n	800c0ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c09a:	4b2a      	ldr	r3, [pc, #168]	@ (800c144 <UART_SetConfig+0xac0>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	08db      	lsrs	r3, r3, #3
 800c0a0:	f003 0303 	and.w	r3, r3, #3
 800c0a4:	4a28      	ldr	r2, [pc, #160]	@ (800c148 <UART_SetConfig+0xac4>)
 800c0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0ac:	e00f      	b.n	800c0ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c0ae:	4b26      	ldr	r3, [pc, #152]	@ (800c148 <UART_SetConfig+0xac4>)
 800c0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b2:	e00c      	b.n	800c0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0b4:	4b25      	ldr	r3, [pc, #148]	@ (800c14c <UART_SetConfig+0xac8>)
 800c0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b8:	e009      	b.n	800c0ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0c0:	e005      	b.n	800c0ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c0cc:	bf00      	nop
    }

    if (pclk != 0U)
 800c0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d021      	beq.n	800c118 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c150 <UART_SetConfig+0xacc>)
 800c0da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0de:	461a      	mov	r2, r3
 800c0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	085b      	lsrs	r3, r3, #1
 800c0ec:	441a      	add	r2, r3
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fa:	2b0f      	cmp	r3, #15
 800c0fc:	d909      	bls.n	800c112 <UART_SetConfig+0xa8e>
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c104:	d205      	bcs.n	800c112 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c108:	b29a      	uxth	r2, r3
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	60da      	str	r2, [r3, #12]
 800c110:	e002      	b.n	800c118 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	2201      	movs	r2, #1
 800c124:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	2200      	movs	r2, #0
 800c12c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2200      	movs	r2, #0
 800c132:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c134:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3748      	adds	r7, #72	@ 0x48
 800c13c:	46bd      	mov	sp, r7
 800c13e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c142:	bf00      	nop
 800c144:	58024400 	.word	0x58024400
 800c148:	03d09000 	.word	0x03d09000
 800c14c:	003d0900 	.word	0x003d0900
 800c150:	0800fd6c 	.word	0x0800fd6c

0800c154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c160:	f003 0308 	and.w	r3, r3, #8
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00a      	beq.n	800c17e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	430a      	orrs	r2, r1
 800c17c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00a      	beq.n	800c1a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	430a      	orrs	r2, r1
 800c19e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a4:	f003 0302 	and.w	r3, r3, #2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00a      	beq.n	800c1c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c6:	f003 0304 	and.w	r3, r3, #4
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00a      	beq.n	800c1e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1e8:	f003 0310 	and.w	r3, r3, #16
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00a      	beq.n	800c206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	430a      	orrs	r2, r1
 800c204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c20a:	f003 0320 	and.w	r3, r3, #32
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00a      	beq.n	800c228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	430a      	orrs	r2, r1
 800c226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c230:	2b00      	cmp	r3, #0
 800c232:	d01a      	beq.n	800c26a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c24e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c252:	d10a      	bne.n	800c26a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	430a      	orrs	r2, r1
 800c268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c26e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00a      	beq.n	800c28c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	430a      	orrs	r2, r1
 800c28a:	605a      	str	r2, [r3, #4]
  }
}
 800c28c:	bf00      	nop
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b098      	sub	sp, #96	@ 0x60
 800c29c:	af02      	add	r7, sp, #8
 800c29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2a8:	f7f5 fd5c 	bl	8001d64 <HAL_GetTick>
 800c2ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 0308 	and.w	r3, r3, #8
 800c2b8:	2b08      	cmp	r3, #8
 800c2ba:	d12f      	bne.n	800c31c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f88e 	bl	800c3ec <UART_WaitOnFlagUntilTimeout>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d022      	beq.n	800c31c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2de:	e853 3f00 	ldrex	r3, [r3]
 800c2e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c2fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2fc:	e841 2300 	strex	r3, r2, [r1]
 800c300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e6      	bne.n	800c2d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2220      	movs	r2, #32
 800c30c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c318:	2303      	movs	r3, #3
 800c31a:	e063      	b.n	800c3e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0304 	and.w	r3, r3, #4
 800c326:	2b04      	cmp	r3, #4
 800c328:	d149      	bne.n	800c3be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c32a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c332:	2200      	movs	r2, #0
 800c334:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f857 	bl	800c3ec <UART_WaitOnFlagUntilTimeout>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d03c      	beq.n	800c3be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34c:	e853 3f00 	ldrex	r3, [r3]
 800c350:	623b      	str	r3, [r7, #32]
   return(result);
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c362:	633b      	str	r3, [r7, #48]	@ 0x30
 800c364:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c36a:	e841 2300 	strex	r3, r2, [r1]
 800c36e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1e6      	bne.n	800c344 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3308      	adds	r3, #8
 800c37c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	e853 3f00 	ldrex	r3, [r3]
 800c384:	60fb      	str	r3, [r7, #12]
   return(result);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f023 0301 	bic.w	r3, r3, #1
 800c38c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3308      	adds	r3, #8
 800c394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c396:	61fa      	str	r2, [r7, #28]
 800c398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39a:	69b9      	ldr	r1, [r7, #24]
 800c39c:	69fa      	ldr	r2, [r7, #28]
 800c39e:	e841 2300 	strex	r3, r2, [r1]
 800c3a2:	617b      	str	r3, [r7, #20]
   return(result);
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1e5      	bne.n	800c376 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2220      	movs	r2, #32
 800c3ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e012      	b.n	800c3e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2220      	movs	r2, #32
 800c3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2220      	movs	r2, #32
 800c3ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3758      	adds	r7, #88	@ 0x58
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	603b      	str	r3, [r7, #0]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3fc:	e04f      	b.n	800c49e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c404:	d04b      	beq.n	800c49e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c406:	f7f5 fcad 	bl	8001d64 <HAL_GetTick>
 800c40a:	4602      	mov	r2, r0
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	69ba      	ldr	r2, [r7, #24]
 800c412:	429a      	cmp	r2, r3
 800c414:	d302      	bcc.n	800c41c <UART_WaitOnFlagUntilTimeout+0x30>
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d101      	bne.n	800c420 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c41c:	2303      	movs	r3, #3
 800c41e:	e04e      	b.n	800c4be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f003 0304 	and.w	r3, r3, #4
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d037      	beq.n	800c49e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b80      	cmp	r3, #128	@ 0x80
 800c432:	d034      	beq.n	800c49e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b40      	cmp	r3, #64	@ 0x40
 800c438:	d031      	beq.n	800c49e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	69db      	ldr	r3, [r3, #28]
 800c440:	f003 0308 	and.w	r3, r3, #8
 800c444:	2b08      	cmp	r3, #8
 800c446:	d110      	bne.n	800c46a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2208      	movs	r2, #8
 800c44e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 f839 	bl	800c4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2208      	movs	r2, #8
 800c45a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e029      	b.n	800c4be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	69db      	ldr	r3, [r3, #28]
 800c470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c478:	d111      	bne.n	800c49e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 f81f 	bl	800c4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2220      	movs	r2, #32
 800c48e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e00f      	b.n	800c4be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	69da      	ldr	r2, [r3, #28]
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	bf0c      	ite	eq
 800c4ae:	2301      	moveq	r3, #1
 800c4b0:	2300      	movne	r3, #0
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d0a0      	beq.n	800c3fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
	...

0800c4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b095      	sub	sp, #84	@ 0x54
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d8:	e853 3f00 	ldrex	r3, [r3]
 800c4dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4f6:	e841 2300 	strex	r3, r2, [r1]
 800c4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1e6      	bne.n	800c4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3308      	adds	r3, #8
 800c508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	e853 3f00 	ldrex	r3, [r3]
 800c510:	61fb      	str	r3, [r7, #28]
   return(result);
 800c512:	69fa      	ldr	r2, [r7, #28]
 800c514:	4b1e      	ldr	r3, [pc, #120]	@ (800c590 <UART_EndRxTransfer+0xc8>)
 800c516:	4013      	ands	r3, r2
 800c518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	3308      	adds	r3, #8
 800c520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c524:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c52a:	e841 2300 	strex	r3, r2, [r1]
 800c52e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1e5      	bne.n	800c502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d118      	bne.n	800c570 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	e853 3f00 	ldrex	r3, [r3]
 800c54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	f023 0310 	bic.w	r3, r3, #16
 800c552:	647b      	str	r3, [r7, #68]	@ 0x44
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	461a      	mov	r2, r3
 800c55a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c55c:	61bb      	str	r3, [r7, #24]
 800c55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c560:	6979      	ldr	r1, [r7, #20]
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	e841 2300 	strex	r3, r2, [r1]
 800c568:	613b      	str	r3, [r7, #16]
   return(result);
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1e6      	bne.n	800c53e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2220      	movs	r2, #32
 800c574:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c584:	bf00      	nop
 800c586:	3754      	adds	r7, #84	@ 0x54
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	effffffe 	.word	0xeffffffe

0800c594 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d101      	bne.n	800c5aa <HAL_UARTEx_DisableFifoMode+0x16>
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	e027      	b.n	800c5fa <HAL_UARTEx_DisableFifoMode+0x66>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2224      	movs	r2, #36	@ 0x24
 800c5b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 0201 	bic.w	r2, r2, #1
 800c5d0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c5d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2220      	movs	r2, #32
 800c5ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b084      	sub	sp, #16
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c616:	2b01      	cmp	r3, #1
 800c618:	d101      	bne.n	800c61e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c61a:	2302      	movs	r3, #2
 800c61c:	e02d      	b.n	800c67a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2224      	movs	r2, #36	@ 0x24
 800c62a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f022 0201 	bic.w	r2, r2, #1
 800c644:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	430a      	orrs	r2, r1
 800c658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f850 	bl	800c700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2220      	movs	r2, #32
 800c66c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b084      	sub	sp, #16
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
 800c68a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c692:	2b01      	cmp	r3, #1
 800c694:	d101      	bne.n	800c69a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c696:	2302      	movs	r3, #2
 800c698:	e02d      	b.n	800c6f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2201      	movs	r2, #1
 800c69e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2224      	movs	r2, #36	@ 0x24
 800c6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f022 0201 	bic.w	r2, r2, #1
 800c6c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	683a      	ldr	r2, [r7, #0]
 800c6d2:	430a      	orrs	r2, r1
 800c6d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f812 	bl	800c700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
	...

0800c700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d108      	bne.n	800c722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c720:	e031      	b.n	800c786 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c722:	2310      	movs	r3, #16
 800c724:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c726:	2310      	movs	r3, #16
 800c728:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	0e5b      	lsrs	r3, r3, #25
 800c732:	b2db      	uxtb	r3, r3
 800c734:	f003 0307 	and.w	r3, r3, #7
 800c738:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	0f5b      	lsrs	r3, r3, #29
 800c742:	b2db      	uxtb	r3, r3
 800c744:	f003 0307 	and.w	r3, r3, #7
 800c748:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c74a:	7bbb      	ldrb	r3, [r7, #14]
 800c74c:	7b3a      	ldrb	r2, [r7, #12]
 800c74e:	4911      	ldr	r1, [pc, #68]	@ (800c794 <UARTEx_SetNbDataToProcess+0x94>)
 800c750:	5c8a      	ldrb	r2, [r1, r2]
 800c752:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c756:	7b3a      	ldrb	r2, [r7, #12]
 800c758:	490f      	ldr	r1, [pc, #60]	@ (800c798 <UARTEx_SetNbDataToProcess+0x98>)
 800c75a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c75c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c760:	b29a      	uxth	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c768:	7bfb      	ldrb	r3, [r7, #15]
 800c76a:	7b7a      	ldrb	r2, [r7, #13]
 800c76c:	4909      	ldr	r1, [pc, #36]	@ (800c794 <UARTEx_SetNbDataToProcess+0x94>)
 800c76e:	5c8a      	ldrb	r2, [r1, r2]
 800c770:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c774:	7b7a      	ldrb	r2, [r7, #13]
 800c776:	4908      	ldr	r1, [pc, #32]	@ (800c798 <UARTEx_SetNbDataToProcess+0x98>)
 800c778:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c77a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c77e:	b29a      	uxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c786:	bf00      	nop
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	0800fd84 	.word	0x0800fd84
 800c798:	0800fd8c 	.word	0x0800fd8c

0800c79c <__NVIC_SetPriority>:
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	6039      	str	r1, [r7, #0]
 800c7a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c7a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	db0a      	blt.n	800c7c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	490c      	ldr	r1, [pc, #48]	@ (800c7e8 <__NVIC_SetPriority+0x4c>)
 800c7b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7ba:	0112      	lsls	r2, r2, #4
 800c7bc:	b2d2      	uxtb	r2, r2
 800c7be:	440b      	add	r3, r1
 800c7c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c7c4:	e00a      	b.n	800c7dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	4908      	ldr	r1, [pc, #32]	@ (800c7ec <__NVIC_SetPriority+0x50>)
 800c7cc:	88fb      	ldrh	r3, [r7, #6]
 800c7ce:	f003 030f 	and.w	r3, r3, #15
 800c7d2:	3b04      	subs	r3, #4
 800c7d4:	0112      	lsls	r2, r2, #4
 800c7d6:	b2d2      	uxtb	r2, r2
 800c7d8:	440b      	add	r3, r1
 800c7da:	761a      	strb	r2, [r3, #24]
}
 800c7dc:	bf00      	nop
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	e000e100 	.word	0xe000e100
 800c7ec:	e000ed00 	.word	0xe000ed00

0800c7f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c7f4:	4b05      	ldr	r3, [pc, #20]	@ (800c80c <SysTick_Handler+0x1c>)
 800c7f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c7f8:	f002 f95c 	bl	800eab4 <xTaskGetSchedulerState>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d001      	beq.n	800c806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c802:	f000 fda1 	bl	800d348 <xPortSysTickHandler>
  }
}
 800c806:	bf00      	nop
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	e000e010 	.word	0xe000e010

0800c810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c810:	b580      	push	{r7, lr}
 800c812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c814:	2100      	movs	r1, #0
 800c816:	f06f 0004 	mvn.w	r0, #4
 800c81a:	f7ff ffbf 	bl	800c79c <__NVIC_SetPriority>
#endif
}
 800c81e:	bf00      	nop
 800c820:	bd80      	pop	{r7, pc}
	...

0800c824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c82a:	f3ef 8305 	mrs	r3, IPSR
 800c82e:	603b      	str	r3, [r7, #0]
  return(result);
 800c830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c836:	f06f 0305 	mvn.w	r3, #5
 800c83a:	607b      	str	r3, [r7, #4]
 800c83c:	e00c      	b.n	800c858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c83e:	4b0a      	ldr	r3, [pc, #40]	@ (800c868 <osKernelInitialize+0x44>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d105      	bne.n	800c852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c846:	4b08      	ldr	r3, [pc, #32]	@ (800c868 <osKernelInitialize+0x44>)
 800c848:	2201      	movs	r2, #1
 800c84a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	607b      	str	r3, [r7, #4]
 800c850:	e002      	b.n	800c858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c852:	f04f 33ff 	mov.w	r3, #4294967295
 800c856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c858:	687b      	ldr	r3, [r7, #4]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	240009e0 	.word	0x240009e0

0800c86c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c872:	f3ef 8305 	mrs	r3, IPSR
 800c876:	603b      	str	r3, [r7, #0]
  return(result);
 800c878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d003      	beq.n	800c886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c87e:	f06f 0305 	mvn.w	r3, #5
 800c882:	607b      	str	r3, [r7, #4]
 800c884:	e010      	b.n	800c8a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c886:	4b0b      	ldr	r3, [pc, #44]	@ (800c8b4 <osKernelStart+0x48>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d109      	bne.n	800c8a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c88e:	f7ff ffbf 	bl	800c810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c892:	4b08      	ldr	r3, [pc, #32]	@ (800c8b4 <osKernelStart+0x48>)
 800c894:	2202      	movs	r2, #2
 800c896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c898:	f001 fcbe 	bl	800e218 <vTaskStartScheduler>
      stat = osOK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	607b      	str	r3, [r7, #4]
 800c8a0:	e002      	b.n	800c8a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8a8:	687b      	ldr	r3, [r7, #4]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	240009e0 	.word	0x240009e0

0800c8b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08e      	sub	sp, #56	@ 0x38
 800c8bc:	af04      	add	r7, sp, #16
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8c8:	f3ef 8305 	mrs	r3, IPSR
 800c8cc:	617b      	str	r3, [r7, #20]
  return(result);
 800c8ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d17e      	bne.n	800c9d2 <osThreadNew+0x11a>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d07b      	beq.n	800c9d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c8da:	2380      	movs	r3, #128	@ 0x80
 800c8dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c8de:	2318      	movs	r3, #24
 800c8e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d045      	beq.n	800c97e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <osThreadNew+0x48>
        name = attr->name;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d008      	beq.n	800c926 <osThreadNew+0x6e>
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	2b38      	cmp	r3, #56	@ 0x38
 800c918:	d805      	bhi.n	800c926 <osThreadNew+0x6e>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	f003 0301 	and.w	r3, r3, #1
 800c922:	2b00      	cmp	r3, #0
 800c924:	d001      	beq.n	800c92a <osThreadNew+0x72>
        return (NULL);
 800c926:	2300      	movs	r3, #0
 800c928:	e054      	b.n	800c9d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	089b      	lsrs	r3, r3, #2
 800c938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00e      	beq.n	800c960 <osThreadNew+0xa8>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	2b5b      	cmp	r3, #91	@ 0x5b
 800c948:	d90a      	bls.n	800c960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d006      	beq.n	800c960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <osThreadNew+0xa8>
        mem = 1;
 800c95a:	2301      	movs	r3, #1
 800c95c:	61bb      	str	r3, [r7, #24]
 800c95e:	e010      	b.n	800c982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10c      	bne.n	800c982 <osThreadNew+0xca>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d108      	bne.n	800c982 <osThreadNew+0xca>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d104      	bne.n	800c982 <osThreadNew+0xca>
          mem = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	61bb      	str	r3, [r7, #24]
 800c97c:	e001      	b.n	800c982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d110      	bne.n	800c9aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c990:	9202      	str	r2, [sp, #8]
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	6a3a      	ldr	r2, [r7, #32]
 800c99c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f001 fa5e 	bl	800de60 <xTaskCreateStatic>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	613b      	str	r3, [r7, #16]
 800c9a8:	e013      	b.n	800c9d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d110      	bne.n	800c9d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	f107 0310 	add.w	r3, r7, #16
 800c9b8:	9301      	str	r3, [sp, #4]
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f001 faac 	bl	800df20 <xTaskCreate>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d001      	beq.n	800c9d2 <osThreadNew+0x11a>
            hTask = NULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c9d2:	693b      	ldr	r3, [r7, #16]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3728      	adds	r7, #40	@ 0x28
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9e4:	f3ef 8305 	mrs	r3, IPSR
 800c9e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <osDelay+0x1c>
    stat = osErrorISR;
 800c9f0:	f06f 0305 	mvn.w	r3, #5
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	e007      	b.n	800ca08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d002      	beq.n	800ca08 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f001 fbd2 	bl	800e1ac <vTaskDelay>
    }
  }

  return (stat);
 800ca08:	68fb      	ldr	r3, [r7, #12]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
	...

0800ca14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4a07      	ldr	r2, [pc, #28]	@ (800ca40 <vApplicationGetIdleTaskMemory+0x2c>)
 800ca24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	4a06      	ldr	r2, [pc, #24]	@ (800ca44 <vApplicationGetIdleTaskMemory+0x30>)
 800ca2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2280      	movs	r2, #128	@ 0x80
 800ca30:	601a      	str	r2, [r3, #0]
}
 800ca32:	bf00      	nop
 800ca34:	3714      	adds	r7, #20
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	240009e4 	.word	0x240009e4
 800ca44:	24000a40 	.word	0x24000a40

0800ca48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4a07      	ldr	r2, [pc, #28]	@ (800ca74 <vApplicationGetTimerTaskMemory+0x2c>)
 800ca58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	4a06      	ldr	r2, [pc, #24]	@ (800ca78 <vApplicationGetTimerTaskMemory+0x30>)
 800ca5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca66:	601a      	str	r2, [r3, #0]
}
 800ca68:	bf00      	nop
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr
 800ca74:	24000c40 	.word	0x24000c40
 800ca78:	24000c9c 	.word	0x24000c9c

0800ca7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08a      	sub	sp, #40	@ 0x28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca84:	2300      	movs	r3, #0
 800ca86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca88:	f001 fc2e 	bl	800e2e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca8c:	4b5c      	ldr	r3, [pc, #368]	@ (800cc00 <pvPortMalloc+0x184>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d101      	bne.n	800ca98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca94:	f000 f924 	bl	800cce0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca98:	4b5a      	ldr	r3, [pc, #360]	@ (800cc04 <pvPortMalloc+0x188>)
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4013      	ands	r3, r2
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f040 8095 	bne.w	800cbd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d01e      	beq.n	800caea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800caac:	2208      	movs	r2, #8
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4413      	add	r3, r2
 800cab2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f003 0307 	and.w	r3, r3, #7
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d015      	beq.n	800caea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f023 0307 	bic.w	r3, r3, #7
 800cac4:	3308      	adds	r3, #8
 800cac6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f003 0307 	and.w	r3, r3, #7
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00b      	beq.n	800caea <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop
 800cae8:	e7fd      	b.n	800cae6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d06f      	beq.n	800cbd0 <pvPortMalloc+0x154>
 800caf0:	4b45      	ldr	r3, [pc, #276]	@ (800cc08 <pvPortMalloc+0x18c>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d86a      	bhi.n	800cbd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cafa:	4b44      	ldr	r3, [pc, #272]	@ (800cc0c <pvPortMalloc+0x190>)
 800cafc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cafe:	4b43      	ldr	r3, [pc, #268]	@ (800cc0c <pvPortMalloc+0x190>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb04:	e004      	b.n	800cb10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d903      	bls.n	800cb22 <pvPortMalloc+0xa6>
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1f1      	bne.n	800cb06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb22:	4b37      	ldr	r3, [pc, #220]	@ (800cc00 <pvPortMalloc+0x184>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d051      	beq.n	800cbd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2208      	movs	r2, #8
 800cb32:	4413      	add	r3, r2
 800cb34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	6a3b      	ldr	r3, [r7, #32]
 800cb3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb40:	685a      	ldr	r2, [r3, #4]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	1ad2      	subs	r2, r2, r3
 800cb46:	2308      	movs	r3, #8
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d920      	bls.n	800cb90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4413      	add	r3, r2
 800cb54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	f003 0307 	and.w	r3, r3, #7
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00b      	beq.n	800cb78 <pvPortMalloc+0xfc>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	613b      	str	r3, [r7, #16]
}
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
 800cb76:	e7fd      	b.n	800cb74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	1ad2      	subs	r2, r2, r3
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb8a:	69b8      	ldr	r0, [r7, #24]
 800cb8c:	f000 f90a 	bl	800cda4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb90:	4b1d      	ldr	r3, [pc, #116]	@ (800cc08 <pvPortMalloc+0x18c>)
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	4a1b      	ldr	r2, [pc, #108]	@ (800cc08 <pvPortMalloc+0x18c>)
 800cb9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb9e:	4b1a      	ldr	r3, [pc, #104]	@ (800cc08 <pvPortMalloc+0x18c>)
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc10 <pvPortMalloc+0x194>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d203      	bcs.n	800cbb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbaa:	4b17      	ldr	r3, [pc, #92]	@ (800cc08 <pvPortMalloc+0x18c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a18      	ldr	r2, [pc, #96]	@ (800cc10 <pvPortMalloc+0x194>)
 800cbb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb4:	685a      	ldr	r2, [r3, #4]
 800cbb6:	4b13      	ldr	r3, [pc, #76]	@ (800cc04 <pvPortMalloc+0x188>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	431a      	orrs	r2, r3
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbc6:	4b13      	ldr	r3, [pc, #76]	@ (800cc14 <pvPortMalloc+0x198>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	4a11      	ldr	r2, [pc, #68]	@ (800cc14 <pvPortMalloc+0x198>)
 800cbce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbd0:	f001 fb98 	bl	800e304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	f003 0307 	and.w	r3, r3, #7
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00b      	beq.n	800cbf6 <pvPortMalloc+0x17a>
	__asm volatile
 800cbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe2:	f383 8811 	msr	BASEPRI, r3
 800cbe6:	f3bf 8f6f 	isb	sy
 800cbea:	f3bf 8f4f 	dsb	sy
 800cbee:	60fb      	str	r3, [r7, #12]
}
 800cbf0:	bf00      	nop
 800cbf2:	bf00      	nop
 800cbf4:	e7fd      	b.n	800cbf2 <pvPortMalloc+0x176>
	return pvReturn;
 800cbf6:	69fb      	ldr	r3, [r7, #28]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3728      	adds	r7, #40	@ 0x28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	24004ca4 	.word	0x24004ca4
 800cc04:	24004cb8 	.word	0x24004cb8
 800cc08:	24004ca8 	.word	0x24004ca8
 800cc0c:	24004c9c 	.word	0x24004c9c
 800cc10:	24004cac 	.word	0x24004cac
 800cc14:	24004cb0 	.word	0x24004cb0

0800cc18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d04f      	beq.n	800ccca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc2a:	2308      	movs	r3, #8
 800cc2c:	425b      	negs	r3, r3
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	4413      	add	r3, r2
 800cc32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	4b25      	ldr	r3, [pc, #148]	@ (800ccd4 <vPortFree+0xbc>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4013      	ands	r3, r2
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10b      	bne.n	800cc5e <vPortFree+0x46>
	__asm volatile
 800cc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	60fb      	str	r3, [r7, #12]
}
 800cc58:	bf00      	nop
 800cc5a:	bf00      	nop
 800cc5c:	e7fd      	b.n	800cc5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00b      	beq.n	800cc7e <vPortFree+0x66>
	__asm volatile
 800cc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6a:	f383 8811 	msr	BASEPRI, r3
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	f3bf 8f4f 	dsb	sy
 800cc76:	60bb      	str	r3, [r7, #8]
}
 800cc78:	bf00      	nop
 800cc7a:	bf00      	nop
 800cc7c:	e7fd      	b.n	800cc7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	4b14      	ldr	r3, [pc, #80]	@ (800ccd4 <vPortFree+0xbc>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4013      	ands	r3, r2
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d01e      	beq.n	800ccca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d11a      	bne.n	800ccca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	685a      	ldr	r2, [r3, #4]
 800cc98:	4b0e      	ldr	r3, [pc, #56]	@ (800ccd4 <vPortFree+0xbc>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	43db      	mvns	r3, r3
 800cc9e:	401a      	ands	r2, r3
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cca4:	f001 fb20 	bl	800e2e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	4b0a      	ldr	r3, [pc, #40]	@ (800ccd8 <vPortFree+0xc0>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	4a09      	ldr	r2, [pc, #36]	@ (800ccd8 <vPortFree+0xc0>)
 800ccb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccb6:	6938      	ldr	r0, [r7, #16]
 800ccb8:	f000 f874 	bl	800cda4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccbc:	4b07      	ldr	r3, [pc, #28]	@ (800ccdc <vPortFree+0xc4>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	4a06      	ldr	r2, [pc, #24]	@ (800ccdc <vPortFree+0xc4>)
 800ccc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ccc6:	f001 fb1d 	bl	800e304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccca:	bf00      	nop
 800cccc:	3718      	adds	r7, #24
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	24004cb8 	.word	0x24004cb8
 800ccd8:	24004ca8 	.word	0x24004ca8
 800ccdc:	24004cb4 	.word	0x24004cb4

0800cce0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cce6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ccea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ccec:	4b27      	ldr	r3, [pc, #156]	@ (800cd8c <prvHeapInit+0xac>)
 800ccee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f003 0307 	and.w	r3, r3, #7
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00c      	beq.n	800cd14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3307      	adds	r3, #7
 800ccfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f023 0307 	bic.w	r3, r3, #7
 800cd06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	4a1f      	ldr	r2, [pc, #124]	@ (800cd8c <prvHeapInit+0xac>)
 800cd10:	4413      	add	r3, r2
 800cd12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd18:	4a1d      	ldr	r2, [pc, #116]	@ (800cd90 <prvHeapInit+0xb0>)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd1e:	4b1c      	ldr	r3, [pc, #112]	@ (800cd90 <prvHeapInit+0xb0>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	4413      	add	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd2c:	2208      	movs	r2, #8
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	1a9b      	subs	r3, r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 0307 	bic.w	r3, r3, #7
 800cd3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	4a15      	ldr	r2, [pc, #84]	@ (800cd94 <prvHeapInit+0xb4>)
 800cd40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd42:	4b14      	ldr	r3, [pc, #80]	@ (800cd94 <prvHeapInit+0xb4>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2200      	movs	r2, #0
 800cd48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd4a:	4b12      	ldr	r3, [pc, #72]	@ (800cd94 <prvHeapInit+0xb4>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	1ad2      	subs	r2, r2, r3
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd60:	4b0c      	ldr	r3, [pc, #48]	@ (800cd94 <prvHeapInit+0xb4>)
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	4a0a      	ldr	r2, [pc, #40]	@ (800cd98 <prvHeapInit+0xb8>)
 800cd6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	4a09      	ldr	r2, [pc, #36]	@ (800cd9c <prvHeapInit+0xbc>)
 800cd76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd78:	4b09      	ldr	r3, [pc, #36]	@ (800cda0 <prvHeapInit+0xc0>)
 800cd7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cd7e:	601a      	str	r2, [r3, #0]
}
 800cd80:	bf00      	nop
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	2400109c 	.word	0x2400109c
 800cd90:	24004c9c 	.word	0x24004c9c
 800cd94:	24004ca4 	.word	0x24004ca4
 800cd98:	24004cac 	.word	0x24004cac
 800cd9c:	24004ca8 	.word	0x24004ca8
 800cda0:	24004cb8 	.word	0x24004cb8

0800cda4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cdac:	4b28      	ldr	r3, [pc, #160]	@ (800ce50 <prvInsertBlockIntoFreeList+0xac>)
 800cdae:	60fb      	str	r3, [r7, #12]
 800cdb0:	e002      	b.n	800cdb8 <prvInsertBlockIntoFreeList+0x14>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d8f7      	bhi.n	800cdb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	68ba      	ldr	r2, [r7, #8]
 800cdcc:	4413      	add	r3, r2
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d108      	bne.n	800cde6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	685a      	ldr	r2, [r3, #4]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	441a      	add	r2, r3
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	441a      	add	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d118      	bne.n	800ce2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	4b15      	ldr	r3, [pc, #84]	@ (800ce54 <prvInsertBlockIntoFreeList+0xb0>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d00d      	beq.n	800ce22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	441a      	add	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	e008      	b.n	800ce34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce22:	4b0c      	ldr	r3, [pc, #48]	@ (800ce54 <prvInsertBlockIntoFreeList+0xb0>)
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	601a      	str	r2, [r3, #0]
 800ce2a:	e003      	b.n	800ce34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d002      	beq.n	800ce42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce42:	bf00      	nop
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	24004c9c 	.word	0x24004c9c
 800ce54:	24004ca4 	.word	0x24004ca4

0800ce58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f103 0208 	add.w	r2, r3, #8
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f103 0208 	add.w	r2, r3, #8
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f103 0208 	add.w	r2, r3, #8
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cea6:	bf00      	nop
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b085      	sub	sp, #20
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	689a      	ldr	r2, [r3, #8]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	601a      	str	r2, [r3, #0]
}
 800ceee:	bf00      	nop
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cefa:	b480      	push	{r7}
 800cefc:	b085      	sub	sp, #20
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf10:	d103      	bne.n	800cf1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	e00c      	b.n	800cf34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	3308      	adds	r3, #8
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	e002      	b.n	800cf28 <vListInsert+0x2e>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d2f6      	bcs.n	800cf22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	685a      	ldr	r2, [r3, #4]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	601a      	str	r2, [r3, #0]
}
 800cf60:	bf00      	nop
 800cf62:	3714      	adds	r7, #20
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	6892      	ldr	r2, [r2, #8]
 800cf82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	6852      	ldr	r2, [r2, #4]
 800cf8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d103      	bne.n	800cfa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	689a      	ldr	r2, [r3, #8]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	1e5a      	subs	r2, r3, #1
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3714      	adds	r7, #20
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	3b04      	subs	r3, #4
 800cfd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cfd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	3b04      	subs	r3, #4
 800cfde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	f023 0201 	bic.w	r2, r3, #1
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	3b04      	subs	r3, #4
 800cfee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cff0:	4a0c      	ldr	r2, [pc, #48]	@ (800d024 <pxPortInitialiseStack+0x64>)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3b14      	subs	r3, #20
 800cffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	3b04      	subs	r3, #4
 800d006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f06f 0202 	mvn.w	r2, #2
 800d00e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3b20      	subs	r3, #32
 800d014:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d016:	68fb      	ldr	r3, [r7, #12]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr
 800d024:	0800d029 	.word	0x0800d029

0800d028 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d02e:	2300      	movs	r3, #0
 800d030:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d032:	4b13      	ldr	r3, [pc, #76]	@ (800d080 <prvTaskExitError+0x58>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03a:	d00b      	beq.n	800d054 <prvTaskExitError+0x2c>
	__asm volatile
 800d03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d040:	f383 8811 	msr	BASEPRI, r3
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	60fb      	str	r3, [r7, #12]
}
 800d04e:	bf00      	nop
 800d050:	bf00      	nop
 800d052:	e7fd      	b.n	800d050 <prvTaskExitError+0x28>
	__asm volatile
 800d054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d058:	f383 8811 	msr	BASEPRI, r3
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	60bb      	str	r3, [r7, #8]
}
 800d066:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d068:	bf00      	nop
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0fc      	beq.n	800d06a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d070:	bf00      	nop
 800d072:	bf00      	nop
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	24000028 	.word	0x24000028
	...

0800d090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d090:	4b07      	ldr	r3, [pc, #28]	@ (800d0b0 <pxCurrentTCBConst2>)
 800d092:	6819      	ldr	r1, [r3, #0]
 800d094:	6808      	ldr	r0, [r1, #0]
 800d096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09a:	f380 8809 	msr	PSP, r0
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f04f 0000 	mov.w	r0, #0
 800d0a6:	f380 8811 	msr	BASEPRI, r0
 800d0aa:	4770      	bx	lr
 800d0ac:	f3af 8000 	nop.w

0800d0b0 <pxCurrentTCBConst2>:
 800d0b0:	24004d04 	.word	0x24004d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop

0800d0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d0b8:	4808      	ldr	r0, [pc, #32]	@ (800d0dc <prvPortStartFirstTask+0x24>)
 800d0ba:	6800      	ldr	r0, [r0, #0]
 800d0bc:	6800      	ldr	r0, [r0, #0]
 800d0be:	f380 8808 	msr	MSP, r0
 800d0c2:	f04f 0000 	mov.w	r0, #0
 800d0c6:	f380 8814 	msr	CONTROL, r0
 800d0ca:	b662      	cpsie	i
 800d0cc:	b661      	cpsie	f
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	df00      	svc	0
 800d0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d0da:	bf00      	nop
 800d0dc:	e000ed08 	.word	0xe000ed08

0800d0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d0e6:	4b47      	ldr	r3, [pc, #284]	@ (800d204 <xPortStartScheduler+0x124>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a47      	ldr	r2, [pc, #284]	@ (800d208 <xPortStartScheduler+0x128>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d10b      	bne.n	800d108 <xPortStartScheduler+0x28>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	60fb      	str	r3, [r7, #12]
}
 800d102:	bf00      	nop
 800d104:	bf00      	nop
 800d106:	e7fd      	b.n	800d104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d108:	4b3e      	ldr	r3, [pc, #248]	@ (800d204 <xPortStartScheduler+0x124>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a3f      	ldr	r2, [pc, #252]	@ (800d20c <xPortStartScheduler+0x12c>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d10b      	bne.n	800d12a <xPortStartScheduler+0x4a>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	613b      	str	r3, [r7, #16]
}
 800d124:	bf00      	nop
 800d126:	bf00      	nop
 800d128:	e7fd      	b.n	800d126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d12a:	4b39      	ldr	r3, [pc, #228]	@ (800d210 <xPortStartScheduler+0x130>)
 800d12c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	b2db      	uxtb	r3, r3
 800d134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	22ff      	movs	r2, #255	@ 0xff
 800d13a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	b2db      	uxtb	r3, r3
 800d142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d144:	78fb      	ldrb	r3, [r7, #3]
 800d146:	b2db      	uxtb	r3, r3
 800d148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	4b31      	ldr	r3, [pc, #196]	@ (800d214 <xPortStartScheduler+0x134>)
 800d150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d152:	4b31      	ldr	r3, [pc, #196]	@ (800d218 <xPortStartScheduler+0x138>)
 800d154:	2207      	movs	r2, #7
 800d156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d158:	e009      	b.n	800d16e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d15a:	4b2f      	ldr	r3, [pc, #188]	@ (800d218 <xPortStartScheduler+0x138>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	3b01      	subs	r3, #1
 800d160:	4a2d      	ldr	r2, [pc, #180]	@ (800d218 <xPortStartScheduler+0x138>)
 800d162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d164:	78fb      	ldrb	r3, [r7, #3]
 800d166:	b2db      	uxtb	r3, r3
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d16e:	78fb      	ldrb	r3, [r7, #3]
 800d170:	b2db      	uxtb	r3, r3
 800d172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d176:	2b80      	cmp	r3, #128	@ 0x80
 800d178:	d0ef      	beq.n	800d15a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d17a:	4b27      	ldr	r3, [pc, #156]	@ (800d218 <xPortStartScheduler+0x138>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f1c3 0307 	rsb	r3, r3, #7
 800d182:	2b04      	cmp	r3, #4
 800d184:	d00b      	beq.n	800d19e <xPortStartScheduler+0xbe>
	__asm volatile
 800d186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	60bb      	str	r3, [r7, #8]
}
 800d198:	bf00      	nop
 800d19a:	bf00      	nop
 800d19c:	e7fd      	b.n	800d19a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d19e:	4b1e      	ldr	r3, [pc, #120]	@ (800d218 <xPortStartScheduler+0x138>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	021b      	lsls	r3, r3, #8
 800d1a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d218 <xPortStartScheduler+0x138>)
 800d1a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1a8:	4b1b      	ldr	r3, [pc, #108]	@ (800d218 <xPortStartScheduler+0x138>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d1b0:	4a19      	ldr	r2, [pc, #100]	@ (800d218 <xPortStartScheduler+0x138>)
 800d1b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1bc:	4b17      	ldr	r3, [pc, #92]	@ (800d21c <xPortStartScheduler+0x13c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a16      	ldr	r2, [pc, #88]	@ (800d21c <xPortStartScheduler+0x13c>)
 800d1c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d1c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d1c8:	4b14      	ldr	r3, [pc, #80]	@ (800d21c <xPortStartScheduler+0x13c>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a13      	ldr	r2, [pc, #76]	@ (800d21c <xPortStartScheduler+0x13c>)
 800d1ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d1d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d1d4:	f000 f8da 	bl	800d38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d1d8:	4b11      	ldr	r3, [pc, #68]	@ (800d220 <xPortStartScheduler+0x140>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d1de:	f000 f8f9 	bl	800d3d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d1e2:	4b10      	ldr	r3, [pc, #64]	@ (800d224 <xPortStartScheduler+0x144>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a0f      	ldr	r2, [pc, #60]	@ (800d224 <xPortStartScheduler+0x144>)
 800d1e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d1ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d1ee:	f7ff ff63 	bl	800d0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d1f2:	f001 f9ef 	bl	800e5d4 <vTaskSwitchContext>
	prvTaskExitError();
 800d1f6:	f7ff ff17 	bl	800d028 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3718      	adds	r7, #24
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	e000ed00 	.word	0xe000ed00
 800d208:	410fc271 	.word	0x410fc271
 800d20c:	410fc270 	.word	0x410fc270
 800d210:	e000e400 	.word	0xe000e400
 800d214:	24004cbc 	.word	0x24004cbc
 800d218:	24004cc0 	.word	0x24004cc0
 800d21c:	e000ed20 	.word	0xe000ed20
 800d220:	24000028 	.word	0x24000028
 800d224:	e000ef34 	.word	0xe000ef34

0800d228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
	__asm volatile
 800d22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	607b      	str	r3, [r7, #4]
}
 800d240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d242:	4b10      	ldr	r3, [pc, #64]	@ (800d284 <vPortEnterCritical+0x5c>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	3301      	adds	r3, #1
 800d248:	4a0e      	ldr	r2, [pc, #56]	@ (800d284 <vPortEnterCritical+0x5c>)
 800d24a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d24c:	4b0d      	ldr	r3, [pc, #52]	@ (800d284 <vPortEnterCritical+0x5c>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b01      	cmp	r3, #1
 800d252:	d110      	bne.n	800d276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d254:	4b0c      	ldr	r3, [pc, #48]	@ (800d288 <vPortEnterCritical+0x60>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00b      	beq.n	800d276 <vPortEnterCritical+0x4e>
	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	603b      	str	r3, [r7, #0]
}
 800d270:	bf00      	nop
 800d272:	bf00      	nop
 800d274:	e7fd      	b.n	800d272 <vPortEnterCritical+0x4a>
	}
}
 800d276:	bf00      	nop
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	24000028 	.word	0x24000028
 800d288:	e000ed04 	.word	0xe000ed04

0800d28c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d292:	4b12      	ldr	r3, [pc, #72]	@ (800d2dc <vPortExitCritical+0x50>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10b      	bne.n	800d2b2 <vPortExitCritical+0x26>
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	607b      	str	r3, [r7, #4]
}
 800d2ac:	bf00      	nop
 800d2ae:	bf00      	nop
 800d2b0:	e7fd      	b.n	800d2ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d2dc <vPortExitCritical+0x50>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	4a08      	ldr	r2, [pc, #32]	@ (800d2dc <vPortExitCritical+0x50>)
 800d2ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2bc:	4b07      	ldr	r3, [pc, #28]	@ (800d2dc <vPortExitCritical+0x50>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d105      	bne.n	800d2d0 <vPortExitCritical+0x44>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d2ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	24000028 	.word	0x24000028

0800d2e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d2e0:	f3ef 8009 	mrs	r0, PSP
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	4b15      	ldr	r3, [pc, #84]	@ (800d340 <pxCurrentTCBConst>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	f01e 0f10 	tst.w	lr, #16
 800d2f0:	bf08      	it	eq
 800d2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fa:	6010      	str	r0, [r2, #0]
 800d2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d304:	f380 8811 	msr	BASEPRI, r0
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f001 f960 	bl	800e5d4 <vTaskSwitchContext>
 800d314:	f04f 0000 	mov.w	r0, #0
 800d318:	f380 8811 	msr	BASEPRI, r0
 800d31c:	bc09      	pop	{r0, r3}
 800d31e:	6819      	ldr	r1, [r3, #0]
 800d320:	6808      	ldr	r0, [r1, #0]
 800d322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d326:	f01e 0f10 	tst.w	lr, #16
 800d32a:	bf08      	it	eq
 800d32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d330:	f380 8809 	msr	PSP, r0
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	f3af 8000 	nop.w

0800d340 <pxCurrentTCBConst>:
 800d340:	24004d04 	.word	0x24004d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d344:	bf00      	nop
 800d346:	bf00      	nop

0800d348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	607b      	str	r3, [r7, #4]
}
 800d360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d362:	f001 f87d 	bl	800e460 <xTaskIncrementTick>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d36c:	4b06      	ldr	r3, [pc, #24]	@ (800d388 <xPortSysTickHandler+0x40>)
 800d36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	2300      	movs	r3, #0
 800d376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	f383 8811 	msr	BASEPRI, r3
}
 800d37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d380:	bf00      	nop
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	e000ed04 	.word	0xe000ed04

0800d38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d38c:	b480      	push	{r7}
 800d38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d390:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c0 <vPortSetupTimerInterrupt+0x34>)
 800d392:	2200      	movs	r2, #0
 800d394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d396:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c4 <vPortSetupTimerInterrupt+0x38>)
 800d398:	2200      	movs	r2, #0
 800d39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d39c:	4b0a      	ldr	r3, [pc, #40]	@ (800d3c8 <vPortSetupTimerInterrupt+0x3c>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d3cc <vPortSetupTimerInterrupt+0x40>)
 800d3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3a6:	099b      	lsrs	r3, r3, #6
 800d3a8:	4a09      	ldr	r2, [pc, #36]	@ (800d3d0 <vPortSetupTimerInterrupt+0x44>)
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3ae:	4b04      	ldr	r3, [pc, #16]	@ (800d3c0 <vPortSetupTimerInterrupt+0x34>)
 800d3b0:	2207      	movs	r2, #7
 800d3b2:	601a      	str	r2, [r3, #0]
}
 800d3b4:	bf00      	nop
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	e000e010 	.word	0xe000e010
 800d3c4:	e000e018 	.word	0xe000e018
 800d3c8:	24000000 	.word	0x24000000
 800d3cc:	10624dd3 	.word	0x10624dd3
 800d3d0:	e000e014 	.word	0xe000e014

0800d3d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d3d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d3e4 <vPortEnableVFP+0x10>
 800d3d8:	6801      	ldr	r1, [r0, #0]
 800d3da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d3de:	6001      	str	r1, [r0, #0]
 800d3e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d3e2:	bf00      	nop
 800d3e4:	e000ed88 	.word	0xe000ed88

0800d3e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d3ee:	f3ef 8305 	mrs	r3, IPSR
 800d3f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b0f      	cmp	r3, #15
 800d3f8:	d915      	bls.n	800d426 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d3fa:	4a18      	ldr	r2, [pc, #96]	@ (800d45c <vPortValidateInterruptPriority+0x74>)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	4413      	add	r3, r2
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d404:	4b16      	ldr	r3, [pc, #88]	@ (800d460 <vPortValidateInterruptPriority+0x78>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	7afa      	ldrb	r2, [r7, #11]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d20b      	bcs.n	800d426 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d412:	f383 8811 	msr	BASEPRI, r3
 800d416:	f3bf 8f6f 	isb	sy
 800d41a:	f3bf 8f4f 	dsb	sy
 800d41e:	607b      	str	r3, [r7, #4]
}
 800d420:	bf00      	nop
 800d422:	bf00      	nop
 800d424:	e7fd      	b.n	800d422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d426:	4b0f      	ldr	r3, [pc, #60]	@ (800d464 <vPortValidateInterruptPriority+0x7c>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d42e:	4b0e      	ldr	r3, [pc, #56]	@ (800d468 <vPortValidateInterruptPriority+0x80>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d90b      	bls.n	800d44e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	603b      	str	r3, [r7, #0]
}
 800d448:	bf00      	nop
 800d44a:	bf00      	nop
 800d44c:	e7fd      	b.n	800d44a <vPortValidateInterruptPriority+0x62>
	}
 800d44e:	bf00      	nop
 800d450:	3714      	adds	r7, #20
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	e000e3f0 	.word	0xe000e3f0
 800d460:	24004cbc 	.word	0x24004cbc
 800d464:	e000ed0c 	.word	0xe000ed0c
 800d468:	24004cc0 	.word	0x24004cc0

0800d46c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d10b      	bne.n	800d498 <xQueueGenericReset+0x2c>
	__asm volatile
 800d480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d484:	f383 8811 	msr	BASEPRI, r3
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	60bb      	str	r3, [r7, #8]
}
 800d492:	bf00      	nop
 800d494:	bf00      	nop
 800d496:	e7fd      	b.n	800d494 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d498:	f7ff fec6 	bl	800d228 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4a4:	68f9      	ldr	r1, [r7, #12]
 800d4a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d4a8:	fb01 f303 	mul.w	r3, r1, r3
 800d4ac:	441a      	add	r2, r3
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	68f9      	ldr	r1, [r7, #12]
 800d4cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d4ce:	fb01 f303 	mul.w	r3, r1, r3
 800d4d2:	441a      	add	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	22ff      	movs	r2, #255	@ 0xff
 800d4dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	22ff      	movs	r2, #255	@ 0xff
 800d4e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d114      	bne.n	800d518 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d01a      	beq.n	800d52c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	3310      	adds	r3, #16
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f001 f91a 	bl	800e734 <xTaskRemoveFromEventList>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d012      	beq.n	800d52c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d506:	4b0d      	ldr	r3, [pc, #52]	@ (800d53c <xQueueGenericReset+0xd0>)
 800d508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d50c:	601a      	str	r2, [r3, #0]
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	e009      	b.n	800d52c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	3310      	adds	r3, #16
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff fc9b 	bl	800ce58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	3324      	adds	r3, #36	@ 0x24
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff fc96 	bl	800ce58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d52c:	f7ff feae 	bl	800d28c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d530:	2301      	movs	r3, #1
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	e000ed04 	.word	0xe000ed04

0800d540 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08e      	sub	sp, #56	@ 0x38
 800d544:	af02      	add	r7, sp, #8
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d10b      	bne.n	800d56c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d558:	f383 8811 	msr	BASEPRI, r3
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d566:	bf00      	nop
 800d568:	bf00      	nop
 800d56a:	e7fd      	b.n	800d568 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10b      	bne.n	800d58a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop
 800d588:	e7fd      	b.n	800d586 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <xQueueGenericCreateStatic+0x56>
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d001      	beq.n	800d59a <xQueueGenericCreateStatic+0x5a>
 800d596:	2301      	movs	r3, #1
 800d598:	e000      	b.n	800d59c <xQueueGenericCreateStatic+0x5c>
 800d59a:	2300      	movs	r3, #0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d10b      	bne.n	800d5b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	623b      	str	r3, [r7, #32]
}
 800d5b2:	bf00      	nop
 800d5b4:	bf00      	nop
 800d5b6:	e7fd      	b.n	800d5b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d102      	bne.n	800d5c4 <xQueueGenericCreateStatic+0x84>
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d101      	bne.n	800d5c8 <xQueueGenericCreateStatic+0x88>
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e000      	b.n	800d5ca <xQueueGenericCreateStatic+0x8a>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d10b      	bne.n	800d5e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	61fb      	str	r3, [r7, #28]
}
 800d5e0:	bf00      	nop
 800d5e2:	bf00      	nop
 800d5e4:	e7fd      	b.n	800d5e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d5e6:	2350      	movs	r3, #80	@ 0x50
 800d5e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	2b50      	cmp	r3, #80	@ 0x50
 800d5ee:	d00b      	beq.n	800d608 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	61bb      	str	r3, [r7, #24]
}
 800d602:	bf00      	nop
 800d604:	bf00      	nop
 800d606:	e7fd      	b.n	800d604 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d608:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d610:	2b00      	cmp	r3, #0
 800d612:	d00d      	beq.n	800d630 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d61c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	4613      	mov	r3, r2
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	68b9      	ldr	r1, [r7, #8]
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f000 f805 	bl	800d63a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d632:	4618      	mov	r0, r3
 800d634:	3730      	adds	r7, #48	@ 0x30
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	60f8      	str	r0, [r7, #12]
 800d642:	60b9      	str	r1, [r7, #8]
 800d644:	607a      	str	r2, [r7, #4]
 800d646:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d103      	bne.n	800d656 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	69ba      	ldr	r2, [r7, #24]
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	e002      	b.n	800d65c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d662:	69bb      	ldr	r3, [r7, #24]
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d668:	2101      	movs	r1, #1
 800d66a:	69b8      	ldr	r0, [r7, #24]
 800d66c:	f7ff fefe 	bl	800d46c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	78fa      	ldrb	r2, [r7, #3]
 800d674:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d678:	bf00      	nop
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08e      	sub	sp, #56	@ 0x38
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]
 800d68c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d68e:	2300      	movs	r3, #0
 800d690:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10b      	bne.n	800d6b4 <xQueueGenericSend+0x34>
	__asm volatile
 800d69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6ae:	bf00      	nop
 800d6b0:	bf00      	nop
 800d6b2:	e7fd      	b.n	800d6b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d103      	bne.n	800d6c2 <xQueueGenericSend+0x42>
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <xQueueGenericSend+0x46>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e000      	b.n	800d6c8 <xQueueGenericSend+0x48>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10b      	bne.n	800d6e4 <xQueueGenericSend+0x64>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6de:	bf00      	nop
 800d6e0:	bf00      	nop
 800d6e2:	e7fd      	b.n	800d6e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d103      	bne.n	800d6f2 <xQueueGenericSend+0x72>
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d101      	bne.n	800d6f6 <xQueueGenericSend+0x76>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e000      	b.n	800d6f8 <xQueueGenericSend+0x78>
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10b      	bne.n	800d714 <xQueueGenericSend+0x94>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	623b      	str	r3, [r7, #32]
}
 800d70e:	bf00      	nop
 800d710:	bf00      	nop
 800d712:	e7fd      	b.n	800d710 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d714:	f001 f9ce 	bl	800eab4 <xTaskGetSchedulerState>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d102      	bne.n	800d724 <xQueueGenericSend+0xa4>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <xQueueGenericSend+0xa8>
 800d724:	2301      	movs	r3, #1
 800d726:	e000      	b.n	800d72a <xQueueGenericSend+0xaa>
 800d728:	2300      	movs	r3, #0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10b      	bne.n	800d746 <xQueueGenericSend+0xc6>
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	61fb      	str	r3, [r7, #28]
}
 800d740:	bf00      	nop
 800d742:	bf00      	nop
 800d744:	e7fd      	b.n	800d742 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d746:	f7ff fd6f 	bl	800d228 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d752:	429a      	cmp	r2, r3
 800d754:	d302      	bcc.n	800d75c <xQueueGenericSend+0xdc>
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b02      	cmp	r3, #2
 800d75a:	d129      	bne.n	800d7b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	68b9      	ldr	r1, [r7, #8]
 800d760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d762:	f000 fa0f 	bl	800db84 <prvCopyDataToQueue>
 800d766:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d010      	beq.n	800d792 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d772:	3324      	adds	r3, #36	@ 0x24
 800d774:	4618      	mov	r0, r3
 800d776:	f000 ffdd 	bl	800e734 <xTaskRemoveFromEventList>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d013      	beq.n	800d7a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d780:	4b3f      	ldr	r3, [pc, #252]	@ (800d880 <xQueueGenericSend+0x200>)
 800d782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d786:	601a      	str	r2, [r3, #0]
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	e00a      	b.n	800d7a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d794:	2b00      	cmp	r3, #0
 800d796:	d007      	beq.n	800d7a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d798:	4b39      	ldr	r3, [pc, #228]	@ (800d880 <xQueueGenericSend+0x200>)
 800d79a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d7a8:	f7ff fd70 	bl	800d28c <vPortExitCritical>
				return pdPASS;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	e063      	b.n	800d878 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d103      	bne.n	800d7be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7b6:	f7ff fd69 	bl	800d28c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	e05c      	b.n	800d878 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d106      	bne.n	800d7d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7c4:	f107 0314 	add.w	r3, r7, #20
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f001 f817 	bl	800e7fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7d2:	f7ff fd5b 	bl	800d28c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7d6:	f000 fd87 	bl	800e2e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7da:	f7ff fd25 	bl	800d228 <vPortEnterCritical>
 800d7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7e4:	b25b      	sxtb	r3, r3
 800d7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ea:	d103      	bne.n	800d7f4 <xQueueGenericSend+0x174>
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7fa:	b25b      	sxtb	r3, r3
 800d7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d800:	d103      	bne.n	800d80a <xQueueGenericSend+0x18a>
 800d802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d804:	2200      	movs	r2, #0
 800d806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d80a:	f7ff fd3f 	bl	800d28c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d80e:	1d3a      	adds	r2, r7, #4
 800d810:	f107 0314 	add.w	r3, r7, #20
 800d814:	4611      	mov	r1, r2
 800d816:	4618      	mov	r0, r3
 800d818:	f001 f806 	bl	800e828 <xTaskCheckForTimeOut>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d124      	bne.n	800d86c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d822:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d824:	f000 faa6 	bl	800dd74 <prvIsQueueFull>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d018      	beq.n	800d860 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d830:	3310      	adds	r3, #16
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	4611      	mov	r1, r2
 800d836:	4618      	mov	r0, r3
 800d838:	f000 ff2a 	bl	800e690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d83c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d83e:	f000 fa31 	bl	800dca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d842:	f000 fd5f 	bl	800e304 <xTaskResumeAll>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f47f af7c 	bne.w	800d746 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d84e:	4b0c      	ldr	r3, [pc, #48]	@ (800d880 <xQueueGenericSend+0x200>)
 800d850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d854:	601a      	str	r2, [r3, #0]
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	e772      	b.n	800d746 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d862:	f000 fa1f 	bl	800dca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d866:	f000 fd4d 	bl	800e304 <xTaskResumeAll>
 800d86a:	e76c      	b.n	800d746 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d86c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d86e:	f000 fa19 	bl	800dca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d872:	f000 fd47 	bl	800e304 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d876:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3738      	adds	r7, #56	@ 0x38
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	e000ed04 	.word	0xe000ed04

0800d884 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b090      	sub	sp, #64	@ 0x40
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
 800d890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10b      	bne.n	800d8b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8ae:	bf00      	nop
 800d8b0:	bf00      	nop
 800d8b2:	e7fd      	b.n	800d8b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d103      	bne.n	800d8c2 <xQueueGenericSendFromISR+0x3e>
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d101      	bne.n	800d8c6 <xQueueGenericSendFromISR+0x42>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e000      	b.n	800d8c8 <xQueueGenericSendFromISR+0x44>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10b      	bne.n	800d8e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	e7fd      	b.n	800d8e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d103      	bne.n	800d8f2 <xQueueGenericSendFromISR+0x6e>
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d101      	bne.n	800d8f6 <xQueueGenericSendFromISR+0x72>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e000      	b.n	800d8f8 <xQueueGenericSendFromISR+0x74>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10b      	bne.n	800d914 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	623b      	str	r3, [r7, #32]
}
 800d90e:	bf00      	nop
 800d910:	bf00      	nop
 800d912:	e7fd      	b.n	800d910 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d914:	f7ff fd68 	bl	800d3e8 <vPortValidateInterruptPriority>
	__asm volatile
 800d918:	f3ef 8211 	mrs	r2, BASEPRI
 800d91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d920:	f383 8811 	msr	BASEPRI, r3
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	f3bf 8f4f 	dsb	sy
 800d92c:	61fa      	str	r2, [r7, #28]
 800d92e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d930:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d932:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d302      	bcc.n	800d946 <xQueueGenericSendFromISR+0xc2>
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	2b02      	cmp	r3, #2
 800d944:	d12f      	bne.n	800d9a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d94c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d954:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d956:	683a      	ldr	r2, [r7, #0]
 800d958:	68b9      	ldr	r1, [r7, #8]
 800d95a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d95c:	f000 f912 	bl	800db84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d960:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d968:	d112      	bne.n	800d990 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d016      	beq.n	800d9a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d974:	3324      	adds	r3, #36	@ 0x24
 800d976:	4618      	mov	r0, r3
 800d978:	f000 fedc 	bl	800e734 <xTaskRemoveFromEventList>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00e      	beq.n	800d9a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00b      	beq.n	800d9a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	e007      	b.n	800d9a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d994:	3301      	adds	r3, #1
 800d996:	b2db      	uxtb	r3, r3
 800d998:	b25a      	sxtb	r2, r3
 800d99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d9a4:	e001      	b.n	800d9aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ac:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f383 8811 	msr	BASEPRI, r3
}
 800d9b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3740      	adds	r7, #64	@ 0x40
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b08c      	sub	sp, #48	@ 0x30
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10b      	bne.n	800d9f2 <xQueueReceive+0x32>
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9de:	f383 8811 	msr	BASEPRI, r3
 800d9e2:	f3bf 8f6f 	isb	sy
 800d9e6:	f3bf 8f4f 	dsb	sy
 800d9ea:	623b      	str	r3, [r7, #32]
}
 800d9ec:	bf00      	nop
 800d9ee:	bf00      	nop
 800d9f0:	e7fd      	b.n	800d9ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d103      	bne.n	800da00 <xQueueReceive+0x40>
 800d9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d101      	bne.n	800da04 <xQueueReceive+0x44>
 800da00:	2301      	movs	r3, #1
 800da02:	e000      	b.n	800da06 <xQueueReceive+0x46>
 800da04:	2300      	movs	r3, #0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10b      	bne.n	800da22 <xQueueReceive+0x62>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	61fb      	str	r3, [r7, #28]
}
 800da1c:	bf00      	nop
 800da1e:	bf00      	nop
 800da20:	e7fd      	b.n	800da1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da22:	f001 f847 	bl	800eab4 <xTaskGetSchedulerState>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d102      	bne.n	800da32 <xQueueReceive+0x72>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <xQueueReceive+0x76>
 800da32:	2301      	movs	r3, #1
 800da34:	e000      	b.n	800da38 <xQueueReceive+0x78>
 800da36:	2300      	movs	r3, #0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d10b      	bne.n	800da54 <xQueueReceive+0x94>
	__asm volatile
 800da3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	61bb      	str	r3, [r7, #24]
}
 800da4e:	bf00      	nop
 800da50:	bf00      	nop
 800da52:	e7fd      	b.n	800da50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da54:	f7ff fbe8 	bl	800d228 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da60:	2b00      	cmp	r3, #0
 800da62:	d01f      	beq.n	800daa4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da64:	68b9      	ldr	r1, [r7, #8]
 800da66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da68:	f000 f8f6 	bl	800dc58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6e:	1e5a      	subs	r2, r3, #1
 800da70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00f      	beq.n	800da9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7e:	3310      	adds	r3, #16
 800da80:	4618      	mov	r0, r3
 800da82:	f000 fe57 	bl	800e734 <xTaskRemoveFromEventList>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d007      	beq.n	800da9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da8c:	4b3c      	ldr	r3, [pc, #240]	@ (800db80 <xQueueReceive+0x1c0>)
 800da8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da92:	601a      	str	r2, [r3, #0]
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da9c:	f7ff fbf6 	bl	800d28c <vPortExitCritical>
				return pdPASS;
 800daa0:	2301      	movs	r3, #1
 800daa2:	e069      	b.n	800db78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d103      	bne.n	800dab2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800daaa:	f7ff fbef 	bl	800d28c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800daae:	2300      	movs	r3, #0
 800dab0:	e062      	b.n	800db78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d106      	bne.n	800dac6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dab8:	f107 0310 	add.w	r3, r7, #16
 800dabc:	4618      	mov	r0, r3
 800dabe:	f000 fe9d 	bl	800e7fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dac2:	2301      	movs	r3, #1
 800dac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dac6:	f7ff fbe1 	bl	800d28c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800daca:	f000 fc0d 	bl	800e2e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dace:	f7ff fbab 	bl	800d228 <vPortEnterCritical>
 800dad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dad8:	b25b      	sxtb	r3, r3
 800dada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dade:	d103      	bne.n	800dae8 <xQueueReceive+0x128>
 800dae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae2:	2200      	movs	r2, #0
 800dae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800daee:	b25b      	sxtb	r3, r3
 800daf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf4:	d103      	bne.n	800dafe <xQueueReceive+0x13e>
 800daf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dafe:	f7ff fbc5 	bl	800d28c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db02:	1d3a      	adds	r2, r7, #4
 800db04:	f107 0310 	add.w	r3, r7, #16
 800db08:	4611      	mov	r1, r2
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 fe8c 	bl	800e828 <xTaskCheckForTimeOut>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d123      	bne.n	800db5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db18:	f000 f916 	bl	800dd48 <prvIsQueueEmpty>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d017      	beq.n	800db52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db24:	3324      	adds	r3, #36	@ 0x24
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	4611      	mov	r1, r2
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 fdb0 	bl	800e690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db32:	f000 f8b7 	bl	800dca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db36:	f000 fbe5 	bl	800e304 <xTaskResumeAll>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d189      	bne.n	800da54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800db40:	4b0f      	ldr	r3, [pc, #60]	@ (800db80 <xQueueReceive+0x1c0>)
 800db42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	e780      	b.n	800da54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800db52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db54:	f000 f8a6 	bl	800dca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db58:	f000 fbd4 	bl	800e304 <xTaskResumeAll>
 800db5c:	e77a      	b.n	800da54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800db5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db60:	f000 f8a0 	bl	800dca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db64:	f000 fbce 	bl	800e304 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db6a:	f000 f8ed 	bl	800dd48 <prvIsQueueEmpty>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	f43f af6f 	beq.w	800da54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3730      	adds	r7, #48	@ 0x30
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	e000ed04 	.word	0xe000ed04

0800db84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800db90:	2300      	movs	r3, #0
 800db92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10d      	bne.n	800dbbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d14d      	bne.n	800dc46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f000 ff9e 	bl	800eaf0 <xTaskPriorityDisinherit>
 800dbb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	609a      	str	r2, [r3, #8]
 800dbbc:	e043      	b.n	800dc46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d119      	bne.n	800dbf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6858      	ldr	r0, [r3, #4]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbcc:	461a      	mov	r2, r3
 800dbce:	68b9      	ldr	r1, [r7, #8]
 800dbd0:	f001 fc02 	bl	800f3d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	685a      	ldr	r2, [r3, #4]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbdc:	441a      	add	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d32b      	bcc.n	800dc46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	605a      	str	r2, [r3, #4]
 800dbf6:	e026      	b.n	800dc46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68d8      	ldr	r0, [r3, #12]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc00:	461a      	mov	r2, r3
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	f001 fbe8 	bl	800f3d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	68da      	ldr	r2, [r3, #12]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc10:	425b      	negs	r3, r3
 800dc12:	441a      	add	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	68da      	ldr	r2, [r3, #12]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d207      	bcs.n	800dc34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	689a      	ldr	r2, [r3, #8]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc2c:	425b      	negs	r3, r3
 800dc2e:	441a      	add	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b02      	cmp	r3, #2
 800dc38:	d105      	bne.n	800dc46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	3b01      	subs	r3, #1
 800dc44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dc4e:	697b      	ldr	r3, [r7, #20]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d018      	beq.n	800dc9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68da      	ldr	r2, [r3, #12]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc72:	441a      	add	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d303      	bcc.n	800dc8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68d9      	ldr	r1, [r3, #12]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc94:	461a      	mov	r2, r3
 800dc96:	6838      	ldr	r0, [r7, #0]
 800dc98:	f001 fb9e 	bl	800f3d8 <memcpy>
	}
}
 800dc9c:	bf00      	nop
 800dc9e:	3708      	adds	r7, #8
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dcac:	f7ff fabc 	bl	800d228 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcb8:	e011      	b.n	800dcde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d012      	beq.n	800dce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	3324      	adds	r3, #36	@ 0x24
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 fd34 	bl	800e734 <xTaskRemoveFromEventList>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d001      	beq.n	800dcd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dcd2:	f000 fe0d 	bl	800e8f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	dce9      	bgt.n	800dcba <prvUnlockQueue+0x16>
 800dce6:	e000      	b.n	800dcea <prvUnlockQueue+0x46>
					break;
 800dce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	22ff      	movs	r2, #255	@ 0xff
 800dcee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dcf2:	f7ff facb 	bl	800d28c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dcf6:	f7ff fa97 	bl	800d228 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd02:	e011      	b.n	800dd28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d012      	beq.n	800dd32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	3310      	adds	r3, #16
 800dd10:	4618      	mov	r0, r3
 800dd12:	f000 fd0f 	bl	800e734 <xTaskRemoveFromEventList>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd1c:	f000 fde8 	bl	800e8f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	dce9      	bgt.n	800dd04 <prvUnlockQueue+0x60>
 800dd30:	e000      	b.n	800dd34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	22ff      	movs	r2, #255	@ 0xff
 800dd38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dd3c:	f7ff faa6 	bl	800d28c <vPortExitCritical>
}
 800dd40:	bf00      	nop
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd50:	f7ff fa6a 	bl	800d228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d102      	bne.n	800dd62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	e001      	b.n	800dd66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd62:	2300      	movs	r3, #0
 800dd64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd66:	f7ff fa91 	bl	800d28c <vPortExitCritical>

	return xReturn;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd7c:	f7ff fa54 	bl	800d228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d102      	bne.n	800dd92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	60fb      	str	r3, [r7, #12]
 800dd90:	e001      	b.n	800dd96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dd92:	2300      	movs	r3, #0
 800dd94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd96:	f7ff fa79 	bl	800d28c <vPortExitCritical>

	return xReturn;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60fb      	str	r3, [r7, #12]
 800ddb2:	e014      	b.n	800ddde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ddb4:	4a0f      	ldr	r2, [pc, #60]	@ (800ddf4 <vQueueAddToRegistry+0x50>)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10b      	bne.n	800ddd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ddc0:	490c      	ldr	r1, [pc, #48]	@ (800ddf4 <vQueueAddToRegistry+0x50>)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	683a      	ldr	r2, [r7, #0]
 800ddc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ddca:	4a0a      	ldr	r2, [pc, #40]	@ (800ddf4 <vQueueAddToRegistry+0x50>)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	00db      	lsls	r3, r3, #3
 800ddd0:	4413      	add	r3, r2
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ddd6:	e006      	b.n	800dde6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3301      	adds	r3, #1
 800dddc:	60fb      	str	r3, [r7, #12]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2b07      	cmp	r3, #7
 800dde2:	d9e7      	bls.n	800ddb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dde4:	bf00      	nop
 800dde6:	bf00      	nop
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	24004cc4 	.word	0x24004cc4

0800ddf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b086      	sub	sp, #24
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de08:	f7ff fa0e 	bl	800d228 <vPortEnterCritical>
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de12:	b25b      	sxtb	r3, r3
 800de14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de18:	d103      	bne.n	800de22 <vQueueWaitForMessageRestricted+0x2a>
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de28:	b25b      	sxtb	r3, r3
 800de2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2e:	d103      	bne.n	800de38 <vQueueWaitForMessageRestricted+0x40>
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2200      	movs	r2, #0
 800de34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de38:	f7ff fa28 	bl	800d28c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de40:	2b00      	cmp	r3, #0
 800de42:	d106      	bne.n	800de52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	3324      	adds	r3, #36	@ 0x24
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 fc45 	bl	800e6dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800de52:	6978      	ldr	r0, [r7, #20]
 800de54:	f7ff ff26 	bl	800dca4 <prvUnlockQueue>
	}
 800de58:	bf00      	nop
 800de5a:	3718      	adds	r7, #24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de60:	b580      	push	{r7, lr}
 800de62:	b08e      	sub	sp, #56	@ 0x38
 800de64:	af04      	add	r7, sp, #16
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800de6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10b      	bne.n	800de8c <xTaskCreateStatic+0x2c>
	__asm volatile
 800de74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de78:	f383 8811 	msr	BASEPRI, r3
 800de7c:	f3bf 8f6f 	isb	sy
 800de80:	f3bf 8f4f 	dsb	sy
 800de84:	623b      	str	r3, [r7, #32]
}
 800de86:	bf00      	nop
 800de88:	bf00      	nop
 800de8a:	e7fd      	b.n	800de88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10b      	bne.n	800deaa <xTaskCreateStatic+0x4a>
	__asm volatile
 800de92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de96:	f383 8811 	msr	BASEPRI, r3
 800de9a:	f3bf 8f6f 	isb	sy
 800de9e:	f3bf 8f4f 	dsb	sy
 800dea2:	61fb      	str	r3, [r7, #28]
}
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop
 800dea8:	e7fd      	b.n	800dea6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800deaa:	235c      	movs	r3, #92	@ 0x5c
 800deac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	2b5c      	cmp	r3, #92	@ 0x5c
 800deb2:	d00b      	beq.n	800decc <xTaskCreateStatic+0x6c>
	__asm volatile
 800deb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb8:	f383 8811 	msr	BASEPRI, r3
 800debc:	f3bf 8f6f 	isb	sy
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	61bb      	str	r3, [r7, #24]
}
 800dec6:	bf00      	nop
 800dec8:	bf00      	nop
 800deca:	e7fd      	b.n	800dec8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800decc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d01e      	beq.n	800df12 <xTaskCreateStatic+0xb2>
 800ded4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d01b      	beq.n	800df12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800deda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dedc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dee2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee6:	2202      	movs	r2, #2
 800dee8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800deec:	2300      	movs	r3, #0
 800deee:	9303      	str	r3, [sp, #12]
 800def0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def2:	9302      	str	r3, [sp, #8]
 800def4:	f107 0314 	add.w	r3, r7, #20
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	68b9      	ldr	r1, [r7, #8]
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 f850 	bl	800dfaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df0c:	f000 f8de 	bl	800e0cc <prvAddNewTaskToReadyList>
 800df10:	e001      	b.n	800df16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800df12:	2300      	movs	r3, #0
 800df14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df16:	697b      	ldr	r3, [r7, #20]
	}
 800df18:	4618      	mov	r0, r3
 800df1a:	3728      	adds	r7, #40	@ 0x28
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df20:	b580      	push	{r7, lr}
 800df22:	b08c      	sub	sp, #48	@ 0x30
 800df24:	af04      	add	r7, sp, #16
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	4613      	mov	r3, r2
 800df2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df30:	88fb      	ldrh	r3, [r7, #6]
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4618      	mov	r0, r3
 800df36:	f7fe fda1 	bl	800ca7c <pvPortMalloc>
 800df3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00e      	beq.n	800df60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df42:	205c      	movs	r0, #92	@ 0x5c
 800df44:	f7fe fd9a 	bl	800ca7c <pvPortMalloc>
 800df48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d003      	beq.n	800df58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	631a      	str	r2, [r3, #48]	@ 0x30
 800df56:	e005      	b.n	800df64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df58:	6978      	ldr	r0, [r7, #20]
 800df5a:	f7fe fe5d 	bl	800cc18 <vPortFree>
 800df5e:	e001      	b.n	800df64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df60:	2300      	movs	r3, #0
 800df62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d017      	beq.n	800df9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df72:	88fa      	ldrh	r2, [r7, #6]
 800df74:	2300      	movs	r3, #0
 800df76:	9303      	str	r3, [sp, #12]
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	9302      	str	r3, [sp, #8]
 800df7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df7e:	9301      	str	r3, [sp, #4]
 800df80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	68b9      	ldr	r1, [r7, #8]
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f000 f80e 	bl	800dfaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df8e:	69f8      	ldr	r0, [r7, #28]
 800df90:	f000 f89c 	bl	800e0cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df94:	2301      	movs	r3, #1
 800df96:	61bb      	str	r3, [r7, #24]
 800df98:	e002      	b.n	800dfa0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df9a:	f04f 33ff 	mov.w	r3, #4294967295
 800df9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfa0:	69bb      	ldr	r3, [r7, #24]
	}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3720      	adds	r7, #32
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b088      	sub	sp, #32
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	60f8      	str	r0, [r7, #12]
 800dfb2:	60b9      	str	r1, [r7, #8]
 800dfb4:	607a      	str	r2, [r7, #4]
 800dfb6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	21a5      	movs	r1, #165	@ 0xa5
 800dfc4:	f001 f9d4 	bl	800f370 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dfc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dfcc:	6879      	ldr	r1, [r7, #4]
 800dfce:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800dfd2:	440b      	add	r3, r1
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	f023 0307 	bic.w	r3, r3, #7
 800dfe0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	f003 0307 	and.w	r3, r3, #7
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00b      	beq.n	800e004 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	617b      	str	r3, [r7, #20]
}
 800dffe:	bf00      	nop
 800e000:	bf00      	nop
 800e002:	e7fd      	b.n	800e000 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d01f      	beq.n	800e04a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e00a:	2300      	movs	r3, #0
 800e00c:	61fb      	str	r3, [r7, #28]
 800e00e:	e012      	b.n	800e036 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	4413      	add	r3, r2
 800e016:	7819      	ldrb	r1, [r3, #0]
 800e018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	4413      	add	r3, r2
 800e01e:	3334      	adds	r3, #52	@ 0x34
 800e020:	460a      	mov	r2, r1
 800e022:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	4413      	add	r3, r2
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d006      	beq.n	800e03e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	3301      	adds	r3, #1
 800e034:	61fb      	str	r3, [r7, #28]
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	2b0f      	cmp	r3, #15
 800e03a:	d9e9      	bls.n	800e010 <prvInitialiseNewTask+0x66>
 800e03c:	e000      	b.n	800e040 <prvInitialiseNewTask+0x96>
			{
				break;
 800e03e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e042:	2200      	movs	r2, #0
 800e044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e048:	e003      	b.n	800e052 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e054:	2b37      	cmp	r3, #55	@ 0x37
 800e056:	d901      	bls.n	800e05c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e058:	2337      	movs	r3, #55	@ 0x37
 800e05a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e060:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e066:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06a:	2200      	movs	r2, #0
 800e06c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e070:	3304      	adds	r3, #4
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe ff10 	bl	800ce98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07a:	3318      	adds	r3, #24
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe ff0b 	bl	800ce98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e086:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e090:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e096:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09a:	2200      	movs	r2, #0
 800e09c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	68f9      	ldr	r1, [r7, #12]
 800e0aa:	69b8      	ldr	r0, [r7, #24]
 800e0ac:	f7fe ff88 	bl	800cfc0 <pxPortInitialiseStack>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d002      	beq.n	800e0c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0c2:	bf00      	nop
 800e0c4:	3720      	adds	r7, #32
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
	...

0800e0cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e0d4:	f7ff f8a8 	bl	800d228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e0d8:	4b2d      	ldr	r3, [pc, #180]	@ (800e190 <prvAddNewTaskToReadyList+0xc4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	4a2c      	ldr	r2, [pc, #176]	@ (800e190 <prvAddNewTaskToReadyList+0xc4>)
 800e0e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e0e2:	4b2c      	ldr	r3, [pc, #176]	@ (800e194 <prvAddNewTaskToReadyList+0xc8>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d109      	bne.n	800e0fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e0ea:	4a2a      	ldr	r2, [pc, #168]	@ (800e194 <prvAddNewTaskToReadyList+0xc8>)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e0f0:	4b27      	ldr	r3, [pc, #156]	@ (800e190 <prvAddNewTaskToReadyList+0xc4>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d110      	bne.n	800e11a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0f8:	f000 fc1e 	bl	800e938 <prvInitialiseTaskLists>
 800e0fc:	e00d      	b.n	800e11a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e0fe:	4b26      	ldr	r3, [pc, #152]	@ (800e198 <prvAddNewTaskToReadyList+0xcc>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d109      	bne.n	800e11a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e106:	4b23      	ldr	r3, [pc, #140]	@ (800e194 <prvAddNewTaskToReadyList+0xc8>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e110:	429a      	cmp	r2, r3
 800e112:	d802      	bhi.n	800e11a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e114:	4a1f      	ldr	r2, [pc, #124]	@ (800e194 <prvAddNewTaskToReadyList+0xc8>)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e11a:	4b20      	ldr	r3, [pc, #128]	@ (800e19c <prvAddNewTaskToReadyList+0xd0>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3301      	adds	r3, #1
 800e120:	4a1e      	ldr	r2, [pc, #120]	@ (800e19c <prvAddNewTaskToReadyList+0xd0>)
 800e122:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e124:	4b1d      	ldr	r3, [pc, #116]	@ (800e19c <prvAddNewTaskToReadyList+0xd0>)
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e130:	4b1b      	ldr	r3, [pc, #108]	@ (800e1a0 <prvAddNewTaskToReadyList+0xd4>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	429a      	cmp	r2, r3
 800e136:	d903      	bls.n	800e140 <prvAddNewTaskToReadyList+0x74>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e13c:	4a18      	ldr	r2, [pc, #96]	@ (800e1a0 <prvAddNewTaskToReadyList+0xd4>)
 800e13e:	6013      	str	r3, [r2, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e144:	4613      	mov	r3, r2
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	4413      	add	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4a15      	ldr	r2, [pc, #84]	@ (800e1a4 <prvAddNewTaskToReadyList+0xd8>)
 800e14e:	441a      	add	r2, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3304      	adds	r3, #4
 800e154:	4619      	mov	r1, r3
 800e156:	4610      	mov	r0, r2
 800e158:	f7fe feab 	bl	800ceb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e15c:	f7ff f896 	bl	800d28c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e160:	4b0d      	ldr	r3, [pc, #52]	@ (800e198 <prvAddNewTaskToReadyList+0xcc>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00e      	beq.n	800e186 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e168:	4b0a      	ldr	r3, [pc, #40]	@ (800e194 <prvAddNewTaskToReadyList+0xc8>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e172:	429a      	cmp	r2, r3
 800e174:	d207      	bcs.n	800e186 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e176:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a8 <prvAddNewTaskToReadyList+0xdc>)
 800e178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e186:	bf00      	nop
 800e188:	3708      	adds	r7, #8
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	240051d8 	.word	0x240051d8
 800e194:	24004d04 	.word	0x24004d04
 800e198:	240051e4 	.word	0x240051e4
 800e19c:	240051f4 	.word	0x240051f4
 800e1a0:	240051e0 	.word	0x240051e0
 800e1a4:	24004d08 	.word	0x24004d08
 800e1a8:	e000ed04 	.word	0xe000ed04

0800e1ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d018      	beq.n	800e1f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e1be:	4b14      	ldr	r3, [pc, #80]	@ (800e210 <vTaskDelay+0x64>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00b      	beq.n	800e1de <vTaskDelay+0x32>
	__asm volatile
 800e1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ca:	f383 8811 	msr	BASEPRI, r3
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	60bb      	str	r3, [r7, #8]
}
 800e1d8:	bf00      	nop
 800e1da:	bf00      	nop
 800e1dc:	e7fd      	b.n	800e1da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e1de:	f000 f883 	bl	800e2e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fcf3 	bl	800ebd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e1ea:	f000 f88b 	bl	800e304 <xTaskResumeAll>
 800e1ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d107      	bne.n	800e206 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e1f6:	4b07      	ldr	r3, [pc, #28]	@ (800e214 <vTaskDelay+0x68>)
 800e1f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e206:	bf00      	nop
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	24005200 	.word	0x24005200
 800e214:	e000ed04 	.word	0xe000ed04

0800e218 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b08a      	sub	sp, #40	@ 0x28
 800e21c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e21e:	2300      	movs	r3, #0
 800e220:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e222:	2300      	movs	r3, #0
 800e224:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e226:	463a      	mov	r2, r7
 800e228:	1d39      	adds	r1, r7, #4
 800e22a:	f107 0308 	add.w	r3, r7, #8
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fe fbf0 	bl	800ca14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	68ba      	ldr	r2, [r7, #8]
 800e23a:	9202      	str	r2, [sp, #8]
 800e23c:	9301      	str	r3, [sp, #4]
 800e23e:	2300      	movs	r3, #0
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	2300      	movs	r3, #0
 800e244:	460a      	mov	r2, r1
 800e246:	4922      	ldr	r1, [pc, #136]	@ (800e2d0 <vTaskStartScheduler+0xb8>)
 800e248:	4822      	ldr	r0, [pc, #136]	@ (800e2d4 <vTaskStartScheduler+0xbc>)
 800e24a:	f7ff fe09 	bl	800de60 <xTaskCreateStatic>
 800e24e:	4603      	mov	r3, r0
 800e250:	4a21      	ldr	r2, [pc, #132]	@ (800e2d8 <vTaskStartScheduler+0xc0>)
 800e252:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e254:	4b20      	ldr	r3, [pc, #128]	@ (800e2d8 <vTaskStartScheduler+0xc0>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d002      	beq.n	800e262 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e25c:	2301      	movs	r3, #1
 800e25e:	617b      	str	r3, [r7, #20]
 800e260:	e001      	b.n	800e266 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e262:	2300      	movs	r3, #0
 800e264:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d102      	bne.n	800e272 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e26c:	f000 fd04 	bl	800ec78 <xTimerCreateTimerTask>
 800e270:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d116      	bne.n	800e2a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e27c:	f383 8811 	msr	BASEPRI, r3
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	613b      	str	r3, [r7, #16]
}
 800e28a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e28c:	4b13      	ldr	r3, [pc, #76]	@ (800e2dc <vTaskStartScheduler+0xc4>)
 800e28e:	f04f 32ff 	mov.w	r2, #4294967295
 800e292:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e294:	4b12      	ldr	r3, [pc, #72]	@ (800e2e0 <vTaskStartScheduler+0xc8>)
 800e296:	2201      	movs	r2, #1
 800e298:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e29a:	4b12      	ldr	r3, [pc, #72]	@ (800e2e4 <vTaskStartScheduler+0xcc>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e2a0:	f7fe ff1e 	bl	800d0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e2a4:	e00f      	b.n	800e2c6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ac:	d10b      	bne.n	800e2c6 <vTaskStartScheduler+0xae>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	60fb      	str	r3, [r7, #12]
}
 800e2c0:	bf00      	nop
 800e2c2:	bf00      	nop
 800e2c4:	e7fd      	b.n	800e2c2 <vTaskStartScheduler+0xaa>
}
 800e2c6:	bf00      	nop
 800e2c8:	3718      	adds	r7, #24
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	0800fcc4 	.word	0x0800fcc4
 800e2d4:	0800e909 	.word	0x0800e909
 800e2d8:	240051fc 	.word	0x240051fc
 800e2dc:	240051f8 	.word	0x240051f8
 800e2e0:	240051e4 	.word	0x240051e4
 800e2e4:	240051dc 	.word	0x240051dc

0800e2e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e2ec:	4b04      	ldr	r3, [pc, #16]	@ (800e300 <vTaskSuspendAll+0x18>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	4a03      	ldr	r2, [pc, #12]	@ (800e300 <vTaskSuspendAll+0x18>)
 800e2f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e2f6:	bf00      	nop
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	24005200 	.word	0x24005200

0800e304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e30a:	2300      	movs	r3, #0
 800e30c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e30e:	2300      	movs	r3, #0
 800e310:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e312:	4b42      	ldr	r3, [pc, #264]	@ (800e41c <xTaskResumeAll+0x118>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10b      	bne.n	800e332 <xTaskResumeAll+0x2e>
	__asm volatile
 800e31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e31e:	f383 8811 	msr	BASEPRI, r3
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	f3bf 8f4f 	dsb	sy
 800e32a:	603b      	str	r3, [r7, #0]
}
 800e32c:	bf00      	nop
 800e32e:	bf00      	nop
 800e330:	e7fd      	b.n	800e32e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e332:	f7fe ff79 	bl	800d228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e336:	4b39      	ldr	r3, [pc, #228]	@ (800e41c <xTaskResumeAll+0x118>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	3b01      	subs	r3, #1
 800e33c:	4a37      	ldr	r2, [pc, #220]	@ (800e41c <xTaskResumeAll+0x118>)
 800e33e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e340:	4b36      	ldr	r3, [pc, #216]	@ (800e41c <xTaskResumeAll+0x118>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d162      	bne.n	800e40e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e348:	4b35      	ldr	r3, [pc, #212]	@ (800e420 <xTaskResumeAll+0x11c>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d05e      	beq.n	800e40e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e350:	e02f      	b.n	800e3b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e352:	4b34      	ldr	r3, [pc, #208]	@ (800e424 <xTaskResumeAll+0x120>)
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	3318      	adds	r3, #24
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fe fe04 	bl	800cf6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	3304      	adds	r3, #4
 800e368:	4618      	mov	r0, r3
 800e36a:	f7fe fdff 	bl	800cf6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e372:	4b2d      	ldr	r3, [pc, #180]	@ (800e428 <xTaskResumeAll+0x124>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	429a      	cmp	r2, r3
 800e378:	d903      	bls.n	800e382 <xTaskResumeAll+0x7e>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e37e:	4a2a      	ldr	r2, [pc, #168]	@ (800e428 <xTaskResumeAll+0x124>)
 800e380:	6013      	str	r3, [r2, #0]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e386:	4613      	mov	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4a27      	ldr	r2, [pc, #156]	@ (800e42c <xTaskResumeAll+0x128>)
 800e390:	441a      	add	r2, r3
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	3304      	adds	r3, #4
 800e396:	4619      	mov	r1, r3
 800e398:	4610      	mov	r0, r2
 800e39a:	f7fe fd8a 	bl	800ceb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3a2:	4b23      	ldr	r3, [pc, #140]	@ (800e430 <xTaskResumeAll+0x12c>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d302      	bcc.n	800e3b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e3ac:	4b21      	ldr	r3, [pc, #132]	@ (800e434 <xTaskResumeAll+0x130>)
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3b2:	4b1c      	ldr	r3, [pc, #112]	@ (800e424 <xTaskResumeAll+0x120>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1cb      	bne.n	800e352 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e3c0:	f000 fb58 	bl	800ea74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e3c4:	4b1c      	ldr	r3, [pc, #112]	@ (800e438 <xTaskResumeAll+0x134>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d010      	beq.n	800e3f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e3d0:	f000 f846 	bl	800e460 <xTaskIncrementTick>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e3da:	4b16      	ldr	r3, [pc, #88]	@ (800e434 <xTaskResumeAll+0x130>)
 800e3dc:	2201      	movs	r2, #1
 800e3de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d1f1      	bne.n	800e3d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e3ec:	4b12      	ldr	r3, [pc, #72]	@ (800e438 <xTaskResumeAll+0x134>)
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e3f2:	4b10      	ldr	r3, [pc, #64]	@ (800e434 <xTaskResumeAll+0x130>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d009      	beq.n	800e40e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e3fe:	4b0f      	ldr	r3, [pc, #60]	@ (800e43c <xTaskResumeAll+0x138>)
 800e400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e404:	601a      	str	r2, [r3, #0]
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e40e:	f7fe ff3d 	bl	800d28c <vPortExitCritical>

	return xAlreadyYielded;
 800e412:	68bb      	ldr	r3, [r7, #8]
}
 800e414:	4618      	mov	r0, r3
 800e416:	3710      	adds	r7, #16
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	24005200 	.word	0x24005200
 800e420:	240051d8 	.word	0x240051d8
 800e424:	24005198 	.word	0x24005198
 800e428:	240051e0 	.word	0x240051e0
 800e42c:	24004d08 	.word	0x24004d08
 800e430:	24004d04 	.word	0x24004d04
 800e434:	240051ec 	.word	0x240051ec
 800e438:	240051e8 	.word	0x240051e8
 800e43c:	e000ed04 	.word	0xe000ed04

0800e440 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e440:	b480      	push	{r7}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e446:	4b05      	ldr	r3, [pc, #20]	@ (800e45c <xTaskGetTickCount+0x1c>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e44c:	687b      	ldr	r3, [r7, #4]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	240051dc 	.word	0x240051dc

0800e460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e466:	2300      	movs	r3, #0
 800e468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e46a:	4b4f      	ldr	r3, [pc, #316]	@ (800e5a8 <xTaskIncrementTick+0x148>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	f040 8090 	bne.w	800e594 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e474:	4b4d      	ldr	r3, [pc, #308]	@ (800e5ac <xTaskIncrementTick+0x14c>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	3301      	adds	r3, #1
 800e47a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e47c:	4a4b      	ldr	r2, [pc, #300]	@ (800e5ac <xTaskIncrementTick+0x14c>)
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d121      	bne.n	800e4cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e488:	4b49      	ldr	r3, [pc, #292]	@ (800e5b0 <xTaskIncrementTick+0x150>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00b      	beq.n	800e4aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	603b      	str	r3, [r7, #0]
}
 800e4a4:	bf00      	nop
 800e4a6:	bf00      	nop
 800e4a8:	e7fd      	b.n	800e4a6 <xTaskIncrementTick+0x46>
 800e4aa:	4b41      	ldr	r3, [pc, #260]	@ (800e5b0 <xTaskIncrementTick+0x150>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	60fb      	str	r3, [r7, #12]
 800e4b0:	4b40      	ldr	r3, [pc, #256]	@ (800e5b4 <xTaskIncrementTick+0x154>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a3e      	ldr	r2, [pc, #248]	@ (800e5b0 <xTaskIncrementTick+0x150>)
 800e4b6:	6013      	str	r3, [r2, #0]
 800e4b8:	4a3e      	ldr	r2, [pc, #248]	@ (800e5b4 <xTaskIncrementTick+0x154>)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6013      	str	r3, [r2, #0]
 800e4be:	4b3e      	ldr	r3, [pc, #248]	@ (800e5b8 <xTaskIncrementTick+0x158>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	4a3c      	ldr	r2, [pc, #240]	@ (800e5b8 <xTaskIncrementTick+0x158>)
 800e4c6:	6013      	str	r3, [r2, #0]
 800e4c8:	f000 fad4 	bl	800ea74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e4cc:	4b3b      	ldr	r3, [pc, #236]	@ (800e5bc <xTaskIncrementTick+0x15c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	693a      	ldr	r2, [r7, #16]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d349      	bcc.n	800e56a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4d6:	4b36      	ldr	r3, [pc, #216]	@ (800e5b0 <xTaskIncrementTick+0x150>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d104      	bne.n	800e4ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4e0:	4b36      	ldr	r3, [pc, #216]	@ (800e5bc <xTaskIncrementTick+0x15c>)
 800e4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4e6:	601a      	str	r2, [r3, #0]
					break;
 800e4e8:	e03f      	b.n	800e56a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ea:	4b31      	ldr	r3, [pc, #196]	@ (800e5b0 <xTaskIncrementTick+0x150>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4fa:	693a      	ldr	r2, [r7, #16]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d203      	bcs.n	800e50a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e502:	4a2e      	ldr	r2, [pc, #184]	@ (800e5bc <xTaskIncrementTick+0x15c>)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e508:	e02f      	b.n	800e56a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	3304      	adds	r3, #4
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fe fd2c 	bl	800cf6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d004      	beq.n	800e526 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	3318      	adds	r3, #24
 800e520:	4618      	mov	r0, r3
 800e522:	f7fe fd23 	bl	800cf6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e52a:	4b25      	ldr	r3, [pc, #148]	@ (800e5c0 <xTaskIncrementTick+0x160>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d903      	bls.n	800e53a <xTaskIncrementTick+0xda>
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e536:	4a22      	ldr	r2, [pc, #136]	@ (800e5c0 <xTaskIncrementTick+0x160>)
 800e538:	6013      	str	r3, [r2, #0]
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e53e:	4613      	mov	r3, r2
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	4413      	add	r3, r2
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	4a1f      	ldr	r2, [pc, #124]	@ (800e5c4 <xTaskIncrementTick+0x164>)
 800e548:	441a      	add	r2, r3
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	3304      	adds	r3, #4
 800e54e:	4619      	mov	r1, r3
 800e550:	4610      	mov	r0, r2
 800e552:	f7fe fcae 	bl	800ceb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e55a:	4b1b      	ldr	r3, [pc, #108]	@ (800e5c8 <xTaskIncrementTick+0x168>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e560:	429a      	cmp	r2, r3
 800e562:	d3b8      	bcc.n	800e4d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e564:	2301      	movs	r3, #1
 800e566:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e568:	e7b5      	b.n	800e4d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e56a:	4b17      	ldr	r3, [pc, #92]	@ (800e5c8 <xTaskIncrementTick+0x168>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e570:	4914      	ldr	r1, [pc, #80]	@ (800e5c4 <xTaskIncrementTick+0x164>)
 800e572:	4613      	mov	r3, r2
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4413      	add	r3, r2
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	440b      	add	r3, r1
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d901      	bls.n	800e586 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e582:	2301      	movs	r3, #1
 800e584:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e586:	4b11      	ldr	r3, [pc, #68]	@ (800e5cc <xTaskIncrementTick+0x16c>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d007      	beq.n	800e59e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e58e:	2301      	movs	r3, #1
 800e590:	617b      	str	r3, [r7, #20]
 800e592:	e004      	b.n	800e59e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e594:	4b0e      	ldr	r3, [pc, #56]	@ (800e5d0 <xTaskIncrementTick+0x170>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3301      	adds	r3, #1
 800e59a:	4a0d      	ldr	r2, [pc, #52]	@ (800e5d0 <xTaskIncrementTick+0x170>)
 800e59c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e59e:	697b      	ldr	r3, [r7, #20]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3718      	adds	r7, #24
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	24005200 	.word	0x24005200
 800e5ac:	240051dc 	.word	0x240051dc
 800e5b0:	24005190 	.word	0x24005190
 800e5b4:	24005194 	.word	0x24005194
 800e5b8:	240051f0 	.word	0x240051f0
 800e5bc:	240051f8 	.word	0x240051f8
 800e5c0:	240051e0 	.word	0x240051e0
 800e5c4:	24004d08 	.word	0x24004d08
 800e5c8:	24004d04 	.word	0x24004d04
 800e5cc:	240051ec 	.word	0x240051ec
 800e5d0:	240051e8 	.word	0x240051e8

0800e5d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5da:	4b28      	ldr	r3, [pc, #160]	@ (800e67c <vTaskSwitchContext+0xa8>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d003      	beq.n	800e5ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5e2:	4b27      	ldr	r3, [pc, #156]	@ (800e680 <vTaskSwitchContext+0xac>)
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5e8:	e042      	b.n	800e670 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e5ea:	4b25      	ldr	r3, [pc, #148]	@ (800e680 <vTaskSwitchContext+0xac>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5f0:	4b24      	ldr	r3, [pc, #144]	@ (800e684 <vTaskSwitchContext+0xb0>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	60fb      	str	r3, [r7, #12]
 800e5f6:	e011      	b.n	800e61c <vTaskSwitchContext+0x48>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d10b      	bne.n	800e616 <vTaskSwitchContext+0x42>
	__asm volatile
 800e5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	607b      	str	r3, [r7, #4]
}
 800e610:	bf00      	nop
 800e612:	bf00      	nop
 800e614:	e7fd      	b.n	800e612 <vTaskSwitchContext+0x3e>
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3b01      	subs	r3, #1
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	491a      	ldr	r1, [pc, #104]	@ (800e688 <vTaskSwitchContext+0xb4>)
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	4613      	mov	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	440b      	add	r3, r1
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d0e3      	beq.n	800e5f8 <vTaskSwitchContext+0x24>
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	4613      	mov	r3, r2
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	4413      	add	r3, r2
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	4a13      	ldr	r2, [pc, #76]	@ (800e688 <vTaskSwitchContext+0xb4>)
 800e63c:	4413      	add	r3, r2
 800e63e:	60bb      	str	r3, [r7, #8]
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	605a      	str	r2, [r3, #4]
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	685a      	ldr	r2, [r3, #4]
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	3308      	adds	r3, #8
 800e652:	429a      	cmp	r2, r3
 800e654:	d104      	bne.n	800e660 <vTaskSwitchContext+0x8c>
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	685a      	ldr	r2, [r3, #4]
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	605a      	str	r2, [r3, #4]
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	4a09      	ldr	r2, [pc, #36]	@ (800e68c <vTaskSwitchContext+0xb8>)
 800e668:	6013      	str	r3, [r2, #0]
 800e66a:	4a06      	ldr	r2, [pc, #24]	@ (800e684 <vTaskSwitchContext+0xb0>)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6013      	str	r3, [r2, #0]
}
 800e670:	bf00      	nop
 800e672:	3714      	adds	r7, #20
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	24005200 	.word	0x24005200
 800e680:	240051ec 	.word	0x240051ec
 800e684:	240051e0 	.word	0x240051e0
 800e688:	24004d08 	.word	0x24004d08
 800e68c:	24004d04 	.word	0x24004d04

0800e690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d10b      	bne.n	800e6b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a4:	f383 8811 	msr	BASEPRI, r3
 800e6a8:	f3bf 8f6f 	isb	sy
 800e6ac:	f3bf 8f4f 	dsb	sy
 800e6b0:	60fb      	str	r3, [r7, #12]
}
 800e6b2:	bf00      	nop
 800e6b4:	bf00      	nop
 800e6b6:	e7fd      	b.n	800e6b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6b8:	4b07      	ldr	r3, [pc, #28]	@ (800e6d8 <vTaskPlaceOnEventList+0x48>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3318      	adds	r3, #24
 800e6be:	4619      	mov	r1, r3
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7fe fc1a 	bl	800cefa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6c6:	2101      	movs	r1, #1
 800e6c8:	6838      	ldr	r0, [r7, #0]
 800e6ca:	f000 fa81 	bl	800ebd0 <prvAddCurrentTaskToDelayedList>
}
 800e6ce:	bf00      	nop
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	24004d04 	.word	0x24004d04

0800e6dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b086      	sub	sp, #24
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10b      	bne.n	800e706 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	617b      	str	r3, [r7, #20]
}
 800e700:	bf00      	nop
 800e702:	bf00      	nop
 800e704:	e7fd      	b.n	800e702 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e706:	4b0a      	ldr	r3, [pc, #40]	@ (800e730 <vTaskPlaceOnEventListRestricted+0x54>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	3318      	adds	r3, #24
 800e70c:	4619      	mov	r1, r3
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7fe fbcf 	bl	800ceb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e71a:	f04f 33ff 	mov.w	r3, #4294967295
 800e71e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e720:	6879      	ldr	r1, [r7, #4]
 800e722:	68b8      	ldr	r0, [r7, #8]
 800e724:	f000 fa54 	bl	800ebd0 <prvAddCurrentTaskToDelayedList>
	}
 800e728:	bf00      	nop
 800e72a:	3718      	adds	r7, #24
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	24004d04 	.word	0x24004d04

0800e734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d10b      	bne.n	800e762 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	60fb      	str	r3, [r7, #12]
}
 800e75c:	bf00      	nop
 800e75e:	bf00      	nop
 800e760:	e7fd      	b.n	800e75e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	3318      	adds	r3, #24
 800e766:	4618      	mov	r0, r3
 800e768:	f7fe fc00 	bl	800cf6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e76c:	4b1d      	ldr	r3, [pc, #116]	@ (800e7e4 <xTaskRemoveFromEventList+0xb0>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d11d      	bne.n	800e7b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	3304      	adds	r3, #4
 800e778:	4618      	mov	r0, r3
 800e77a:	f7fe fbf7 	bl	800cf6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e782:	4b19      	ldr	r3, [pc, #100]	@ (800e7e8 <xTaskRemoveFromEventList+0xb4>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	429a      	cmp	r2, r3
 800e788:	d903      	bls.n	800e792 <xTaskRemoveFromEventList+0x5e>
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e78e:	4a16      	ldr	r2, [pc, #88]	@ (800e7e8 <xTaskRemoveFromEventList+0xb4>)
 800e790:	6013      	str	r3, [r2, #0]
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e796:	4613      	mov	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4413      	add	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	4a13      	ldr	r2, [pc, #76]	@ (800e7ec <xTaskRemoveFromEventList+0xb8>)
 800e7a0:	441a      	add	r2, r3
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	3304      	adds	r3, #4
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	f7fe fb82 	bl	800ceb2 <vListInsertEnd>
 800e7ae:	e005      	b.n	800e7bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	3318      	adds	r3, #24
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	480e      	ldr	r0, [pc, #56]	@ (800e7f0 <xTaskRemoveFromEventList+0xbc>)
 800e7b8:	f7fe fb7b 	bl	800ceb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7c0:	4b0c      	ldr	r3, [pc, #48]	@ (800e7f4 <xTaskRemoveFromEventList+0xc0>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d905      	bls.n	800e7d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e7ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f8 <xTaskRemoveFromEventList+0xc4>)
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	601a      	str	r2, [r3, #0]
 800e7d4:	e001      	b.n	800e7da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e7da:	697b      	ldr	r3, [r7, #20]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3718      	adds	r7, #24
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	24005200 	.word	0x24005200
 800e7e8:	240051e0 	.word	0x240051e0
 800e7ec:	24004d08 	.word	0x24004d08
 800e7f0:	24005198 	.word	0x24005198
 800e7f4:	24004d04 	.word	0x24004d04
 800e7f8:	240051ec 	.word	0x240051ec

0800e7fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e804:	4b06      	ldr	r3, [pc, #24]	@ (800e820 <vTaskInternalSetTimeOutState+0x24>)
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e80c:	4b05      	ldr	r3, [pc, #20]	@ (800e824 <vTaskInternalSetTimeOutState+0x28>)
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	605a      	str	r2, [r3, #4]
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr
 800e820:	240051f0 	.word	0x240051f0
 800e824:	240051dc 	.word	0x240051dc

0800e828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b088      	sub	sp, #32
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10b      	bne.n	800e850 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83c:	f383 8811 	msr	BASEPRI, r3
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	f3bf 8f4f 	dsb	sy
 800e848:	613b      	str	r3, [r7, #16]
}
 800e84a:	bf00      	nop
 800e84c:	bf00      	nop
 800e84e:	e7fd      	b.n	800e84c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10b      	bne.n	800e86e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	60fb      	str	r3, [r7, #12]
}
 800e868:	bf00      	nop
 800e86a:	bf00      	nop
 800e86c:	e7fd      	b.n	800e86a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e86e:	f7fe fcdb 	bl	800d228 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e872:	4b1d      	ldr	r3, [pc, #116]	@ (800e8e8 <xTaskCheckForTimeOut+0xc0>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	69ba      	ldr	r2, [r7, #24]
 800e87e:	1ad3      	subs	r3, r2, r3
 800e880:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e88a:	d102      	bne.n	800e892 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e88c:	2300      	movs	r3, #0
 800e88e:	61fb      	str	r3, [r7, #28]
 800e890:	e023      	b.n	800e8da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	4b15      	ldr	r3, [pc, #84]	@ (800e8ec <xTaskCheckForTimeOut+0xc4>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d007      	beq.n	800e8ae <xTaskCheckForTimeOut+0x86>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	69ba      	ldr	r2, [r7, #24]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d302      	bcc.n	800e8ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	61fb      	str	r3, [r7, #28]
 800e8ac:	e015      	b.n	800e8da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d20b      	bcs.n	800e8d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	1ad2      	subs	r2, r2, r3
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7ff ff99 	bl	800e7fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	61fb      	str	r3, [r7, #28]
 800e8ce:	e004      	b.n	800e8da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e8da:	f7fe fcd7 	bl	800d28c <vPortExitCritical>

	return xReturn;
 800e8de:	69fb      	ldr	r3, [r7, #28]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3720      	adds	r7, #32
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	240051dc 	.word	0x240051dc
 800e8ec:	240051f0 	.word	0x240051f0

0800e8f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e8f4:	4b03      	ldr	r3, [pc, #12]	@ (800e904 <vTaskMissedYield+0x14>)
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	601a      	str	r2, [r3, #0]
}
 800e8fa:	bf00      	nop
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr
 800e904:	240051ec 	.word	0x240051ec

0800e908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e910:	f000 f852 	bl	800e9b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e914:	4b06      	ldr	r3, [pc, #24]	@ (800e930 <prvIdleTask+0x28>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d9f9      	bls.n	800e910 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e91c:	4b05      	ldr	r3, [pc, #20]	@ (800e934 <prvIdleTask+0x2c>)
 800e91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e922:	601a      	str	r2, [r3, #0]
 800e924:	f3bf 8f4f 	dsb	sy
 800e928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e92c:	e7f0      	b.n	800e910 <prvIdleTask+0x8>
 800e92e:	bf00      	nop
 800e930:	24004d08 	.word	0x24004d08
 800e934:	e000ed04 	.word	0xe000ed04

0800e938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e93e:	2300      	movs	r3, #0
 800e940:	607b      	str	r3, [r7, #4]
 800e942:	e00c      	b.n	800e95e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	4613      	mov	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4a12      	ldr	r2, [pc, #72]	@ (800e998 <prvInitialiseTaskLists+0x60>)
 800e950:	4413      	add	r3, r2
 800e952:	4618      	mov	r0, r3
 800e954:	f7fe fa80 	bl	800ce58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	3301      	adds	r3, #1
 800e95c:	607b      	str	r3, [r7, #4]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b37      	cmp	r3, #55	@ 0x37
 800e962:	d9ef      	bls.n	800e944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e964:	480d      	ldr	r0, [pc, #52]	@ (800e99c <prvInitialiseTaskLists+0x64>)
 800e966:	f7fe fa77 	bl	800ce58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e96a:	480d      	ldr	r0, [pc, #52]	@ (800e9a0 <prvInitialiseTaskLists+0x68>)
 800e96c:	f7fe fa74 	bl	800ce58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e970:	480c      	ldr	r0, [pc, #48]	@ (800e9a4 <prvInitialiseTaskLists+0x6c>)
 800e972:	f7fe fa71 	bl	800ce58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e976:	480c      	ldr	r0, [pc, #48]	@ (800e9a8 <prvInitialiseTaskLists+0x70>)
 800e978:	f7fe fa6e 	bl	800ce58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e97c:	480b      	ldr	r0, [pc, #44]	@ (800e9ac <prvInitialiseTaskLists+0x74>)
 800e97e:	f7fe fa6b 	bl	800ce58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e982:	4b0b      	ldr	r3, [pc, #44]	@ (800e9b0 <prvInitialiseTaskLists+0x78>)
 800e984:	4a05      	ldr	r2, [pc, #20]	@ (800e99c <prvInitialiseTaskLists+0x64>)
 800e986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e988:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b4 <prvInitialiseTaskLists+0x7c>)
 800e98a:	4a05      	ldr	r2, [pc, #20]	@ (800e9a0 <prvInitialiseTaskLists+0x68>)
 800e98c:	601a      	str	r2, [r3, #0]
}
 800e98e:	bf00      	nop
 800e990:	3708      	adds	r7, #8
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	24004d08 	.word	0x24004d08
 800e99c:	24005168 	.word	0x24005168
 800e9a0:	2400517c 	.word	0x2400517c
 800e9a4:	24005198 	.word	0x24005198
 800e9a8:	240051ac 	.word	0x240051ac
 800e9ac:	240051c4 	.word	0x240051c4
 800e9b0:	24005190 	.word	0x24005190
 800e9b4:	24005194 	.word	0x24005194

0800e9b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9be:	e019      	b.n	800e9f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9c0:	f7fe fc32 	bl	800d228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9c4:	4b10      	ldr	r3, [pc, #64]	@ (800ea08 <prvCheckTasksWaitingTermination+0x50>)
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	3304      	adds	r3, #4
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7fe facb 	bl	800cf6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9d6:	4b0d      	ldr	r3, [pc, #52]	@ (800ea0c <prvCheckTasksWaitingTermination+0x54>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	4a0b      	ldr	r2, [pc, #44]	@ (800ea0c <prvCheckTasksWaitingTermination+0x54>)
 800e9de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ea10 <prvCheckTasksWaitingTermination+0x58>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	4a0a      	ldr	r2, [pc, #40]	@ (800ea10 <prvCheckTasksWaitingTermination+0x58>)
 800e9e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e9ea:	f7fe fc4f 	bl	800d28c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f810 	bl	800ea14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9f4:	4b06      	ldr	r3, [pc, #24]	@ (800ea10 <prvCheckTasksWaitingTermination+0x58>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1e1      	bne.n	800e9c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e9fc:	bf00      	nop
 800e9fe:	bf00      	nop
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	240051ac 	.word	0x240051ac
 800ea0c:	240051d8 	.word	0x240051d8
 800ea10:	240051c0 	.word	0x240051c0

0800ea14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d108      	bne.n	800ea38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe f8f4 	bl	800cc18 <vPortFree>
				vPortFree( pxTCB );
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7fe f8f1 	bl	800cc18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea36:	e019      	b.n	800ea6c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d103      	bne.n	800ea4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f7fe f8e8 	bl	800cc18 <vPortFree>
	}
 800ea48:	e010      	b.n	800ea6c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d00b      	beq.n	800ea6c <prvDeleteTCB+0x58>
	__asm volatile
 800ea54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea58:	f383 8811 	msr	BASEPRI, r3
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	60fb      	str	r3, [r7, #12]
}
 800ea66:	bf00      	nop
 800ea68:	bf00      	nop
 800ea6a:	e7fd      	b.n	800ea68 <prvDeleteTCB+0x54>
	}
 800ea6c:	bf00      	nop
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea7a:	4b0c      	ldr	r3, [pc, #48]	@ (800eaac <prvResetNextTaskUnblockTime+0x38>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d104      	bne.n	800ea8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea84:	4b0a      	ldr	r3, [pc, #40]	@ (800eab0 <prvResetNextTaskUnblockTime+0x3c>)
 800ea86:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea8c:	e008      	b.n	800eaa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea8e:	4b07      	ldr	r3, [pc, #28]	@ (800eaac <prvResetNextTaskUnblockTime+0x38>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	4a04      	ldr	r2, [pc, #16]	@ (800eab0 <prvResetNextTaskUnblockTime+0x3c>)
 800ea9e:	6013      	str	r3, [r2, #0]
}
 800eaa0:	bf00      	nop
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	24005190 	.word	0x24005190
 800eab0:	240051f8 	.word	0x240051f8

0800eab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eaba:	4b0b      	ldr	r3, [pc, #44]	@ (800eae8 <xTaskGetSchedulerState+0x34>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d102      	bne.n	800eac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eac2:	2301      	movs	r3, #1
 800eac4:	607b      	str	r3, [r7, #4]
 800eac6:	e008      	b.n	800eada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eac8:	4b08      	ldr	r3, [pc, #32]	@ (800eaec <xTaskGetSchedulerState+0x38>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d102      	bne.n	800ead6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ead0:	2302      	movs	r3, #2
 800ead2:	607b      	str	r3, [r7, #4]
 800ead4:	e001      	b.n	800eada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ead6:	2300      	movs	r3, #0
 800ead8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eada:	687b      	ldr	r3, [r7, #4]
	}
 800eadc:	4618      	mov	r0, r3
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr
 800eae8:	240051e4 	.word	0x240051e4
 800eaec:	24005200 	.word	0x24005200

0800eaf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eafc:	2300      	movs	r3, #0
 800eafe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d058      	beq.n	800ebb8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb06:	4b2f      	ldr	r3, [pc, #188]	@ (800ebc4 <xTaskPriorityDisinherit+0xd4>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	693a      	ldr	r2, [r7, #16]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d00b      	beq.n	800eb28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb14:	f383 8811 	msr	BASEPRI, r3
 800eb18:	f3bf 8f6f 	isb	sy
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	60fb      	str	r3, [r7, #12]
}
 800eb22:	bf00      	nop
 800eb24:	bf00      	nop
 800eb26:	e7fd      	b.n	800eb24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10b      	bne.n	800eb48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800eb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb34:	f383 8811 	msr	BASEPRI, r3
 800eb38:	f3bf 8f6f 	isb	sy
 800eb3c:	f3bf 8f4f 	dsb	sy
 800eb40:	60bb      	str	r3, [r7, #8]
}
 800eb42:	bf00      	nop
 800eb44:	bf00      	nop
 800eb46:	e7fd      	b.n	800eb44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb4c:	1e5a      	subs	r2, r3, #1
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d02c      	beq.n	800ebb8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d128      	bne.n	800ebb8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	3304      	adds	r3, #4
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7fe f9fe 	bl	800cf6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb88:	4b0f      	ldr	r3, [pc, #60]	@ (800ebc8 <xTaskPriorityDisinherit+0xd8>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d903      	bls.n	800eb98 <xTaskPriorityDisinherit+0xa8>
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb94:	4a0c      	ldr	r2, [pc, #48]	@ (800ebc8 <xTaskPriorityDisinherit+0xd8>)
 800eb96:	6013      	str	r3, [r2, #0]
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	4413      	add	r3, r2
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4a09      	ldr	r2, [pc, #36]	@ (800ebcc <xTaskPriorityDisinherit+0xdc>)
 800eba6:	441a      	add	r2, r3
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	3304      	adds	r3, #4
 800ebac:	4619      	mov	r1, r3
 800ebae:	4610      	mov	r0, r2
 800ebb0:	f7fe f97f 	bl	800ceb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebb8:	697b      	ldr	r3, [r7, #20]
	}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3718      	adds	r7, #24
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	24004d04 	.word	0x24004d04
 800ebc8:	240051e0 	.word	0x240051e0
 800ebcc:	24004d08 	.word	0x24004d08

0800ebd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ebda:	4b21      	ldr	r3, [pc, #132]	@ (800ec60 <prvAddCurrentTaskToDelayedList+0x90>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebe0:	4b20      	ldr	r3, [pc, #128]	@ (800ec64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	3304      	adds	r3, #4
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fe f9c0 	bl	800cf6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf2:	d10a      	bne.n	800ec0a <prvAddCurrentTaskToDelayedList+0x3a>
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d007      	beq.n	800ec0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebfa:	4b1a      	ldr	r3, [pc, #104]	@ (800ec64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	3304      	adds	r3, #4
 800ec00:	4619      	mov	r1, r3
 800ec02:	4819      	ldr	r0, [pc, #100]	@ (800ec68 <prvAddCurrentTaskToDelayedList+0x98>)
 800ec04:	f7fe f955 	bl	800ceb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ec08:	e026      	b.n	800ec58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ec0a:	68fa      	ldr	r2, [r7, #12]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	4413      	add	r3, r2
 800ec10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ec12:	4b14      	ldr	r3, [pc, #80]	@ (800ec64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	68ba      	ldr	r2, [r7, #8]
 800ec18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d209      	bcs.n	800ec36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec22:	4b12      	ldr	r3, [pc, #72]	@ (800ec6c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	4b0f      	ldr	r3, [pc, #60]	@ (800ec64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	3304      	adds	r3, #4
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	4610      	mov	r0, r2
 800ec30:	f7fe f963 	bl	800cefa <vListInsert>
}
 800ec34:	e010      	b.n	800ec58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec36:	4b0e      	ldr	r3, [pc, #56]	@ (800ec70 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ec64 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	3304      	adds	r3, #4
 800ec40:	4619      	mov	r1, r3
 800ec42:	4610      	mov	r0, r2
 800ec44:	f7fe f959 	bl	800cefa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ec48:	4b0a      	ldr	r3, [pc, #40]	@ (800ec74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68ba      	ldr	r2, [r7, #8]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d202      	bcs.n	800ec58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ec52:	4a08      	ldr	r2, [pc, #32]	@ (800ec74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	6013      	str	r3, [r2, #0]
}
 800ec58:	bf00      	nop
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	240051dc 	.word	0x240051dc
 800ec64:	24004d04 	.word	0x24004d04
 800ec68:	240051c4 	.word	0x240051c4
 800ec6c:	24005194 	.word	0x24005194
 800ec70:	24005190 	.word	0x24005190
 800ec74:	240051f8 	.word	0x240051f8

0800ec78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08a      	sub	sp, #40	@ 0x28
 800ec7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ec82:	f000 fb13 	bl	800f2ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ec86:	4b1d      	ldr	r3, [pc, #116]	@ (800ecfc <xTimerCreateTimerTask+0x84>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d021      	beq.n	800ecd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ec96:	1d3a      	adds	r2, r7, #4
 800ec98:	f107 0108 	add.w	r1, r7, #8
 800ec9c:	f107 030c 	add.w	r3, r7, #12
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fd fed1 	bl	800ca48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eca6:	6879      	ldr	r1, [r7, #4]
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	68fa      	ldr	r2, [r7, #12]
 800ecac:	9202      	str	r2, [sp, #8]
 800ecae:	9301      	str	r3, [sp, #4]
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	460a      	mov	r2, r1
 800ecb8:	4911      	ldr	r1, [pc, #68]	@ (800ed00 <xTimerCreateTimerTask+0x88>)
 800ecba:	4812      	ldr	r0, [pc, #72]	@ (800ed04 <xTimerCreateTimerTask+0x8c>)
 800ecbc:	f7ff f8d0 	bl	800de60 <xTaskCreateStatic>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	4a11      	ldr	r2, [pc, #68]	@ (800ed08 <xTimerCreateTimerTask+0x90>)
 800ecc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ecc6:	4b10      	ldr	r3, [pc, #64]	@ (800ed08 <xTimerCreateTimerTask+0x90>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d001      	beq.n	800ecd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d10b      	bne.n	800ecf0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ecd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecdc:	f383 8811 	msr	BASEPRI, r3
 800ece0:	f3bf 8f6f 	isb	sy
 800ece4:	f3bf 8f4f 	dsb	sy
 800ece8:	613b      	str	r3, [r7, #16]
}
 800ecea:	bf00      	nop
 800ecec:	bf00      	nop
 800ecee:	e7fd      	b.n	800ecec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ecf0:	697b      	ldr	r3, [r7, #20]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3718      	adds	r7, #24
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	24005234 	.word	0x24005234
 800ed00:	0800fccc 	.word	0x0800fccc
 800ed04:	0800ee45 	.word	0x0800ee45
 800ed08:	24005238 	.word	0x24005238

0800ed0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b08a      	sub	sp, #40	@ 0x28
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
 800ed18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d10b      	bne.n	800ed3c <xTimerGenericCommand+0x30>
	__asm volatile
 800ed24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed28:	f383 8811 	msr	BASEPRI, r3
 800ed2c:	f3bf 8f6f 	isb	sy
 800ed30:	f3bf 8f4f 	dsb	sy
 800ed34:	623b      	str	r3, [r7, #32]
}
 800ed36:	bf00      	nop
 800ed38:	bf00      	nop
 800ed3a:	e7fd      	b.n	800ed38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ed3c:	4b19      	ldr	r3, [pc, #100]	@ (800eda4 <xTimerGenericCommand+0x98>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d02a      	beq.n	800ed9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	2b05      	cmp	r3, #5
 800ed54:	dc18      	bgt.n	800ed88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed56:	f7ff fead 	bl	800eab4 <xTaskGetSchedulerState>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b02      	cmp	r3, #2
 800ed5e:	d109      	bne.n	800ed74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed60:	4b10      	ldr	r3, [pc, #64]	@ (800eda4 <xTimerGenericCommand+0x98>)
 800ed62:	6818      	ldr	r0, [r3, #0]
 800ed64:	f107 0110 	add.w	r1, r7, #16
 800ed68:	2300      	movs	r3, #0
 800ed6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed6c:	f7fe fc88 	bl	800d680 <xQueueGenericSend>
 800ed70:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed72:	e012      	b.n	800ed9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed74:	4b0b      	ldr	r3, [pc, #44]	@ (800eda4 <xTimerGenericCommand+0x98>)
 800ed76:	6818      	ldr	r0, [r3, #0]
 800ed78:	f107 0110 	add.w	r1, r7, #16
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f7fe fc7e 	bl	800d680 <xQueueGenericSend>
 800ed84:	6278      	str	r0, [r7, #36]	@ 0x24
 800ed86:	e008      	b.n	800ed9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed88:	4b06      	ldr	r3, [pc, #24]	@ (800eda4 <xTimerGenericCommand+0x98>)
 800ed8a:	6818      	ldr	r0, [r3, #0]
 800ed8c:	f107 0110 	add.w	r1, r7, #16
 800ed90:	2300      	movs	r3, #0
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	f7fe fd76 	bl	800d884 <xQueueGenericSendFromISR>
 800ed98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3728      	adds	r7, #40	@ 0x28
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	24005234 	.word	0x24005234

0800eda8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af02      	add	r7, sp, #8
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edb2:	4b23      	ldr	r3, [pc, #140]	@ (800ee40 <prvProcessExpiredTimer+0x98>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	3304      	adds	r3, #4
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fe f8d3 	bl	800cf6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800edcc:	f003 0304 	and.w	r3, r3, #4
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d023      	beq.n	800ee1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	699a      	ldr	r2, [r3, #24]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	18d1      	adds	r1, r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	683a      	ldr	r2, [r7, #0]
 800ede0:	6978      	ldr	r0, [r7, #20]
 800ede2:	f000 f8d5 	bl	800ef90 <prvInsertTimerInActiveList>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d020      	beq.n	800ee2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edec:	2300      	movs	r3, #0
 800edee:	9300      	str	r3, [sp, #0]
 800edf0:	2300      	movs	r3, #0
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	2100      	movs	r1, #0
 800edf6:	6978      	ldr	r0, [r7, #20]
 800edf8:	f7ff ff88 	bl	800ed0c <xTimerGenericCommand>
 800edfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d114      	bne.n	800ee2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ee04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee08:	f383 8811 	msr	BASEPRI, r3
 800ee0c:	f3bf 8f6f 	isb	sy
 800ee10:	f3bf 8f4f 	dsb	sy
 800ee14:	60fb      	str	r3, [r7, #12]
}
 800ee16:	bf00      	nop
 800ee18:	bf00      	nop
 800ee1a:	e7fd      	b.n	800ee18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ee22:	f023 0301 	bic.w	r3, r3, #1
 800ee26:	b2da      	uxtb	r2, r3
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	6a1b      	ldr	r3, [r3, #32]
 800ee32:	6978      	ldr	r0, [r7, #20]
 800ee34:	4798      	blx	r3
}
 800ee36:	bf00      	nop
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	2400522c 	.word	0x2400522c

0800ee44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee4c:	f107 0308 	add.w	r3, r7, #8
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 f859 	bl	800ef08 <prvGetNextExpireTime>
 800ee56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	68f8      	ldr	r0, [r7, #12]
 800ee5e:	f000 f805 	bl	800ee6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ee62:	f000 f8d7 	bl	800f014 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee66:	bf00      	nop
 800ee68:	e7f0      	b.n	800ee4c <prvTimerTask+0x8>
	...

0800ee6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ee76:	f7ff fa37 	bl	800e2e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee7a:	f107 0308 	add.w	r3, r7, #8
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f000 f866 	bl	800ef50 <prvSampleTimeNow>
 800ee84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d130      	bne.n	800eeee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10a      	bne.n	800eea8 <prvProcessTimerOrBlockTask+0x3c>
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d806      	bhi.n	800eea8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ee9a:	f7ff fa33 	bl	800e304 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ee9e:	68f9      	ldr	r1, [r7, #12]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7ff ff81 	bl	800eda8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eea6:	e024      	b.n	800eef2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d008      	beq.n	800eec0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eeae:	4b13      	ldr	r3, [pc, #76]	@ (800eefc <prvProcessTimerOrBlockTask+0x90>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d101      	bne.n	800eebc <prvProcessTimerOrBlockTask+0x50>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e000      	b.n	800eebe <prvProcessTimerOrBlockTask+0x52>
 800eebc:	2300      	movs	r3, #0
 800eebe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eec0:	4b0f      	ldr	r3, [pc, #60]	@ (800ef00 <prvProcessTimerOrBlockTask+0x94>)
 800eec2:	6818      	ldr	r0, [r3, #0]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	683a      	ldr	r2, [r7, #0]
 800eecc:	4619      	mov	r1, r3
 800eece:	f7fe ff93 	bl	800ddf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eed2:	f7ff fa17 	bl	800e304 <xTaskResumeAll>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d10a      	bne.n	800eef2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eedc:	4b09      	ldr	r3, [pc, #36]	@ (800ef04 <prvProcessTimerOrBlockTask+0x98>)
 800eede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eee2:	601a      	str	r2, [r3, #0]
 800eee4:	f3bf 8f4f 	dsb	sy
 800eee8:	f3bf 8f6f 	isb	sy
}
 800eeec:	e001      	b.n	800eef2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eeee:	f7ff fa09 	bl	800e304 <xTaskResumeAll>
}
 800eef2:	bf00      	nop
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	24005230 	.word	0x24005230
 800ef00:	24005234 	.word	0x24005234
 800ef04:	e000ed04 	.word	0xe000ed04

0800ef08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef10:	4b0e      	ldr	r3, [pc, #56]	@ (800ef4c <prvGetNextExpireTime+0x44>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d101      	bne.n	800ef1e <prvGetNextExpireTime+0x16>
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	e000      	b.n	800ef20 <prvGetNextExpireTime+0x18>
 800ef1e:	2200      	movs	r2, #0
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d105      	bne.n	800ef38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef2c:	4b07      	ldr	r3, [pc, #28]	@ (800ef4c <prvGetNextExpireTime+0x44>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60fb      	str	r3, [r7, #12]
 800ef36:	e001      	b.n	800ef3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	2400522c 	.word	0x2400522c

0800ef50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef58:	f7ff fa72 	bl	800e440 <xTaskGetTickCount>
 800ef5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ef5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ef8c <prvSampleTimeNow+0x3c>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d205      	bcs.n	800ef74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ef68:	f000 f93a 	bl	800f1e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	e002      	b.n	800ef7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ef7a:	4a04      	ldr	r2, [pc, #16]	@ (800ef8c <prvSampleTimeNow+0x3c>)
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ef80:	68fb      	ldr	r3, [r7, #12]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	2400523c 	.word	0x2400523c

0800ef90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
 800ef9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	68ba      	ldr	r2, [r7, #8]
 800efa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d812      	bhi.n	800efdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	1ad2      	subs	r2, r2, r3
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	699b      	ldr	r3, [r3, #24]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d302      	bcc.n	800efca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800efc4:	2301      	movs	r3, #1
 800efc6:	617b      	str	r3, [r7, #20]
 800efc8:	e01b      	b.n	800f002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800efca:	4b10      	ldr	r3, [pc, #64]	@ (800f00c <prvInsertTimerInActiveList+0x7c>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3304      	adds	r3, #4
 800efd2:	4619      	mov	r1, r3
 800efd4:	4610      	mov	r0, r2
 800efd6:	f7fd ff90 	bl	800cefa <vListInsert>
 800efda:	e012      	b.n	800f002 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d206      	bcs.n	800eff2 <prvInsertTimerInActiveList+0x62>
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d302      	bcc.n	800eff2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800efec:	2301      	movs	r3, #1
 800efee:	617b      	str	r3, [r7, #20]
 800eff0:	e007      	b.n	800f002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eff2:	4b07      	ldr	r3, [pc, #28]	@ (800f010 <prvInsertTimerInActiveList+0x80>)
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	3304      	adds	r3, #4
 800effa:	4619      	mov	r1, r3
 800effc:	4610      	mov	r0, r2
 800effe:	f7fd ff7c 	bl	800cefa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f002:	697b      	ldr	r3, [r7, #20]
}
 800f004:	4618      	mov	r0, r3
 800f006:	3718      	adds	r7, #24
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	24005230 	.word	0x24005230
 800f010:	2400522c 	.word	0x2400522c

0800f014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08e      	sub	sp, #56	@ 0x38
 800f018:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f01a:	e0ce      	b.n	800f1ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	da19      	bge.n	800f056 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f022:	1d3b      	adds	r3, r7, #4
 800f024:	3304      	adds	r3, #4
 800f026:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10b      	bne.n	800f046 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	61fb      	str	r3, [r7, #28]
}
 800f040:	bf00      	nop
 800f042:	bf00      	nop
 800f044:	e7fd      	b.n	800f042 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f04c:	6850      	ldr	r0, [r2, #4]
 800f04e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f050:	6892      	ldr	r2, [r2, #8]
 800f052:	4611      	mov	r1, r2
 800f054:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	f2c0 80ae 	blt.w	800f1ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f064:	695b      	ldr	r3, [r3, #20]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d004      	beq.n	800f074 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f06c:	3304      	adds	r3, #4
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fd ff7c 	bl	800cf6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f074:	463b      	mov	r3, r7
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff ff6a 	bl	800ef50 <prvSampleTimeNow>
 800f07c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b09      	cmp	r3, #9
 800f082:	f200 8097 	bhi.w	800f1b4 <prvProcessReceivedCommands+0x1a0>
 800f086:	a201      	add	r2, pc, #4	@ (adr r2, 800f08c <prvProcessReceivedCommands+0x78>)
 800f088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08c:	0800f0b5 	.word	0x0800f0b5
 800f090:	0800f0b5 	.word	0x0800f0b5
 800f094:	0800f0b5 	.word	0x0800f0b5
 800f098:	0800f12b 	.word	0x0800f12b
 800f09c:	0800f13f 	.word	0x0800f13f
 800f0a0:	0800f18b 	.word	0x0800f18b
 800f0a4:	0800f0b5 	.word	0x0800f0b5
 800f0a8:	0800f0b5 	.word	0x0800f0b5
 800f0ac:	0800f12b 	.word	0x0800f12b
 800f0b0:	0800f13f 	.word	0x0800f13f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0ba:	f043 0301 	orr.w	r3, r3, #1
 800f0be:	b2da      	uxtb	r2, r3
 800f0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f0c6:	68ba      	ldr	r2, [r7, #8]
 800f0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ca:	699b      	ldr	r3, [r3, #24]
 800f0cc:	18d1      	adds	r1, r2, r3
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0d4:	f7ff ff5c 	bl	800ef90 <prvInsertTimerInActiveList>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d06c      	beq.n	800f1b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e0:	6a1b      	ldr	r3, [r3, #32]
 800f0e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f0ec:	f003 0304 	and.w	r3, r3, #4
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d061      	beq.n	800f1b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	441a      	add	r2, r3
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	2300      	movs	r3, #0
 800f102:	2100      	movs	r1, #0
 800f104:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f106:	f7ff fe01 	bl	800ed0c <xTimerGenericCommand>
 800f10a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f10c:	6a3b      	ldr	r3, [r7, #32]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d152      	bne.n	800f1b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f116:	f383 8811 	msr	BASEPRI, r3
 800f11a:	f3bf 8f6f 	isb	sy
 800f11e:	f3bf 8f4f 	dsb	sy
 800f122:	61bb      	str	r3, [r7, #24]
}
 800f124:	bf00      	nop
 800f126:	bf00      	nop
 800f128:	e7fd      	b.n	800f126 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f12c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f130:	f023 0301 	bic.w	r3, r3, #1
 800f134:	b2da      	uxtb	r2, r3
 800f136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f138:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f13c:	e03d      	b.n	800f1ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f140:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f144:	f043 0301 	orr.w	r3, r3, #1
 800f148:	b2da      	uxtb	r2, r3
 800f14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f14c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f150:	68ba      	ldr	r2, [r7, #8]
 800f152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f154:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f158:	699b      	ldr	r3, [r3, #24]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10b      	bne.n	800f176 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	617b      	str	r3, [r7, #20]
}
 800f170:	bf00      	nop
 800f172:	bf00      	nop
 800f174:	e7fd      	b.n	800f172 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f178:	699a      	ldr	r2, [r3, #24]
 800f17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17c:	18d1      	adds	r1, r2, r3
 800f17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f184:	f7ff ff04 	bl	800ef90 <prvInsertTimerInActiveList>
					break;
 800f188:	e017      	b.n	800f1ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f18c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f190:	f003 0302 	and.w	r3, r3, #2
 800f194:	2b00      	cmp	r3, #0
 800f196:	d103      	bne.n	800f1a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f198:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f19a:	f7fd fd3d 	bl	800cc18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f19e:	e00c      	b.n	800f1ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f1a6:	f023 0301 	bic.w	r3, r3, #1
 800f1aa:	b2da      	uxtb	r2, r3
 800f1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f1b2:	e002      	b.n	800f1ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f1b4:	bf00      	nop
 800f1b6:	e000      	b.n	800f1ba <prvProcessReceivedCommands+0x1a6>
					break;
 800f1b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1ba:	4b08      	ldr	r3, [pc, #32]	@ (800f1dc <prvProcessReceivedCommands+0x1c8>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	1d39      	adds	r1, r7, #4
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fe fbfc 	bl	800d9c0 <xQueueReceive>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f47f af26 	bne.w	800f01c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f1d0:	bf00      	nop
 800f1d2:	bf00      	nop
 800f1d4:	3730      	adds	r7, #48	@ 0x30
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	24005234 	.word	0x24005234

0800f1e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b088      	sub	sp, #32
 800f1e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f1e6:	e049      	b.n	800f27c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1e8:	4b2e      	ldr	r3, [pc, #184]	@ (800f2a4 <prvSwitchTimerLists+0xc4>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f2:	4b2c      	ldr	r3, [pc, #176]	@ (800f2a4 <prvSwitchTimerLists+0xc4>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	3304      	adds	r3, #4
 800f200:	4618      	mov	r0, r3
 800f202:	f7fd feb3 	bl	800cf6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6a1b      	ldr	r3, [r3, #32]
 800f20a:	68f8      	ldr	r0, [r7, #12]
 800f20c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f214:	f003 0304 	and.w	r3, r3, #4
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d02f      	beq.n	800f27c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	699b      	ldr	r3, [r3, #24]
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	4413      	add	r3, r2
 800f224:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f226:	68ba      	ldr	r2, [r7, #8]
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d90e      	bls.n	800f24c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f23a:	4b1a      	ldr	r3, [pc, #104]	@ (800f2a4 <prvSwitchTimerLists+0xc4>)
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	3304      	adds	r3, #4
 800f242:	4619      	mov	r1, r3
 800f244:	4610      	mov	r0, r2
 800f246:	f7fd fe58 	bl	800cefa <vListInsert>
 800f24a:	e017      	b.n	800f27c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f24c:	2300      	movs	r3, #0
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	2300      	movs	r3, #0
 800f252:	693a      	ldr	r2, [r7, #16]
 800f254:	2100      	movs	r1, #0
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f7ff fd58 	bl	800ed0c <xTimerGenericCommand>
 800f25c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d10b      	bne.n	800f27c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f268:	f383 8811 	msr	BASEPRI, r3
 800f26c:	f3bf 8f6f 	isb	sy
 800f270:	f3bf 8f4f 	dsb	sy
 800f274:	603b      	str	r3, [r7, #0]
}
 800f276:	bf00      	nop
 800f278:	bf00      	nop
 800f27a:	e7fd      	b.n	800f278 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f27c:	4b09      	ldr	r3, [pc, #36]	@ (800f2a4 <prvSwitchTimerLists+0xc4>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1b0      	bne.n	800f1e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f286:	4b07      	ldr	r3, [pc, #28]	@ (800f2a4 <prvSwitchTimerLists+0xc4>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f28c:	4b06      	ldr	r3, [pc, #24]	@ (800f2a8 <prvSwitchTimerLists+0xc8>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	4a04      	ldr	r2, [pc, #16]	@ (800f2a4 <prvSwitchTimerLists+0xc4>)
 800f292:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f294:	4a04      	ldr	r2, [pc, #16]	@ (800f2a8 <prvSwitchTimerLists+0xc8>)
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	6013      	str	r3, [r2, #0]
}
 800f29a:	bf00      	nop
 800f29c:	3718      	adds	r7, #24
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	2400522c 	.word	0x2400522c
 800f2a8:	24005230 	.word	0x24005230

0800f2ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f2b2:	f7fd ffb9 	bl	800d228 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f2b6:	4b15      	ldr	r3, [pc, #84]	@ (800f30c <prvCheckForValidListAndQueue+0x60>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d120      	bne.n	800f300 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f2be:	4814      	ldr	r0, [pc, #80]	@ (800f310 <prvCheckForValidListAndQueue+0x64>)
 800f2c0:	f7fd fdca 	bl	800ce58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f2c4:	4813      	ldr	r0, [pc, #76]	@ (800f314 <prvCheckForValidListAndQueue+0x68>)
 800f2c6:	f7fd fdc7 	bl	800ce58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f2ca:	4b13      	ldr	r3, [pc, #76]	@ (800f318 <prvCheckForValidListAndQueue+0x6c>)
 800f2cc:	4a10      	ldr	r2, [pc, #64]	@ (800f310 <prvCheckForValidListAndQueue+0x64>)
 800f2ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f2d0:	4b12      	ldr	r3, [pc, #72]	@ (800f31c <prvCheckForValidListAndQueue+0x70>)
 800f2d2:	4a10      	ldr	r2, [pc, #64]	@ (800f314 <prvCheckForValidListAndQueue+0x68>)
 800f2d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	9300      	str	r3, [sp, #0]
 800f2da:	4b11      	ldr	r3, [pc, #68]	@ (800f320 <prvCheckForValidListAndQueue+0x74>)
 800f2dc:	4a11      	ldr	r2, [pc, #68]	@ (800f324 <prvCheckForValidListAndQueue+0x78>)
 800f2de:	2110      	movs	r1, #16
 800f2e0:	200a      	movs	r0, #10
 800f2e2:	f7fe f92d 	bl	800d540 <xQueueGenericCreateStatic>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	4a08      	ldr	r2, [pc, #32]	@ (800f30c <prvCheckForValidListAndQueue+0x60>)
 800f2ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f2ec:	4b07      	ldr	r3, [pc, #28]	@ (800f30c <prvCheckForValidListAndQueue+0x60>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d005      	beq.n	800f300 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2f4:	4b05      	ldr	r3, [pc, #20]	@ (800f30c <prvCheckForValidListAndQueue+0x60>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	490b      	ldr	r1, [pc, #44]	@ (800f328 <prvCheckForValidListAndQueue+0x7c>)
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fe fd52 	bl	800dda4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f300:	f7fd ffc4 	bl	800d28c <vPortExitCritical>
}
 800f304:	bf00      	nop
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	24005234 	.word	0x24005234
 800f310:	24005204 	.word	0x24005204
 800f314:	24005218 	.word	0x24005218
 800f318:	2400522c 	.word	0x2400522c
 800f31c:	24005230 	.word	0x24005230
 800f320:	240052e0 	.word	0x240052e0
 800f324:	24005240 	.word	0x24005240
 800f328:	0800fcd4 	.word	0x0800fcd4

0800f32c <siprintf>:
 800f32c:	b40e      	push	{r1, r2, r3}
 800f32e:	b510      	push	{r4, lr}
 800f330:	b09d      	sub	sp, #116	@ 0x74
 800f332:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f334:	9002      	str	r0, [sp, #8]
 800f336:	9006      	str	r0, [sp, #24]
 800f338:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f33c:	480a      	ldr	r0, [pc, #40]	@ (800f368 <siprintf+0x3c>)
 800f33e:	9107      	str	r1, [sp, #28]
 800f340:	9104      	str	r1, [sp, #16]
 800f342:	490a      	ldr	r1, [pc, #40]	@ (800f36c <siprintf+0x40>)
 800f344:	f853 2b04 	ldr.w	r2, [r3], #4
 800f348:	9105      	str	r1, [sp, #20]
 800f34a:	2400      	movs	r4, #0
 800f34c:	a902      	add	r1, sp, #8
 800f34e:	6800      	ldr	r0, [r0, #0]
 800f350:	9301      	str	r3, [sp, #4]
 800f352:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f354:	f000 f9a2 	bl	800f69c <_svfiprintf_r>
 800f358:	9b02      	ldr	r3, [sp, #8]
 800f35a:	701c      	strb	r4, [r3, #0]
 800f35c:	b01d      	add	sp, #116	@ 0x74
 800f35e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f362:	b003      	add	sp, #12
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	2400002c 	.word	0x2400002c
 800f36c:	ffff0208 	.word	0xffff0208

0800f370 <memset>:
 800f370:	4402      	add	r2, r0
 800f372:	4603      	mov	r3, r0
 800f374:	4293      	cmp	r3, r2
 800f376:	d100      	bne.n	800f37a <memset+0xa>
 800f378:	4770      	bx	lr
 800f37a:	f803 1b01 	strb.w	r1, [r3], #1
 800f37e:	e7f9      	b.n	800f374 <memset+0x4>

0800f380 <__errno>:
 800f380:	4b01      	ldr	r3, [pc, #4]	@ (800f388 <__errno+0x8>)
 800f382:	6818      	ldr	r0, [r3, #0]
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	2400002c 	.word	0x2400002c

0800f38c <__libc_init_array>:
 800f38c:	b570      	push	{r4, r5, r6, lr}
 800f38e:	4d0d      	ldr	r5, [pc, #52]	@ (800f3c4 <__libc_init_array+0x38>)
 800f390:	4c0d      	ldr	r4, [pc, #52]	@ (800f3c8 <__libc_init_array+0x3c>)
 800f392:	1b64      	subs	r4, r4, r5
 800f394:	10a4      	asrs	r4, r4, #2
 800f396:	2600      	movs	r6, #0
 800f398:	42a6      	cmp	r6, r4
 800f39a:	d109      	bne.n	800f3b0 <__libc_init_array+0x24>
 800f39c:	4d0b      	ldr	r5, [pc, #44]	@ (800f3cc <__libc_init_array+0x40>)
 800f39e:	4c0c      	ldr	r4, [pc, #48]	@ (800f3d0 <__libc_init_array+0x44>)
 800f3a0:	f000 fc64 	bl	800fc6c <_init>
 800f3a4:	1b64      	subs	r4, r4, r5
 800f3a6:	10a4      	asrs	r4, r4, #2
 800f3a8:	2600      	movs	r6, #0
 800f3aa:	42a6      	cmp	r6, r4
 800f3ac:	d105      	bne.n	800f3ba <__libc_init_array+0x2e>
 800f3ae:	bd70      	pop	{r4, r5, r6, pc}
 800f3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3b4:	4798      	blx	r3
 800f3b6:	3601      	adds	r6, #1
 800f3b8:	e7ee      	b.n	800f398 <__libc_init_array+0xc>
 800f3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3be:	4798      	blx	r3
 800f3c0:	3601      	adds	r6, #1
 800f3c2:	e7f2      	b.n	800f3aa <__libc_init_array+0x1e>
 800f3c4:	0800fdd0 	.word	0x0800fdd0
 800f3c8:	0800fdd0 	.word	0x0800fdd0
 800f3cc:	0800fdd0 	.word	0x0800fdd0
 800f3d0:	0800fdd4 	.word	0x0800fdd4

0800f3d4 <__retarget_lock_acquire_recursive>:
 800f3d4:	4770      	bx	lr

0800f3d6 <__retarget_lock_release_recursive>:
 800f3d6:	4770      	bx	lr

0800f3d8 <memcpy>:
 800f3d8:	440a      	add	r2, r1
 800f3da:	4291      	cmp	r1, r2
 800f3dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3e0:	d100      	bne.n	800f3e4 <memcpy+0xc>
 800f3e2:	4770      	bx	lr
 800f3e4:	b510      	push	{r4, lr}
 800f3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3ee:	4291      	cmp	r1, r2
 800f3f0:	d1f9      	bne.n	800f3e6 <memcpy+0xe>
 800f3f2:	bd10      	pop	{r4, pc}

0800f3f4 <_free_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4605      	mov	r5, r0
 800f3f8:	2900      	cmp	r1, #0
 800f3fa:	d041      	beq.n	800f480 <_free_r+0x8c>
 800f3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f400:	1f0c      	subs	r4, r1, #4
 800f402:	2b00      	cmp	r3, #0
 800f404:	bfb8      	it	lt
 800f406:	18e4      	addlt	r4, r4, r3
 800f408:	f000 f8e0 	bl	800f5cc <__malloc_lock>
 800f40c:	4a1d      	ldr	r2, [pc, #116]	@ (800f484 <_free_r+0x90>)
 800f40e:	6813      	ldr	r3, [r2, #0]
 800f410:	b933      	cbnz	r3, 800f420 <_free_r+0x2c>
 800f412:	6063      	str	r3, [r4, #4]
 800f414:	6014      	str	r4, [r2, #0]
 800f416:	4628      	mov	r0, r5
 800f418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f41c:	f000 b8dc 	b.w	800f5d8 <__malloc_unlock>
 800f420:	42a3      	cmp	r3, r4
 800f422:	d908      	bls.n	800f436 <_free_r+0x42>
 800f424:	6820      	ldr	r0, [r4, #0]
 800f426:	1821      	adds	r1, r4, r0
 800f428:	428b      	cmp	r3, r1
 800f42a:	bf01      	itttt	eq
 800f42c:	6819      	ldreq	r1, [r3, #0]
 800f42e:	685b      	ldreq	r3, [r3, #4]
 800f430:	1809      	addeq	r1, r1, r0
 800f432:	6021      	streq	r1, [r4, #0]
 800f434:	e7ed      	b.n	800f412 <_free_r+0x1e>
 800f436:	461a      	mov	r2, r3
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	b10b      	cbz	r3, 800f440 <_free_r+0x4c>
 800f43c:	42a3      	cmp	r3, r4
 800f43e:	d9fa      	bls.n	800f436 <_free_r+0x42>
 800f440:	6811      	ldr	r1, [r2, #0]
 800f442:	1850      	adds	r0, r2, r1
 800f444:	42a0      	cmp	r0, r4
 800f446:	d10b      	bne.n	800f460 <_free_r+0x6c>
 800f448:	6820      	ldr	r0, [r4, #0]
 800f44a:	4401      	add	r1, r0
 800f44c:	1850      	adds	r0, r2, r1
 800f44e:	4283      	cmp	r3, r0
 800f450:	6011      	str	r1, [r2, #0]
 800f452:	d1e0      	bne.n	800f416 <_free_r+0x22>
 800f454:	6818      	ldr	r0, [r3, #0]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	6053      	str	r3, [r2, #4]
 800f45a:	4408      	add	r0, r1
 800f45c:	6010      	str	r0, [r2, #0]
 800f45e:	e7da      	b.n	800f416 <_free_r+0x22>
 800f460:	d902      	bls.n	800f468 <_free_r+0x74>
 800f462:	230c      	movs	r3, #12
 800f464:	602b      	str	r3, [r5, #0]
 800f466:	e7d6      	b.n	800f416 <_free_r+0x22>
 800f468:	6820      	ldr	r0, [r4, #0]
 800f46a:	1821      	adds	r1, r4, r0
 800f46c:	428b      	cmp	r3, r1
 800f46e:	bf04      	itt	eq
 800f470:	6819      	ldreq	r1, [r3, #0]
 800f472:	685b      	ldreq	r3, [r3, #4]
 800f474:	6063      	str	r3, [r4, #4]
 800f476:	bf04      	itt	eq
 800f478:	1809      	addeq	r1, r1, r0
 800f47a:	6021      	streq	r1, [r4, #0]
 800f47c:	6054      	str	r4, [r2, #4]
 800f47e:	e7ca      	b.n	800f416 <_free_r+0x22>
 800f480:	bd38      	pop	{r3, r4, r5, pc}
 800f482:	bf00      	nop
 800f484:	24005474 	.word	0x24005474

0800f488 <sbrk_aligned>:
 800f488:	b570      	push	{r4, r5, r6, lr}
 800f48a:	4e0f      	ldr	r6, [pc, #60]	@ (800f4c8 <sbrk_aligned+0x40>)
 800f48c:	460c      	mov	r4, r1
 800f48e:	6831      	ldr	r1, [r6, #0]
 800f490:	4605      	mov	r5, r0
 800f492:	b911      	cbnz	r1, 800f49a <sbrk_aligned+0x12>
 800f494:	f000 fba4 	bl	800fbe0 <_sbrk_r>
 800f498:	6030      	str	r0, [r6, #0]
 800f49a:	4621      	mov	r1, r4
 800f49c:	4628      	mov	r0, r5
 800f49e:	f000 fb9f 	bl	800fbe0 <_sbrk_r>
 800f4a2:	1c43      	adds	r3, r0, #1
 800f4a4:	d103      	bne.n	800f4ae <sbrk_aligned+0x26>
 800f4a6:	f04f 34ff 	mov.w	r4, #4294967295
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	bd70      	pop	{r4, r5, r6, pc}
 800f4ae:	1cc4      	adds	r4, r0, #3
 800f4b0:	f024 0403 	bic.w	r4, r4, #3
 800f4b4:	42a0      	cmp	r0, r4
 800f4b6:	d0f8      	beq.n	800f4aa <sbrk_aligned+0x22>
 800f4b8:	1a21      	subs	r1, r4, r0
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	f000 fb90 	bl	800fbe0 <_sbrk_r>
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	d1f2      	bne.n	800f4aa <sbrk_aligned+0x22>
 800f4c4:	e7ef      	b.n	800f4a6 <sbrk_aligned+0x1e>
 800f4c6:	bf00      	nop
 800f4c8:	24005470 	.word	0x24005470

0800f4cc <_malloc_r>:
 800f4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4d0:	1ccd      	adds	r5, r1, #3
 800f4d2:	f025 0503 	bic.w	r5, r5, #3
 800f4d6:	3508      	adds	r5, #8
 800f4d8:	2d0c      	cmp	r5, #12
 800f4da:	bf38      	it	cc
 800f4dc:	250c      	movcc	r5, #12
 800f4de:	2d00      	cmp	r5, #0
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	db01      	blt.n	800f4e8 <_malloc_r+0x1c>
 800f4e4:	42a9      	cmp	r1, r5
 800f4e6:	d904      	bls.n	800f4f2 <_malloc_r+0x26>
 800f4e8:	230c      	movs	r3, #12
 800f4ea:	6033      	str	r3, [r6, #0]
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f5c8 <_malloc_r+0xfc>
 800f4f6:	f000 f869 	bl	800f5cc <__malloc_lock>
 800f4fa:	f8d8 3000 	ldr.w	r3, [r8]
 800f4fe:	461c      	mov	r4, r3
 800f500:	bb44      	cbnz	r4, 800f554 <_malloc_r+0x88>
 800f502:	4629      	mov	r1, r5
 800f504:	4630      	mov	r0, r6
 800f506:	f7ff ffbf 	bl	800f488 <sbrk_aligned>
 800f50a:	1c43      	adds	r3, r0, #1
 800f50c:	4604      	mov	r4, r0
 800f50e:	d158      	bne.n	800f5c2 <_malloc_r+0xf6>
 800f510:	f8d8 4000 	ldr.w	r4, [r8]
 800f514:	4627      	mov	r7, r4
 800f516:	2f00      	cmp	r7, #0
 800f518:	d143      	bne.n	800f5a2 <_malloc_r+0xd6>
 800f51a:	2c00      	cmp	r4, #0
 800f51c:	d04b      	beq.n	800f5b6 <_malloc_r+0xea>
 800f51e:	6823      	ldr	r3, [r4, #0]
 800f520:	4639      	mov	r1, r7
 800f522:	4630      	mov	r0, r6
 800f524:	eb04 0903 	add.w	r9, r4, r3
 800f528:	f000 fb5a 	bl	800fbe0 <_sbrk_r>
 800f52c:	4581      	cmp	r9, r0
 800f52e:	d142      	bne.n	800f5b6 <_malloc_r+0xea>
 800f530:	6821      	ldr	r1, [r4, #0]
 800f532:	1a6d      	subs	r5, r5, r1
 800f534:	4629      	mov	r1, r5
 800f536:	4630      	mov	r0, r6
 800f538:	f7ff ffa6 	bl	800f488 <sbrk_aligned>
 800f53c:	3001      	adds	r0, #1
 800f53e:	d03a      	beq.n	800f5b6 <_malloc_r+0xea>
 800f540:	6823      	ldr	r3, [r4, #0]
 800f542:	442b      	add	r3, r5
 800f544:	6023      	str	r3, [r4, #0]
 800f546:	f8d8 3000 	ldr.w	r3, [r8]
 800f54a:	685a      	ldr	r2, [r3, #4]
 800f54c:	bb62      	cbnz	r2, 800f5a8 <_malloc_r+0xdc>
 800f54e:	f8c8 7000 	str.w	r7, [r8]
 800f552:	e00f      	b.n	800f574 <_malloc_r+0xa8>
 800f554:	6822      	ldr	r2, [r4, #0]
 800f556:	1b52      	subs	r2, r2, r5
 800f558:	d420      	bmi.n	800f59c <_malloc_r+0xd0>
 800f55a:	2a0b      	cmp	r2, #11
 800f55c:	d917      	bls.n	800f58e <_malloc_r+0xc2>
 800f55e:	1961      	adds	r1, r4, r5
 800f560:	42a3      	cmp	r3, r4
 800f562:	6025      	str	r5, [r4, #0]
 800f564:	bf18      	it	ne
 800f566:	6059      	strne	r1, [r3, #4]
 800f568:	6863      	ldr	r3, [r4, #4]
 800f56a:	bf08      	it	eq
 800f56c:	f8c8 1000 	streq.w	r1, [r8]
 800f570:	5162      	str	r2, [r4, r5]
 800f572:	604b      	str	r3, [r1, #4]
 800f574:	4630      	mov	r0, r6
 800f576:	f000 f82f 	bl	800f5d8 <__malloc_unlock>
 800f57a:	f104 000b 	add.w	r0, r4, #11
 800f57e:	1d23      	adds	r3, r4, #4
 800f580:	f020 0007 	bic.w	r0, r0, #7
 800f584:	1ac2      	subs	r2, r0, r3
 800f586:	bf1c      	itt	ne
 800f588:	1a1b      	subne	r3, r3, r0
 800f58a:	50a3      	strne	r3, [r4, r2]
 800f58c:	e7af      	b.n	800f4ee <_malloc_r+0x22>
 800f58e:	6862      	ldr	r2, [r4, #4]
 800f590:	42a3      	cmp	r3, r4
 800f592:	bf0c      	ite	eq
 800f594:	f8c8 2000 	streq.w	r2, [r8]
 800f598:	605a      	strne	r2, [r3, #4]
 800f59a:	e7eb      	b.n	800f574 <_malloc_r+0xa8>
 800f59c:	4623      	mov	r3, r4
 800f59e:	6864      	ldr	r4, [r4, #4]
 800f5a0:	e7ae      	b.n	800f500 <_malloc_r+0x34>
 800f5a2:	463c      	mov	r4, r7
 800f5a4:	687f      	ldr	r7, [r7, #4]
 800f5a6:	e7b6      	b.n	800f516 <_malloc_r+0x4a>
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	42a3      	cmp	r3, r4
 800f5ae:	d1fb      	bne.n	800f5a8 <_malloc_r+0xdc>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	6053      	str	r3, [r2, #4]
 800f5b4:	e7de      	b.n	800f574 <_malloc_r+0xa8>
 800f5b6:	230c      	movs	r3, #12
 800f5b8:	6033      	str	r3, [r6, #0]
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	f000 f80c 	bl	800f5d8 <__malloc_unlock>
 800f5c0:	e794      	b.n	800f4ec <_malloc_r+0x20>
 800f5c2:	6005      	str	r5, [r0, #0]
 800f5c4:	e7d6      	b.n	800f574 <_malloc_r+0xa8>
 800f5c6:	bf00      	nop
 800f5c8:	24005474 	.word	0x24005474

0800f5cc <__malloc_lock>:
 800f5cc:	4801      	ldr	r0, [pc, #4]	@ (800f5d4 <__malloc_lock+0x8>)
 800f5ce:	f7ff bf01 	b.w	800f3d4 <__retarget_lock_acquire_recursive>
 800f5d2:	bf00      	nop
 800f5d4:	2400546c 	.word	0x2400546c

0800f5d8 <__malloc_unlock>:
 800f5d8:	4801      	ldr	r0, [pc, #4]	@ (800f5e0 <__malloc_unlock+0x8>)
 800f5da:	f7ff befc 	b.w	800f3d6 <__retarget_lock_release_recursive>
 800f5de:	bf00      	nop
 800f5e0:	2400546c 	.word	0x2400546c

0800f5e4 <__ssputs_r>:
 800f5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e8:	688e      	ldr	r6, [r1, #8]
 800f5ea:	461f      	mov	r7, r3
 800f5ec:	42be      	cmp	r6, r7
 800f5ee:	680b      	ldr	r3, [r1, #0]
 800f5f0:	4682      	mov	sl, r0
 800f5f2:	460c      	mov	r4, r1
 800f5f4:	4690      	mov	r8, r2
 800f5f6:	d82d      	bhi.n	800f654 <__ssputs_r+0x70>
 800f5f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f600:	d026      	beq.n	800f650 <__ssputs_r+0x6c>
 800f602:	6965      	ldr	r5, [r4, #20]
 800f604:	6909      	ldr	r1, [r1, #16]
 800f606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f60a:	eba3 0901 	sub.w	r9, r3, r1
 800f60e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f612:	1c7b      	adds	r3, r7, #1
 800f614:	444b      	add	r3, r9
 800f616:	106d      	asrs	r5, r5, #1
 800f618:	429d      	cmp	r5, r3
 800f61a:	bf38      	it	cc
 800f61c:	461d      	movcc	r5, r3
 800f61e:	0553      	lsls	r3, r2, #21
 800f620:	d527      	bpl.n	800f672 <__ssputs_r+0x8e>
 800f622:	4629      	mov	r1, r5
 800f624:	f7ff ff52 	bl	800f4cc <_malloc_r>
 800f628:	4606      	mov	r6, r0
 800f62a:	b360      	cbz	r0, 800f686 <__ssputs_r+0xa2>
 800f62c:	6921      	ldr	r1, [r4, #16]
 800f62e:	464a      	mov	r2, r9
 800f630:	f7ff fed2 	bl	800f3d8 <memcpy>
 800f634:	89a3      	ldrh	r3, [r4, #12]
 800f636:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f63a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f63e:	81a3      	strh	r3, [r4, #12]
 800f640:	6126      	str	r6, [r4, #16]
 800f642:	6165      	str	r5, [r4, #20]
 800f644:	444e      	add	r6, r9
 800f646:	eba5 0509 	sub.w	r5, r5, r9
 800f64a:	6026      	str	r6, [r4, #0]
 800f64c:	60a5      	str	r5, [r4, #8]
 800f64e:	463e      	mov	r6, r7
 800f650:	42be      	cmp	r6, r7
 800f652:	d900      	bls.n	800f656 <__ssputs_r+0x72>
 800f654:	463e      	mov	r6, r7
 800f656:	6820      	ldr	r0, [r4, #0]
 800f658:	4632      	mov	r2, r6
 800f65a:	4641      	mov	r1, r8
 800f65c:	f000 faa6 	bl	800fbac <memmove>
 800f660:	68a3      	ldr	r3, [r4, #8]
 800f662:	1b9b      	subs	r3, r3, r6
 800f664:	60a3      	str	r3, [r4, #8]
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	4433      	add	r3, r6
 800f66a:	6023      	str	r3, [r4, #0]
 800f66c:	2000      	movs	r0, #0
 800f66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f672:	462a      	mov	r2, r5
 800f674:	f000 fac4 	bl	800fc00 <_realloc_r>
 800f678:	4606      	mov	r6, r0
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d1e0      	bne.n	800f640 <__ssputs_r+0x5c>
 800f67e:	6921      	ldr	r1, [r4, #16]
 800f680:	4650      	mov	r0, sl
 800f682:	f7ff feb7 	bl	800f3f4 <_free_r>
 800f686:	230c      	movs	r3, #12
 800f688:	f8ca 3000 	str.w	r3, [sl]
 800f68c:	89a3      	ldrh	r3, [r4, #12]
 800f68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f692:	81a3      	strh	r3, [r4, #12]
 800f694:	f04f 30ff 	mov.w	r0, #4294967295
 800f698:	e7e9      	b.n	800f66e <__ssputs_r+0x8a>
	...

0800f69c <_svfiprintf_r>:
 800f69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a0:	4698      	mov	r8, r3
 800f6a2:	898b      	ldrh	r3, [r1, #12]
 800f6a4:	061b      	lsls	r3, r3, #24
 800f6a6:	b09d      	sub	sp, #116	@ 0x74
 800f6a8:	4607      	mov	r7, r0
 800f6aa:	460d      	mov	r5, r1
 800f6ac:	4614      	mov	r4, r2
 800f6ae:	d510      	bpl.n	800f6d2 <_svfiprintf_r+0x36>
 800f6b0:	690b      	ldr	r3, [r1, #16]
 800f6b2:	b973      	cbnz	r3, 800f6d2 <_svfiprintf_r+0x36>
 800f6b4:	2140      	movs	r1, #64	@ 0x40
 800f6b6:	f7ff ff09 	bl	800f4cc <_malloc_r>
 800f6ba:	6028      	str	r0, [r5, #0]
 800f6bc:	6128      	str	r0, [r5, #16]
 800f6be:	b930      	cbnz	r0, 800f6ce <_svfiprintf_r+0x32>
 800f6c0:	230c      	movs	r3, #12
 800f6c2:	603b      	str	r3, [r7, #0]
 800f6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6c8:	b01d      	add	sp, #116	@ 0x74
 800f6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ce:	2340      	movs	r3, #64	@ 0x40
 800f6d0:	616b      	str	r3, [r5, #20]
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6d6:	2320      	movs	r3, #32
 800f6d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f6dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6e0:	2330      	movs	r3, #48	@ 0x30
 800f6e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f880 <_svfiprintf_r+0x1e4>
 800f6e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6ea:	f04f 0901 	mov.w	r9, #1
 800f6ee:	4623      	mov	r3, r4
 800f6f0:	469a      	mov	sl, r3
 800f6f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6f6:	b10a      	cbz	r2, 800f6fc <_svfiprintf_r+0x60>
 800f6f8:	2a25      	cmp	r2, #37	@ 0x25
 800f6fa:	d1f9      	bne.n	800f6f0 <_svfiprintf_r+0x54>
 800f6fc:	ebba 0b04 	subs.w	fp, sl, r4
 800f700:	d00b      	beq.n	800f71a <_svfiprintf_r+0x7e>
 800f702:	465b      	mov	r3, fp
 800f704:	4622      	mov	r2, r4
 800f706:	4629      	mov	r1, r5
 800f708:	4638      	mov	r0, r7
 800f70a:	f7ff ff6b 	bl	800f5e4 <__ssputs_r>
 800f70e:	3001      	adds	r0, #1
 800f710:	f000 80a7 	beq.w	800f862 <_svfiprintf_r+0x1c6>
 800f714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f716:	445a      	add	r2, fp
 800f718:	9209      	str	r2, [sp, #36]	@ 0x24
 800f71a:	f89a 3000 	ldrb.w	r3, [sl]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f000 809f 	beq.w	800f862 <_svfiprintf_r+0x1c6>
 800f724:	2300      	movs	r3, #0
 800f726:	f04f 32ff 	mov.w	r2, #4294967295
 800f72a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f72e:	f10a 0a01 	add.w	sl, sl, #1
 800f732:	9304      	str	r3, [sp, #16]
 800f734:	9307      	str	r3, [sp, #28]
 800f736:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f73a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f73c:	4654      	mov	r4, sl
 800f73e:	2205      	movs	r2, #5
 800f740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f744:	484e      	ldr	r0, [pc, #312]	@ (800f880 <_svfiprintf_r+0x1e4>)
 800f746:	f7f0 fdd3 	bl	80002f0 <memchr>
 800f74a:	9a04      	ldr	r2, [sp, #16]
 800f74c:	b9d8      	cbnz	r0, 800f786 <_svfiprintf_r+0xea>
 800f74e:	06d0      	lsls	r0, r2, #27
 800f750:	bf44      	itt	mi
 800f752:	2320      	movmi	r3, #32
 800f754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f758:	0711      	lsls	r1, r2, #28
 800f75a:	bf44      	itt	mi
 800f75c:	232b      	movmi	r3, #43	@ 0x2b
 800f75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f762:	f89a 3000 	ldrb.w	r3, [sl]
 800f766:	2b2a      	cmp	r3, #42	@ 0x2a
 800f768:	d015      	beq.n	800f796 <_svfiprintf_r+0xfa>
 800f76a:	9a07      	ldr	r2, [sp, #28]
 800f76c:	4654      	mov	r4, sl
 800f76e:	2000      	movs	r0, #0
 800f770:	f04f 0c0a 	mov.w	ip, #10
 800f774:	4621      	mov	r1, r4
 800f776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f77a:	3b30      	subs	r3, #48	@ 0x30
 800f77c:	2b09      	cmp	r3, #9
 800f77e:	d94b      	bls.n	800f818 <_svfiprintf_r+0x17c>
 800f780:	b1b0      	cbz	r0, 800f7b0 <_svfiprintf_r+0x114>
 800f782:	9207      	str	r2, [sp, #28]
 800f784:	e014      	b.n	800f7b0 <_svfiprintf_r+0x114>
 800f786:	eba0 0308 	sub.w	r3, r0, r8
 800f78a:	fa09 f303 	lsl.w	r3, r9, r3
 800f78e:	4313      	orrs	r3, r2
 800f790:	9304      	str	r3, [sp, #16]
 800f792:	46a2      	mov	sl, r4
 800f794:	e7d2      	b.n	800f73c <_svfiprintf_r+0xa0>
 800f796:	9b03      	ldr	r3, [sp, #12]
 800f798:	1d19      	adds	r1, r3, #4
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	9103      	str	r1, [sp, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	bfbb      	ittet	lt
 800f7a2:	425b      	neglt	r3, r3
 800f7a4:	f042 0202 	orrlt.w	r2, r2, #2
 800f7a8:	9307      	strge	r3, [sp, #28]
 800f7aa:	9307      	strlt	r3, [sp, #28]
 800f7ac:	bfb8      	it	lt
 800f7ae:	9204      	strlt	r2, [sp, #16]
 800f7b0:	7823      	ldrb	r3, [r4, #0]
 800f7b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7b4:	d10a      	bne.n	800f7cc <_svfiprintf_r+0x130>
 800f7b6:	7863      	ldrb	r3, [r4, #1]
 800f7b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7ba:	d132      	bne.n	800f822 <_svfiprintf_r+0x186>
 800f7bc:	9b03      	ldr	r3, [sp, #12]
 800f7be:	1d1a      	adds	r2, r3, #4
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	9203      	str	r2, [sp, #12]
 800f7c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f7c8:	3402      	adds	r4, #2
 800f7ca:	9305      	str	r3, [sp, #20]
 800f7cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f890 <_svfiprintf_r+0x1f4>
 800f7d0:	7821      	ldrb	r1, [r4, #0]
 800f7d2:	2203      	movs	r2, #3
 800f7d4:	4650      	mov	r0, sl
 800f7d6:	f7f0 fd8b 	bl	80002f0 <memchr>
 800f7da:	b138      	cbz	r0, 800f7ec <_svfiprintf_r+0x150>
 800f7dc:	9b04      	ldr	r3, [sp, #16]
 800f7de:	eba0 000a 	sub.w	r0, r0, sl
 800f7e2:	2240      	movs	r2, #64	@ 0x40
 800f7e4:	4082      	lsls	r2, r0
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	3401      	adds	r4, #1
 800f7ea:	9304      	str	r3, [sp, #16]
 800f7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7f0:	4824      	ldr	r0, [pc, #144]	@ (800f884 <_svfiprintf_r+0x1e8>)
 800f7f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7f6:	2206      	movs	r2, #6
 800f7f8:	f7f0 fd7a 	bl	80002f0 <memchr>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	d036      	beq.n	800f86e <_svfiprintf_r+0x1d2>
 800f800:	4b21      	ldr	r3, [pc, #132]	@ (800f888 <_svfiprintf_r+0x1ec>)
 800f802:	bb1b      	cbnz	r3, 800f84c <_svfiprintf_r+0x1b0>
 800f804:	9b03      	ldr	r3, [sp, #12]
 800f806:	3307      	adds	r3, #7
 800f808:	f023 0307 	bic.w	r3, r3, #7
 800f80c:	3308      	adds	r3, #8
 800f80e:	9303      	str	r3, [sp, #12]
 800f810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f812:	4433      	add	r3, r6
 800f814:	9309      	str	r3, [sp, #36]	@ 0x24
 800f816:	e76a      	b.n	800f6ee <_svfiprintf_r+0x52>
 800f818:	fb0c 3202 	mla	r2, ip, r2, r3
 800f81c:	460c      	mov	r4, r1
 800f81e:	2001      	movs	r0, #1
 800f820:	e7a8      	b.n	800f774 <_svfiprintf_r+0xd8>
 800f822:	2300      	movs	r3, #0
 800f824:	3401      	adds	r4, #1
 800f826:	9305      	str	r3, [sp, #20]
 800f828:	4619      	mov	r1, r3
 800f82a:	f04f 0c0a 	mov.w	ip, #10
 800f82e:	4620      	mov	r0, r4
 800f830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f834:	3a30      	subs	r2, #48	@ 0x30
 800f836:	2a09      	cmp	r2, #9
 800f838:	d903      	bls.n	800f842 <_svfiprintf_r+0x1a6>
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d0c6      	beq.n	800f7cc <_svfiprintf_r+0x130>
 800f83e:	9105      	str	r1, [sp, #20]
 800f840:	e7c4      	b.n	800f7cc <_svfiprintf_r+0x130>
 800f842:	fb0c 2101 	mla	r1, ip, r1, r2
 800f846:	4604      	mov	r4, r0
 800f848:	2301      	movs	r3, #1
 800f84a:	e7f0      	b.n	800f82e <_svfiprintf_r+0x192>
 800f84c:	ab03      	add	r3, sp, #12
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	462a      	mov	r2, r5
 800f852:	4b0e      	ldr	r3, [pc, #56]	@ (800f88c <_svfiprintf_r+0x1f0>)
 800f854:	a904      	add	r1, sp, #16
 800f856:	4638      	mov	r0, r7
 800f858:	f3af 8000 	nop.w
 800f85c:	1c42      	adds	r2, r0, #1
 800f85e:	4606      	mov	r6, r0
 800f860:	d1d6      	bne.n	800f810 <_svfiprintf_r+0x174>
 800f862:	89ab      	ldrh	r3, [r5, #12]
 800f864:	065b      	lsls	r3, r3, #25
 800f866:	f53f af2d 	bmi.w	800f6c4 <_svfiprintf_r+0x28>
 800f86a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f86c:	e72c      	b.n	800f6c8 <_svfiprintf_r+0x2c>
 800f86e:	ab03      	add	r3, sp, #12
 800f870:	9300      	str	r3, [sp, #0]
 800f872:	462a      	mov	r2, r5
 800f874:	4b05      	ldr	r3, [pc, #20]	@ (800f88c <_svfiprintf_r+0x1f0>)
 800f876:	a904      	add	r1, sp, #16
 800f878:	4638      	mov	r0, r7
 800f87a:	f000 f879 	bl	800f970 <_printf_i>
 800f87e:	e7ed      	b.n	800f85c <_svfiprintf_r+0x1c0>
 800f880:	0800fd94 	.word	0x0800fd94
 800f884:	0800fd9e 	.word	0x0800fd9e
 800f888:	00000000 	.word	0x00000000
 800f88c:	0800f5e5 	.word	0x0800f5e5
 800f890:	0800fd9a 	.word	0x0800fd9a

0800f894 <_printf_common>:
 800f894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f898:	4616      	mov	r6, r2
 800f89a:	4698      	mov	r8, r3
 800f89c:	688a      	ldr	r2, [r1, #8]
 800f89e:	690b      	ldr	r3, [r1, #16]
 800f8a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	bfb8      	it	lt
 800f8a8:	4613      	movlt	r3, r2
 800f8aa:	6033      	str	r3, [r6, #0]
 800f8ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f8b0:	4607      	mov	r7, r0
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	b10a      	cbz	r2, 800f8ba <_printf_common+0x26>
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	6033      	str	r3, [r6, #0]
 800f8ba:	6823      	ldr	r3, [r4, #0]
 800f8bc:	0699      	lsls	r1, r3, #26
 800f8be:	bf42      	ittt	mi
 800f8c0:	6833      	ldrmi	r3, [r6, #0]
 800f8c2:	3302      	addmi	r3, #2
 800f8c4:	6033      	strmi	r3, [r6, #0]
 800f8c6:	6825      	ldr	r5, [r4, #0]
 800f8c8:	f015 0506 	ands.w	r5, r5, #6
 800f8cc:	d106      	bne.n	800f8dc <_printf_common+0x48>
 800f8ce:	f104 0a19 	add.w	sl, r4, #25
 800f8d2:	68e3      	ldr	r3, [r4, #12]
 800f8d4:	6832      	ldr	r2, [r6, #0]
 800f8d6:	1a9b      	subs	r3, r3, r2
 800f8d8:	42ab      	cmp	r3, r5
 800f8da:	dc26      	bgt.n	800f92a <_printf_common+0x96>
 800f8dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f8e0:	6822      	ldr	r2, [r4, #0]
 800f8e2:	3b00      	subs	r3, #0
 800f8e4:	bf18      	it	ne
 800f8e6:	2301      	movne	r3, #1
 800f8e8:	0692      	lsls	r2, r2, #26
 800f8ea:	d42b      	bmi.n	800f944 <_printf_common+0xb0>
 800f8ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f8f0:	4641      	mov	r1, r8
 800f8f2:	4638      	mov	r0, r7
 800f8f4:	47c8      	blx	r9
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	d01e      	beq.n	800f938 <_printf_common+0xa4>
 800f8fa:	6823      	ldr	r3, [r4, #0]
 800f8fc:	6922      	ldr	r2, [r4, #16]
 800f8fe:	f003 0306 	and.w	r3, r3, #6
 800f902:	2b04      	cmp	r3, #4
 800f904:	bf02      	ittt	eq
 800f906:	68e5      	ldreq	r5, [r4, #12]
 800f908:	6833      	ldreq	r3, [r6, #0]
 800f90a:	1aed      	subeq	r5, r5, r3
 800f90c:	68a3      	ldr	r3, [r4, #8]
 800f90e:	bf0c      	ite	eq
 800f910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f914:	2500      	movne	r5, #0
 800f916:	4293      	cmp	r3, r2
 800f918:	bfc4      	itt	gt
 800f91a:	1a9b      	subgt	r3, r3, r2
 800f91c:	18ed      	addgt	r5, r5, r3
 800f91e:	2600      	movs	r6, #0
 800f920:	341a      	adds	r4, #26
 800f922:	42b5      	cmp	r5, r6
 800f924:	d11a      	bne.n	800f95c <_printf_common+0xc8>
 800f926:	2000      	movs	r0, #0
 800f928:	e008      	b.n	800f93c <_printf_common+0xa8>
 800f92a:	2301      	movs	r3, #1
 800f92c:	4652      	mov	r2, sl
 800f92e:	4641      	mov	r1, r8
 800f930:	4638      	mov	r0, r7
 800f932:	47c8      	blx	r9
 800f934:	3001      	adds	r0, #1
 800f936:	d103      	bne.n	800f940 <_printf_common+0xac>
 800f938:	f04f 30ff 	mov.w	r0, #4294967295
 800f93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f940:	3501      	adds	r5, #1
 800f942:	e7c6      	b.n	800f8d2 <_printf_common+0x3e>
 800f944:	18e1      	adds	r1, r4, r3
 800f946:	1c5a      	adds	r2, r3, #1
 800f948:	2030      	movs	r0, #48	@ 0x30
 800f94a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f94e:	4422      	add	r2, r4
 800f950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f958:	3302      	adds	r3, #2
 800f95a:	e7c7      	b.n	800f8ec <_printf_common+0x58>
 800f95c:	2301      	movs	r3, #1
 800f95e:	4622      	mov	r2, r4
 800f960:	4641      	mov	r1, r8
 800f962:	4638      	mov	r0, r7
 800f964:	47c8      	blx	r9
 800f966:	3001      	adds	r0, #1
 800f968:	d0e6      	beq.n	800f938 <_printf_common+0xa4>
 800f96a:	3601      	adds	r6, #1
 800f96c:	e7d9      	b.n	800f922 <_printf_common+0x8e>
	...

0800f970 <_printf_i>:
 800f970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f974:	7e0f      	ldrb	r7, [r1, #24]
 800f976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f978:	2f78      	cmp	r7, #120	@ 0x78
 800f97a:	4691      	mov	r9, r2
 800f97c:	4680      	mov	r8, r0
 800f97e:	460c      	mov	r4, r1
 800f980:	469a      	mov	sl, r3
 800f982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f986:	d807      	bhi.n	800f998 <_printf_i+0x28>
 800f988:	2f62      	cmp	r7, #98	@ 0x62
 800f98a:	d80a      	bhi.n	800f9a2 <_printf_i+0x32>
 800f98c:	2f00      	cmp	r7, #0
 800f98e:	f000 80d1 	beq.w	800fb34 <_printf_i+0x1c4>
 800f992:	2f58      	cmp	r7, #88	@ 0x58
 800f994:	f000 80b8 	beq.w	800fb08 <_printf_i+0x198>
 800f998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f99c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f9a0:	e03a      	b.n	800fa18 <_printf_i+0xa8>
 800f9a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f9a6:	2b15      	cmp	r3, #21
 800f9a8:	d8f6      	bhi.n	800f998 <_printf_i+0x28>
 800f9aa:	a101      	add	r1, pc, #4	@ (adr r1, 800f9b0 <_printf_i+0x40>)
 800f9ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9b0:	0800fa09 	.word	0x0800fa09
 800f9b4:	0800fa1d 	.word	0x0800fa1d
 800f9b8:	0800f999 	.word	0x0800f999
 800f9bc:	0800f999 	.word	0x0800f999
 800f9c0:	0800f999 	.word	0x0800f999
 800f9c4:	0800f999 	.word	0x0800f999
 800f9c8:	0800fa1d 	.word	0x0800fa1d
 800f9cc:	0800f999 	.word	0x0800f999
 800f9d0:	0800f999 	.word	0x0800f999
 800f9d4:	0800f999 	.word	0x0800f999
 800f9d8:	0800f999 	.word	0x0800f999
 800f9dc:	0800fb1b 	.word	0x0800fb1b
 800f9e0:	0800fa47 	.word	0x0800fa47
 800f9e4:	0800fad5 	.word	0x0800fad5
 800f9e8:	0800f999 	.word	0x0800f999
 800f9ec:	0800f999 	.word	0x0800f999
 800f9f0:	0800fb3d 	.word	0x0800fb3d
 800f9f4:	0800f999 	.word	0x0800f999
 800f9f8:	0800fa47 	.word	0x0800fa47
 800f9fc:	0800f999 	.word	0x0800f999
 800fa00:	0800f999 	.word	0x0800f999
 800fa04:	0800fadd 	.word	0x0800fadd
 800fa08:	6833      	ldr	r3, [r6, #0]
 800fa0a:	1d1a      	adds	r2, r3, #4
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	6032      	str	r2, [r6, #0]
 800fa10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fa14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e09c      	b.n	800fb56 <_printf_i+0x1e6>
 800fa1c:	6833      	ldr	r3, [r6, #0]
 800fa1e:	6820      	ldr	r0, [r4, #0]
 800fa20:	1d19      	adds	r1, r3, #4
 800fa22:	6031      	str	r1, [r6, #0]
 800fa24:	0606      	lsls	r6, r0, #24
 800fa26:	d501      	bpl.n	800fa2c <_printf_i+0xbc>
 800fa28:	681d      	ldr	r5, [r3, #0]
 800fa2a:	e003      	b.n	800fa34 <_printf_i+0xc4>
 800fa2c:	0645      	lsls	r5, r0, #25
 800fa2e:	d5fb      	bpl.n	800fa28 <_printf_i+0xb8>
 800fa30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fa34:	2d00      	cmp	r5, #0
 800fa36:	da03      	bge.n	800fa40 <_printf_i+0xd0>
 800fa38:	232d      	movs	r3, #45	@ 0x2d
 800fa3a:	426d      	negs	r5, r5
 800fa3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa40:	4858      	ldr	r0, [pc, #352]	@ (800fba4 <_printf_i+0x234>)
 800fa42:	230a      	movs	r3, #10
 800fa44:	e011      	b.n	800fa6a <_printf_i+0xfa>
 800fa46:	6821      	ldr	r1, [r4, #0]
 800fa48:	6833      	ldr	r3, [r6, #0]
 800fa4a:	0608      	lsls	r0, r1, #24
 800fa4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800fa50:	d402      	bmi.n	800fa58 <_printf_i+0xe8>
 800fa52:	0649      	lsls	r1, r1, #25
 800fa54:	bf48      	it	mi
 800fa56:	b2ad      	uxthmi	r5, r5
 800fa58:	2f6f      	cmp	r7, #111	@ 0x6f
 800fa5a:	4852      	ldr	r0, [pc, #328]	@ (800fba4 <_printf_i+0x234>)
 800fa5c:	6033      	str	r3, [r6, #0]
 800fa5e:	bf14      	ite	ne
 800fa60:	230a      	movne	r3, #10
 800fa62:	2308      	moveq	r3, #8
 800fa64:	2100      	movs	r1, #0
 800fa66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fa6a:	6866      	ldr	r6, [r4, #4]
 800fa6c:	60a6      	str	r6, [r4, #8]
 800fa6e:	2e00      	cmp	r6, #0
 800fa70:	db05      	blt.n	800fa7e <_printf_i+0x10e>
 800fa72:	6821      	ldr	r1, [r4, #0]
 800fa74:	432e      	orrs	r6, r5
 800fa76:	f021 0104 	bic.w	r1, r1, #4
 800fa7a:	6021      	str	r1, [r4, #0]
 800fa7c:	d04b      	beq.n	800fb16 <_printf_i+0x1a6>
 800fa7e:	4616      	mov	r6, r2
 800fa80:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa84:	fb03 5711 	mls	r7, r3, r1, r5
 800fa88:	5dc7      	ldrb	r7, [r0, r7]
 800fa8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa8e:	462f      	mov	r7, r5
 800fa90:	42bb      	cmp	r3, r7
 800fa92:	460d      	mov	r5, r1
 800fa94:	d9f4      	bls.n	800fa80 <_printf_i+0x110>
 800fa96:	2b08      	cmp	r3, #8
 800fa98:	d10b      	bne.n	800fab2 <_printf_i+0x142>
 800fa9a:	6823      	ldr	r3, [r4, #0]
 800fa9c:	07df      	lsls	r7, r3, #31
 800fa9e:	d508      	bpl.n	800fab2 <_printf_i+0x142>
 800faa0:	6923      	ldr	r3, [r4, #16]
 800faa2:	6861      	ldr	r1, [r4, #4]
 800faa4:	4299      	cmp	r1, r3
 800faa6:	bfde      	ittt	le
 800faa8:	2330      	movle	r3, #48	@ 0x30
 800faaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800faae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fab2:	1b92      	subs	r2, r2, r6
 800fab4:	6122      	str	r2, [r4, #16]
 800fab6:	f8cd a000 	str.w	sl, [sp]
 800faba:	464b      	mov	r3, r9
 800fabc:	aa03      	add	r2, sp, #12
 800fabe:	4621      	mov	r1, r4
 800fac0:	4640      	mov	r0, r8
 800fac2:	f7ff fee7 	bl	800f894 <_printf_common>
 800fac6:	3001      	adds	r0, #1
 800fac8:	d14a      	bne.n	800fb60 <_printf_i+0x1f0>
 800faca:	f04f 30ff 	mov.w	r0, #4294967295
 800face:	b004      	add	sp, #16
 800fad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	f043 0320 	orr.w	r3, r3, #32
 800fada:	6023      	str	r3, [r4, #0]
 800fadc:	4832      	ldr	r0, [pc, #200]	@ (800fba8 <_printf_i+0x238>)
 800fade:	2778      	movs	r7, #120	@ 0x78
 800fae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	6831      	ldr	r1, [r6, #0]
 800fae8:	061f      	lsls	r7, r3, #24
 800faea:	f851 5b04 	ldr.w	r5, [r1], #4
 800faee:	d402      	bmi.n	800faf6 <_printf_i+0x186>
 800faf0:	065f      	lsls	r7, r3, #25
 800faf2:	bf48      	it	mi
 800faf4:	b2ad      	uxthmi	r5, r5
 800faf6:	6031      	str	r1, [r6, #0]
 800faf8:	07d9      	lsls	r1, r3, #31
 800fafa:	bf44      	itt	mi
 800fafc:	f043 0320 	orrmi.w	r3, r3, #32
 800fb00:	6023      	strmi	r3, [r4, #0]
 800fb02:	b11d      	cbz	r5, 800fb0c <_printf_i+0x19c>
 800fb04:	2310      	movs	r3, #16
 800fb06:	e7ad      	b.n	800fa64 <_printf_i+0xf4>
 800fb08:	4826      	ldr	r0, [pc, #152]	@ (800fba4 <_printf_i+0x234>)
 800fb0a:	e7e9      	b.n	800fae0 <_printf_i+0x170>
 800fb0c:	6823      	ldr	r3, [r4, #0]
 800fb0e:	f023 0320 	bic.w	r3, r3, #32
 800fb12:	6023      	str	r3, [r4, #0]
 800fb14:	e7f6      	b.n	800fb04 <_printf_i+0x194>
 800fb16:	4616      	mov	r6, r2
 800fb18:	e7bd      	b.n	800fa96 <_printf_i+0x126>
 800fb1a:	6833      	ldr	r3, [r6, #0]
 800fb1c:	6825      	ldr	r5, [r4, #0]
 800fb1e:	6961      	ldr	r1, [r4, #20]
 800fb20:	1d18      	adds	r0, r3, #4
 800fb22:	6030      	str	r0, [r6, #0]
 800fb24:	062e      	lsls	r6, r5, #24
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	d501      	bpl.n	800fb2e <_printf_i+0x1be>
 800fb2a:	6019      	str	r1, [r3, #0]
 800fb2c:	e002      	b.n	800fb34 <_printf_i+0x1c4>
 800fb2e:	0668      	lsls	r0, r5, #25
 800fb30:	d5fb      	bpl.n	800fb2a <_printf_i+0x1ba>
 800fb32:	8019      	strh	r1, [r3, #0]
 800fb34:	2300      	movs	r3, #0
 800fb36:	6123      	str	r3, [r4, #16]
 800fb38:	4616      	mov	r6, r2
 800fb3a:	e7bc      	b.n	800fab6 <_printf_i+0x146>
 800fb3c:	6833      	ldr	r3, [r6, #0]
 800fb3e:	1d1a      	adds	r2, r3, #4
 800fb40:	6032      	str	r2, [r6, #0]
 800fb42:	681e      	ldr	r6, [r3, #0]
 800fb44:	6862      	ldr	r2, [r4, #4]
 800fb46:	2100      	movs	r1, #0
 800fb48:	4630      	mov	r0, r6
 800fb4a:	f7f0 fbd1 	bl	80002f0 <memchr>
 800fb4e:	b108      	cbz	r0, 800fb54 <_printf_i+0x1e4>
 800fb50:	1b80      	subs	r0, r0, r6
 800fb52:	6060      	str	r0, [r4, #4]
 800fb54:	6863      	ldr	r3, [r4, #4]
 800fb56:	6123      	str	r3, [r4, #16]
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb5e:	e7aa      	b.n	800fab6 <_printf_i+0x146>
 800fb60:	6923      	ldr	r3, [r4, #16]
 800fb62:	4632      	mov	r2, r6
 800fb64:	4649      	mov	r1, r9
 800fb66:	4640      	mov	r0, r8
 800fb68:	47d0      	blx	sl
 800fb6a:	3001      	adds	r0, #1
 800fb6c:	d0ad      	beq.n	800faca <_printf_i+0x15a>
 800fb6e:	6823      	ldr	r3, [r4, #0]
 800fb70:	079b      	lsls	r3, r3, #30
 800fb72:	d413      	bmi.n	800fb9c <_printf_i+0x22c>
 800fb74:	68e0      	ldr	r0, [r4, #12]
 800fb76:	9b03      	ldr	r3, [sp, #12]
 800fb78:	4298      	cmp	r0, r3
 800fb7a:	bfb8      	it	lt
 800fb7c:	4618      	movlt	r0, r3
 800fb7e:	e7a6      	b.n	800face <_printf_i+0x15e>
 800fb80:	2301      	movs	r3, #1
 800fb82:	4632      	mov	r2, r6
 800fb84:	4649      	mov	r1, r9
 800fb86:	4640      	mov	r0, r8
 800fb88:	47d0      	blx	sl
 800fb8a:	3001      	adds	r0, #1
 800fb8c:	d09d      	beq.n	800faca <_printf_i+0x15a>
 800fb8e:	3501      	adds	r5, #1
 800fb90:	68e3      	ldr	r3, [r4, #12]
 800fb92:	9903      	ldr	r1, [sp, #12]
 800fb94:	1a5b      	subs	r3, r3, r1
 800fb96:	42ab      	cmp	r3, r5
 800fb98:	dcf2      	bgt.n	800fb80 <_printf_i+0x210>
 800fb9a:	e7eb      	b.n	800fb74 <_printf_i+0x204>
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	f104 0619 	add.w	r6, r4, #25
 800fba2:	e7f5      	b.n	800fb90 <_printf_i+0x220>
 800fba4:	0800fda5 	.word	0x0800fda5
 800fba8:	0800fdb6 	.word	0x0800fdb6

0800fbac <memmove>:
 800fbac:	4288      	cmp	r0, r1
 800fbae:	b510      	push	{r4, lr}
 800fbb0:	eb01 0402 	add.w	r4, r1, r2
 800fbb4:	d902      	bls.n	800fbbc <memmove+0x10>
 800fbb6:	4284      	cmp	r4, r0
 800fbb8:	4623      	mov	r3, r4
 800fbba:	d807      	bhi.n	800fbcc <memmove+0x20>
 800fbbc:	1e43      	subs	r3, r0, #1
 800fbbe:	42a1      	cmp	r1, r4
 800fbc0:	d008      	beq.n	800fbd4 <memmove+0x28>
 800fbc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbca:	e7f8      	b.n	800fbbe <memmove+0x12>
 800fbcc:	4402      	add	r2, r0
 800fbce:	4601      	mov	r1, r0
 800fbd0:	428a      	cmp	r2, r1
 800fbd2:	d100      	bne.n	800fbd6 <memmove+0x2a>
 800fbd4:	bd10      	pop	{r4, pc}
 800fbd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbde:	e7f7      	b.n	800fbd0 <memmove+0x24>

0800fbe0 <_sbrk_r>:
 800fbe0:	b538      	push	{r3, r4, r5, lr}
 800fbe2:	4d06      	ldr	r5, [pc, #24]	@ (800fbfc <_sbrk_r+0x1c>)
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	4608      	mov	r0, r1
 800fbea:	602b      	str	r3, [r5, #0]
 800fbec:	f7f1 fdc0 	bl	8001770 <_sbrk>
 800fbf0:	1c43      	adds	r3, r0, #1
 800fbf2:	d102      	bne.n	800fbfa <_sbrk_r+0x1a>
 800fbf4:	682b      	ldr	r3, [r5, #0]
 800fbf6:	b103      	cbz	r3, 800fbfa <_sbrk_r+0x1a>
 800fbf8:	6023      	str	r3, [r4, #0]
 800fbfa:	bd38      	pop	{r3, r4, r5, pc}
 800fbfc:	24005468 	.word	0x24005468

0800fc00 <_realloc_r>:
 800fc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc04:	4607      	mov	r7, r0
 800fc06:	4614      	mov	r4, r2
 800fc08:	460d      	mov	r5, r1
 800fc0a:	b921      	cbnz	r1, 800fc16 <_realloc_r+0x16>
 800fc0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc10:	4611      	mov	r1, r2
 800fc12:	f7ff bc5b 	b.w	800f4cc <_malloc_r>
 800fc16:	b92a      	cbnz	r2, 800fc24 <_realloc_r+0x24>
 800fc18:	f7ff fbec 	bl	800f3f4 <_free_r>
 800fc1c:	4625      	mov	r5, r4
 800fc1e:	4628      	mov	r0, r5
 800fc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc24:	f000 f81a 	bl	800fc5c <_malloc_usable_size_r>
 800fc28:	4284      	cmp	r4, r0
 800fc2a:	4606      	mov	r6, r0
 800fc2c:	d802      	bhi.n	800fc34 <_realloc_r+0x34>
 800fc2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fc32:	d8f4      	bhi.n	800fc1e <_realloc_r+0x1e>
 800fc34:	4621      	mov	r1, r4
 800fc36:	4638      	mov	r0, r7
 800fc38:	f7ff fc48 	bl	800f4cc <_malloc_r>
 800fc3c:	4680      	mov	r8, r0
 800fc3e:	b908      	cbnz	r0, 800fc44 <_realloc_r+0x44>
 800fc40:	4645      	mov	r5, r8
 800fc42:	e7ec      	b.n	800fc1e <_realloc_r+0x1e>
 800fc44:	42b4      	cmp	r4, r6
 800fc46:	4622      	mov	r2, r4
 800fc48:	4629      	mov	r1, r5
 800fc4a:	bf28      	it	cs
 800fc4c:	4632      	movcs	r2, r6
 800fc4e:	f7ff fbc3 	bl	800f3d8 <memcpy>
 800fc52:	4629      	mov	r1, r5
 800fc54:	4638      	mov	r0, r7
 800fc56:	f7ff fbcd 	bl	800f3f4 <_free_r>
 800fc5a:	e7f1      	b.n	800fc40 <_realloc_r+0x40>

0800fc5c <_malloc_usable_size_r>:
 800fc5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc60:	1f18      	subs	r0, r3, #4
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	bfbc      	itt	lt
 800fc66:	580b      	ldrlt	r3, [r1, r0]
 800fc68:	18c0      	addlt	r0, r0, r3
 800fc6a:	4770      	bx	lr

0800fc6c <_init>:
 800fc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc6e:	bf00      	nop
 800fc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc72:	bc08      	pop	{r3}
 800fc74:	469e      	mov	lr, r3
 800fc76:	4770      	bx	lr

0800fc78 <_fini>:
 800fc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7a:	bf00      	nop
 800fc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc7e:	bc08      	pop	{r3}
 800fc80:	469e      	mov	lr, r3
 800fc82:	4770      	bx	lr
