
ExoGrasp_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd4  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08105074  08105074  00006074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08105110  08105110  00006110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08105118  08105118  00006118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810511c  0810511c  0000611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  10000000  08105120  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ba0  10000064  08105184  00007064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10004c04  08105184  00007c04  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cd8f  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003776  00000000  00000000  00023e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001730  00000000  00000000  000275a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001208  00000000  00000000  00028cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bce2  00000000  00000000  00029ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b5b4  00000000  00000000  00065bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001909be  00000000  00000000  0008116e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00211b2c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000670c  00000000  00000000  00211b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000045  00000000  00000000  0021827c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000064 	.word	0x10000064
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810505c 	.word	0x0810505c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000068 	.word	0x10000068
 81002dc:	0810505c 	.word	0x0810505c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100390:	b480      	push	{r7}
 8100392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100394:	4b09      	ldr	r3, [pc, #36]	@ (81003bc <SystemInit+0x2c>)
 8100396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810039a:	4a08      	ldr	r2, [pc, #32]	@ (81003bc <SystemInit+0x2c>)
 810039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81003a4:	4b05      	ldr	r3, [pc, #20]	@ (81003bc <SystemInit+0x2c>)
 81003a6:	691b      	ldr	r3, [r3, #16]
 81003a8:	4a04      	ldr	r2, [pc, #16]	@ (81003bc <SystemInit+0x2c>)
 81003aa:	f043 0310 	orr.w	r3, r3, #16
 81003ae:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81003b0:	bf00      	nop
 81003b2:	46bd      	mov	sp, r7
 81003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003b8:	4770      	bx	lr
 81003ba:	bf00      	nop
 81003bc:	e000ed00 	.word	0xe000ed00

081003c0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 81003c0:	b480      	push	{r7}
 81003c2:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 81003c4:	4b09      	ldr	r3, [pc, #36]	@ (81003ec <ExitRun0Mode+0x2c>)
 81003c6:	68db      	ldr	r3, [r3, #12]
 81003c8:	4a08      	ldr	r2, [pc, #32]	@ (81003ec <ExitRun0Mode+0x2c>)
 81003ca:	f023 0302 	bic.w	r3, r3, #2
 81003ce:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 81003d0:	bf00      	nop
 81003d2:	4b06      	ldr	r3, [pc, #24]	@ (81003ec <ExitRun0Mode+0x2c>)
 81003d4:	685b      	ldr	r3, [r3, #4]
 81003d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81003da:	2b00      	cmp	r3, #0
 81003dc:	d0f9      	beq.n	81003d2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 81003de:	bf00      	nop
 81003e0:	bf00      	nop
 81003e2:	46bd      	mov	sp, r7
 81003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003e8:	4770      	bx	lr
 81003ea:	bf00      	nop
 81003ec:	58024800 	.word	0x58024800

081003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81003f0:	b580      	push	{r7, lr}
 81003f2:	b082      	sub	sp, #8
 81003f4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81003f6:	4b22      	ldr	r3, [pc, #136]	@ (8100480 <main+0x90>)
 81003f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003fc:	4a20      	ldr	r2, [pc, #128]	@ (8100480 <main+0x90>)
 81003fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100402:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100406:	4b1e      	ldr	r3, [pc, #120]	@ (8100480 <main+0x90>)
 8100408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810040c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100410:	607b      	str	r3, [r7, #4]
 8100412:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100414:	2001      	movs	r0, #1
 8100416:	f000 fcf3 	bl	8100e00 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810041a:	f000 fd7d 	bl	8100f18 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810041e:	2201      	movs	r2, #1
 8100420:	2102      	movs	r1, #2
 8100422:	2000      	movs	r0, #0
 8100424:	f000 fcfe 	bl	8100e24 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100428:	4b16      	ldr	r3, [pc, #88]	@ (8100484 <main+0x94>)
 810042a:	681b      	ldr	r3, [r3, #0]
 810042c:	091b      	lsrs	r3, r3, #4
 810042e:	f003 030f 	and.w	r3, r3, #15
 8100432:	2b07      	cmp	r3, #7
 8100434:	d108      	bne.n	8100448 <main+0x58>
 8100436:	4b14      	ldr	r3, [pc, #80]	@ (8100488 <main+0x98>)
 8100438:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810043c:	4a12      	ldr	r2, [pc, #72]	@ (8100488 <main+0x98>)
 810043e:	f043 0301 	orr.w	r3, r3, #1
 8100442:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100446:	e007      	b.n	8100458 <main+0x68>
 8100448:	4b0f      	ldr	r3, [pc, #60]	@ (8100488 <main+0x98>)
 810044a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810044e:	4a0e      	ldr	r2, [pc, #56]	@ (8100488 <main+0x98>)
 8100450:	f043 0301 	orr.w	r3, r3, #1
 8100454:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100458:	f000 f9b0 	bl	81007bc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810045c:	f000 f836 	bl	81004cc <MX_GPIO_Init>
  MX_DMA_Init();
 8100460:	f000 f81a 	bl	8100498 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100464:	f001 fbd8 	bl	8101c18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8100468:	4a08      	ldr	r2, [pc, #32]	@ (810048c <main+0x9c>)
 810046a:	2100      	movs	r1, #0
 810046c:	4808      	ldr	r0, [pc, #32]	@ (8100490 <main+0xa0>)
 810046e:	f001 fc1d 	bl	8101cac <osThreadNew>
 8100472:	4603      	mov	r3, r0
 8100474:	4a07      	ldr	r2, [pc, #28]	@ (8100494 <main+0xa4>)
 8100476:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100478:	f001 fbf2 	bl	8101c60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810047c:	bf00      	nop
 810047e:	e7fd      	b.n	810047c <main+0x8c>
 8100480:	58024400 	.word	0x58024400
 8100484:	e000ed00 	.word	0xe000ed00
 8100488:	58026400 	.word	0x58026400
 810048c:	081050b8 	.word	0x081050b8
 8100490:	08100531 	.word	0x08100531
 8100494:	10000114 	.word	0x10000114

08100498 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8100498:	b480      	push	{r7}
 810049a:	b083      	sub	sp, #12
 810049c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810049e:	4b0a      	ldr	r3, [pc, #40]	@ (81004c8 <MX_DMA_Init+0x30>)
 81004a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81004a4:	4a08      	ldr	r2, [pc, #32]	@ (81004c8 <MX_DMA_Init+0x30>)
 81004a6:	f043 0301 	orr.w	r3, r3, #1
 81004aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81004ae:	4b06      	ldr	r3, [pc, #24]	@ (81004c8 <MX_DMA_Init+0x30>)
 81004b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81004b4:	f003 0301 	and.w	r3, r3, #1
 81004b8:	607b      	str	r3, [r7, #4]
 81004ba:	687b      	ldr	r3, [r7, #4]

}
 81004bc:	bf00      	nop
 81004be:	370c      	adds	r7, #12
 81004c0:	46bd      	mov	sp, r7
 81004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004c6:	4770      	bx	lr
 81004c8:	58024400 	.word	0x58024400

081004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81004cc:	b580      	push	{r7, lr}
 81004ce:	b086      	sub	sp, #24
 81004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81004d2:	1d3b      	adds	r3, r7, #4
 81004d4:	2200      	movs	r2, #0
 81004d6:	601a      	str	r2, [r3, #0]
 81004d8:	605a      	str	r2, [r3, #4]
 81004da:	609a      	str	r2, [r3, #8]
 81004dc:	60da      	str	r2, [r3, #12]
 81004de:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81004e0:	4b11      	ldr	r3, [pc, #68]	@ (8100528 <MX_GPIO_Init+0x5c>)
 81004e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004e6:	4a10      	ldr	r2, [pc, #64]	@ (8100528 <MX_GPIO_Init+0x5c>)
 81004e8:	f043 0301 	orr.w	r3, r3, #1
 81004ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81004f0:	4b0d      	ldr	r3, [pc, #52]	@ (8100528 <MX_GPIO_Init+0x5c>)
 81004f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004f6:	f003 0301 	and.w	r3, r3, #1
 81004fa:	603b      	str	r3, [r7, #0]
 81004fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 81004fe:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8100502:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100504:	2302      	movs	r3, #2
 8100506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100508:	2300      	movs	r3, #0
 810050a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810050c:	2300      	movs	r3, #0
 810050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8100510:	230a      	movs	r3, #10
 8100512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100514:	1d3b      	adds	r3, r7, #4
 8100516:	4619      	mov	r1, r3
 8100518:	4804      	ldr	r0, [pc, #16]	@ (810052c <MX_GPIO_Init+0x60>)
 810051a:	f000 fac1 	bl	8100aa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810051e:	bf00      	nop
 8100520:	3718      	adds	r7, #24
 8100522:	46bd      	mov	sp, r7
 8100524:	bd80      	pop	{r7, pc}
 8100526:	bf00      	nop
 8100528:	58024400 	.word	0x58024400
 810052c:	58020000 	.word	0x58020000

08100530 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8100530:	b580      	push	{r7, lr}
 8100532:	b092      	sub	sp, #72	@ 0x48
 8100534:	af00      	add	r7, sp, #0
 8100536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	char msg[64];
	sprintf(msg, "Hello World!");
 8100538:	f107 0308 	add.w	r3, r7, #8
 810053c:	490b      	ldr	r1, [pc, #44]	@ (810056c <StartMainTask+0x3c>)
 810053e:	4618      	mov	r0, r3
 8100540:	f004 f8ec 	bl	810471c <siprintf>
	HAL_UART_Transmit(&huart3, msg, strlen(msg), HAL_MAX_DELAY);
 8100544:	f107 0308 	add.w	r3, r7, #8
 8100548:	4618      	mov	r0, r3
 810054a:	f7ff fec9 	bl	81002e0 <strlen>
 810054e:	4603      	mov	r3, r0
 8100550:	b29a      	uxth	r2, r3
 8100552:	f107 0108 	add.w	r1, r7, #8
 8100556:	f04f 33ff 	mov.w	r3, #4294967295
 810055a:	4805      	ldr	r0, [pc, #20]	@ (8100570 <StartMainTask+0x40>)
 810055c:	f001 f9b6 	bl	81018cc <HAL_UART_Transmit>
    osDelay(200);
 8100560:	20c8      	movs	r0, #200	@ 0xc8
 8100562:	f001 fc35 	bl	8101dd0 <osDelay>
  {
 8100566:	bf00      	nop
 8100568:	e7e6      	b.n	8100538 <StartMainTask+0x8>
 810056a:	bf00      	nop
 810056c:	08105080 	.word	0x08105080
 8100570:	10000080 	.word	0x10000080

08100574 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100574:	b580      	push	{r7, lr}
 8100576:	b082      	sub	sp, #8
 8100578:	af00      	add	r7, sp, #0
 810057a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 810057c:	687b      	ldr	r3, [r7, #4]
 810057e:	681b      	ldr	r3, [r3, #0]
 8100580:	4a04      	ldr	r2, [pc, #16]	@ (8100594 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100582:	4293      	cmp	r3, r2
 8100584:	d101      	bne.n	810058a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100586:	f000 f977 	bl	8100878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810058a:	bf00      	nop
 810058c:	3708      	adds	r7, #8
 810058e:	46bd      	mov	sp, r7
 8100590:	bd80      	pop	{r7, pc}
 8100592:	bf00      	nop
 8100594:	40001400 	.word	0x40001400

08100598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100598:	b580      	push	{r7, lr}
 810059a:	b082      	sub	sp, #8
 810059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810059e:	4b0c      	ldr	r3, [pc, #48]	@ (81005d0 <HAL_MspInit+0x38>)
 81005a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81005a4:	4a0a      	ldr	r2, [pc, #40]	@ (81005d0 <HAL_MspInit+0x38>)
 81005a6:	f043 0302 	orr.w	r3, r3, #2
 81005aa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81005ae:	4b08      	ldr	r3, [pc, #32]	@ (81005d0 <HAL_MspInit+0x38>)
 81005b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81005b4:	f003 0302 	and.w	r3, r3, #2
 81005b8:	607b      	str	r3, [r7, #4]
 81005ba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81005bc:	2200      	movs	r2, #0
 81005be:	210f      	movs	r1, #15
 81005c0:	f06f 0001 	mvn.w	r0, #1
 81005c4:	f000 fa30 	bl	8100a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81005c8:	bf00      	nop
 81005ca:	3708      	adds	r7, #8
 81005cc:	46bd      	mov	sp, r7
 81005ce:	bd80      	pop	{r7, pc}
 81005d0:	58024400 	.word	0x58024400

081005d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81005d4:	b580      	push	{r7, lr}
 81005d6:	b090      	sub	sp, #64	@ 0x40
 81005d8:	af00      	add	r7, sp, #0
 81005da:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81005dc:	687b      	ldr	r3, [r7, #4]
 81005de:	2b0f      	cmp	r3, #15
 81005e0:	d827      	bhi.n	8100632 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 81005e2:	2200      	movs	r2, #0
 81005e4:	6879      	ldr	r1, [r7, #4]
 81005e6:	2037      	movs	r0, #55	@ 0x37
 81005e8:	f000 fa1e 	bl	8100a28 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 81005ec:	2037      	movs	r0, #55	@ 0x37
 81005ee:	f000 fa35 	bl	8100a5c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 81005f2:	4a29      	ldr	r2, [pc, #164]	@ (8100698 <HAL_InitTick+0xc4>)
 81005f4:	687b      	ldr	r3, [r7, #4]
 81005f6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 81005f8:	4b28      	ldr	r3, [pc, #160]	@ (810069c <HAL_InitTick+0xc8>)
 81005fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81005fe:	4a27      	ldr	r2, [pc, #156]	@ (810069c <HAL_InitTick+0xc8>)
 8100600:	f043 0320 	orr.w	r3, r3, #32
 8100604:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100608:	4b24      	ldr	r3, [pc, #144]	@ (810069c <HAL_InitTick+0xc8>)
 810060a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810060e:	f003 0320 	and.w	r3, r3, #32
 8100612:	60fb      	str	r3, [r7, #12]
 8100614:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100616:	f107 0210 	add.w	r2, r7, #16
 810061a:	f107 0314 	add.w	r3, r7, #20
 810061e:	4611      	mov	r1, r2
 8100620:	4618      	mov	r0, r3
 8100622:	f000 fe49 	bl	81012b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100628:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810062a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810062c:	2b00      	cmp	r3, #0
 810062e:	d106      	bne.n	810063e <HAL_InitTick+0x6a>
 8100630:	e001      	b.n	8100636 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100632:	2301      	movs	r3, #1
 8100634:	e02b      	b.n	810068e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100636:	f000 fe29 	bl	810128c <HAL_RCC_GetPCLK1Freq>
 810063a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 810063c:	e004      	b.n	8100648 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810063e:	f000 fe25 	bl	810128c <HAL_RCC_GetPCLK1Freq>
 8100642:	4603      	mov	r3, r0
 8100644:	005b      	lsls	r3, r3, #1
 8100646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810064a:	4a15      	ldr	r2, [pc, #84]	@ (81006a0 <HAL_InitTick+0xcc>)
 810064c:	fba2 2303 	umull	r2, r3, r2, r3
 8100650:	0c9b      	lsrs	r3, r3, #18
 8100652:	3b01      	subs	r3, #1
 8100654:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8100656:	4b13      	ldr	r3, [pc, #76]	@ (81006a4 <HAL_InitTick+0xd0>)
 8100658:	4a13      	ldr	r2, [pc, #76]	@ (81006a8 <HAL_InitTick+0xd4>)
 810065a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 810065c:	4b11      	ldr	r3, [pc, #68]	@ (81006a4 <HAL_InitTick+0xd0>)
 810065e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100662:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8100664:	4a0f      	ldr	r2, [pc, #60]	@ (81006a4 <HAL_InitTick+0xd0>)
 8100666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100668:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 810066a:	4b0e      	ldr	r3, [pc, #56]	@ (81006a4 <HAL_InitTick+0xd0>)
 810066c:	2200      	movs	r2, #0
 810066e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100670:	4b0c      	ldr	r3, [pc, #48]	@ (81006a4 <HAL_InitTick+0xd0>)
 8100672:	2200      	movs	r2, #0
 8100674:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8100676:	480b      	ldr	r0, [pc, #44]	@ (81006a4 <HAL_InitTick+0xd0>)
 8100678:	f000 fe60 	bl	810133c <HAL_TIM_Base_Init>
 810067c:	4603      	mov	r3, r0
 810067e:	2b00      	cmp	r3, #0
 8100680:	d104      	bne.n	810068c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8100682:	4808      	ldr	r0, [pc, #32]	@ (81006a4 <HAL_InitTick+0xd0>)
 8100684:	f000 febc 	bl	8101400 <HAL_TIM_Base_Start_IT>
 8100688:	4603      	mov	r3, r0
 810068a:	e000      	b.n	810068e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 810068c:	2301      	movs	r3, #1
}
 810068e:	4618      	mov	r0, r3
 8100690:	3740      	adds	r7, #64	@ 0x40
 8100692:	46bd      	mov	sp, r7
 8100694:	bd80      	pop	{r7, pc}
 8100696:	bf00      	nop
 8100698:	10000008 	.word	0x10000008
 810069c:	58024400 	.word	0x58024400
 81006a0:	431bde83 	.word	0x431bde83
 81006a4:	10000118 	.word	0x10000118
 81006a8:	40001400 	.word	0x40001400

081006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81006ac:	b480      	push	{r7}
 81006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81006b0:	bf00      	nop
 81006b2:	e7fd      	b.n	81006b0 <NMI_Handler+0x4>

081006b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81006b4:	b480      	push	{r7}
 81006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81006b8:	bf00      	nop
 81006ba:	e7fd      	b.n	81006b8 <HardFault_Handler+0x4>

081006bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81006bc:	b480      	push	{r7}
 81006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81006c0:	bf00      	nop
 81006c2:	e7fd      	b.n	81006c0 <MemManage_Handler+0x4>

081006c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81006c4:	b480      	push	{r7}
 81006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81006c8:	bf00      	nop
 81006ca:	e7fd      	b.n	81006c8 <BusFault_Handler+0x4>

081006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81006cc:	b480      	push	{r7}
 81006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81006d0:	bf00      	nop
 81006d2:	e7fd      	b.n	81006d0 <UsageFault_Handler+0x4>

081006d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81006d4:	b480      	push	{r7}
 81006d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81006d8:	bf00      	nop
 81006da:	46bd      	mov	sp, r7
 81006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006e0:	4770      	bx	lr
	...

081006e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 81006e4:	b580      	push	{r7, lr}
 81006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 81006e8:	4802      	ldr	r0, [pc, #8]	@ (81006f4 <TIM7_IRQHandler+0x10>)
 81006ea:	f000 ff01 	bl	81014f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 81006ee:	bf00      	nop
 81006f0:	bd80      	pop	{r7, pc}
 81006f2:	bf00      	nop
 81006f4:	10000118 	.word	0x10000118

081006f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81006f8:	b580      	push	{r7, lr}
 81006fa:	b086      	sub	sp, #24
 81006fc:	af00      	add	r7, sp, #0
 81006fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100700:	4a14      	ldr	r2, [pc, #80]	@ (8100754 <_sbrk+0x5c>)
 8100702:	4b15      	ldr	r3, [pc, #84]	@ (8100758 <_sbrk+0x60>)
 8100704:	1ad3      	subs	r3, r2, r3
 8100706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100708:	697b      	ldr	r3, [r7, #20]
 810070a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 810070c:	4b13      	ldr	r3, [pc, #76]	@ (810075c <_sbrk+0x64>)
 810070e:	681b      	ldr	r3, [r3, #0]
 8100710:	2b00      	cmp	r3, #0
 8100712:	d102      	bne.n	810071a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100714:	4b11      	ldr	r3, [pc, #68]	@ (810075c <_sbrk+0x64>)
 8100716:	4a12      	ldr	r2, [pc, #72]	@ (8100760 <_sbrk+0x68>)
 8100718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810071a:	4b10      	ldr	r3, [pc, #64]	@ (810075c <_sbrk+0x64>)
 810071c:	681a      	ldr	r2, [r3, #0]
 810071e:	687b      	ldr	r3, [r7, #4]
 8100720:	4413      	add	r3, r2
 8100722:	693a      	ldr	r2, [r7, #16]
 8100724:	429a      	cmp	r2, r3
 8100726:	d207      	bcs.n	8100738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100728:	f004 f820 	bl	810476c <__errno>
 810072c:	4603      	mov	r3, r0
 810072e:	220c      	movs	r2, #12
 8100730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100732:	f04f 33ff 	mov.w	r3, #4294967295
 8100736:	e009      	b.n	810074c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100738:	4b08      	ldr	r3, [pc, #32]	@ (810075c <_sbrk+0x64>)
 810073a:	681b      	ldr	r3, [r3, #0]
 810073c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810073e:	4b07      	ldr	r3, [pc, #28]	@ (810075c <_sbrk+0x64>)
 8100740:	681a      	ldr	r2, [r3, #0]
 8100742:	687b      	ldr	r3, [r7, #4]
 8100744:	4413      	add	r3, r2
 8100746:	4a05      	ldr	r2, [pc, #20]	@ (810075c <_sbrk+0x64>)
 8100748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810074a:	68fb      	ldr	r3, [r7, #12]
}
 810074c:	4618      	mov	r0, r3
 810074e:	3718      	adds	r7, #24
 8100750:	46bd      	mov	sp, r7
 8100752:	bd80      	pop	{r7, pc}
 8100754:	10048000 	.word	0x10048000
 8100758:	00000400 	.word	0x00000400
 810075c:	10000164 	.word	0x10000164
 8100760:	10004c08 	.word	0x10004c08

08100764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100764:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81007a0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8100768:	f7ff fe2a 	bl	81003c0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 810076c:	f7ff fe10 	bl	8100390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100770:	480c      	ldr	r0, [pc, #48]	@ (81007a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100772:	490d      	ldr	r1, [pc, #52]	@ (81007a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100774:	4a0d      	ldr	r2, [pc, #52]	@ (81007ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100778:	e002      	b.n	8100780 <LoopCopyDataInit>

0810077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810077e:	3304      	adds	r3, #4

08100780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100784:	d3f9      	bcc.n	810077a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100786:	4a0a      	ldr	r2, [pc, #40]	@ (81007b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100788:	4c0a      	ldr	r4, [pc, #40]	@ (81007b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810078c:	e001      	b.n	8100792 <LoopFillZerobss>

0810078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100790:	3204      	adds	r2, #4

08100792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100794:	d3fb      	bcc.n	810078e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100796:	f003 ffef 	bl	8104778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810079a:	f7ff fe29 	bl	81003f0 <main>
  bx  lr
 810079e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81007a0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81007a4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81007a8:	10000064 	.word	0x10000064
  ldr r2, =_sidata
 81007ac:	08105120 	.word	0x08105120
  ldr r2, =_sbss
 81007b0:	10000064 	.word	0x10000064
  ldr r4, =_ebss
 81007b4:	10004c04 	.word	0x10004c04

081007b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81007b8:	e7fe      	b.n	81007b8 <ADC3_IRQHandler>
	...

081007bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81007bc:	b580      	push	{r7, lr}
 81007be:	b082      	sub	sp, #8
 81007c0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81007c2:	4b28      	ldr	r3, [pc, #160]	@ (8100864 <HAL_Init+0xa8>)
 81007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81007c8:	4a26      	ldr	r2, [pc, #152]	@ (8100864 <HAL_Init+0xa8>)
 81007ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81007ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81007d2:	4b24      	ldr	r3, [pc, #144]	@ (8100864 <HAL_Init+0xa8>)
 81007d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81007d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81007dc:	603b      	str	r3, [r7, #0]
 81007de:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81007e0:	4b21      	ldr	r3, [pc, #132]	@ (8100868 <HAL_Init+0xac>)
 81007e2:	681b      	ldr	r3, [r3, #0]
 81007e4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81007e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81007ec:	4a1e      	ldr	r2, [pc, #120]	@ (8100868 <HAL_Init+0xac>)
 81007ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81007f2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8100868 <HAL_Init+0xac>)
 81007f6:	681b      	ldr	r3, [r3, #0]
 81007f8:	4a1b      	ldr	r2, [pc, #108]	@ (8100868 <HAL_Init+0xac>)
 81007fa:	f043 0301 	orr.w	r3, r3, #1
 81007fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100800:	2003      	movs	r0, #3
 8100802:	f000 f906 	bl	8100a12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100806:	f000 fb95 	bl	8100f34 <HAL_RCC_GetSysClockFreq>
 810080a:	4602      	mov	r2, r0
 810080c:	4b15      	ldr	r3, [pc, #84]	@ (8100864 <HAL_Init+0xa8>)
 810080e:	699b      	ldr	r3, [r3, #24]
 8100810:	0a1b      	lsrs	r3, r3, #8
 8100812:	f003 030f 	and.w	r3, r3, #15
 8100816:	4915      	ldr	r1, [pc, #84]	@ (810086c <HAL_Init+0xb0>)
 8100818:	5ccb      	ldrb	r3, [r1, r3]
 810081a:	f003 031f 	and.w	r3, r3, #31
 810081e:	fa22 f303 	lsr.w	r3, r2, r3
 8100822:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100824:	4b0f      	ldr	r3, [pc, #60]	@ (8100864 <HAL_Init+0xa8>)
 8100826:	699b      	ldr	r3, [r3, #24]
 8100828:	f003 030f 	and.w	r3, r3, #15
 810082c:	4a0f      	ldr	r2, [pc, #60]	@ (810086c <HAL_Init+0xb0>)
 810082e:	5cd3      	ldrb	r3, [r2, r3]
 8100830:	f003 031f 	and.w	r3, r3, #31
 8100834:	687a      	ldr	r2, [r7, #4]
 8100836:	fa22 f303 	lsr.w	r3, r2, r3
 810083a:	4a0d      	ldr	r2, [pc, #52]	@ (8100870 <HAL_Init+0xb4>)
 810083c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810083e:	4b0c      	ldr	r3, [pc, #48]	@ (8100870 <HAL_Init+0xb4>)
 8100840:	681b      	ldr	r3, [r3, #0]
 8100842:	4a0c      	ldr	r2, [pc, #48]	@ (8100874 <HAL_Init+0xb8>)
 8100844:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100846:	200f      	movs	r0, #15
 8100848:	f7ff fec4 	bl	81005d4 <HAL_InitTick>
 810084c:	4603      	mov	r3, r0
 810084e:	2b00      	cmp	r3, #0
 8100850:	d001      	beq.n	8100856 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100852:	2301      	movs	r3, #1
 8100854:	e002      	b.n	810085c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100856:	f7ff fe9f 	bl	8100598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810085a:	2300      	movs	r3, #0
}
 810085c:	4618      	mov	r0, r3
 810085e:	3708      	adds	r7, #8
 8100860:	46bd      	mov	sp, r7
 8100862:	bd80      	pop	{r7, pc}
 8100864:	58024400 	.word	0x58024400
 8100868:	40024400 	.word	0x40024400
 810086c:	081050a8 	.word	0x081050a8
 8100870:	10000004 	.word	0x10000004
 8100874:	10000000 	.word	0x10000000

08100878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100878:	b480      	push	{r7}
 810087a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810087c:	4b06      	ldr	r3, [pc, #24]	@ (8100898 <HAL_IncTick+0x20>)
 810087e:	781b      	ldrb	r3, [r3, #0]
 8100880:	461a      	mov	r2, r3
 8100882:	4b06      	ldr	r3, [pc, #24]	@ (810089c <HAL_IncTick+0x24>)
 8100884:	681b      	ldr	r3, [r3, #0]
 8100886:	4413      	add	r3, r2
 8100888:	4a04      	ldr	r2, [pc, #16]	@ (810089c <HAL_IncTick+0x24>)
 810088a:	6013      	str	r3, [r2, #0]
}
 810088c:	bf00      	nop
 810088e:	46bd      	mov	sp, r7
 8100890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100894:	4770      	bx	lr
 8100896:	bf00      	nop
 8100898:	1000000c 	.word	0x1000000c
 810089c:	10000168 	.word	0x10000168

081008a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81008a0:	b480      	push	{r7}
 81008a2:	af00      	add	r7, sp, #0
  return uwTick;
 81008a4:	4b03      	ldr	r3, [pc, #12]	@ (81008b4 <HAL_GetTick+0x14>)
 81008a6:	681b      	ldr	r3, [r3, #0]
}
 81008a8:	4618      	mov	r0, r3
 81008aa:	46bd      	mov	sp, r7
 81008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008b0:	4770      	bx	lr
 81008b2:	bf00      	nop
 81008b4:	10000168 	.word	0x10000168

081008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81008b8:	b480      	push	{r7}
 81008ba:	b085      	sub	sp, #20
 81008bc:	af00      	add	r7, sp, #0
 81008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81008c0:	687b      	ldr	r3, [r7, #4]
 81008c2:	f003 0307 	and.w	r3, r3, #7
 81008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81008c8:	4b0c      	ldr	r3, [pc, #48]	@ (81008fc <__NVIC_SetPriorityGrouping+0x44>)
 81008ca:	68db      	ldr	r3, [r3, #12]
 81008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81008ce:	68ba      	ldr	r2, [r7, #8]
 81008d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81008d4:	4013      	ands	r3, r2
 81008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81008d8:	68fb      	ldr	r3, [r7, #12]
 81008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81008dc:	68bb      	ldr	r3, [r7, #8]
 81008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81008e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81008e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81008ea:	4a04      	ldr	r2, [pc, #16]	@ (81008fc <__NVIC_SetPriorityGrouping+0x44>)
 81008ec:	68bb      	ldr	r3, [r7, #8]
 81008ee:	60d3      	str	r3, [r2, #12]
}
 81008f0:	bf00      	nop
 81008f2:	3714      	adds	r7, #20
 81008f4:	46bd      	mov	sp, r7
 81008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008fa:	4770      	bx	lr
 81008fc:	e000ed00 	.word	0xe000ed00

08100900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100900:	b480      	push	{r7}
 8100902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100904:	4b04      	ldr	r3, [pc, #16]	@ (8100918 <__NVIC_GetPriorityGrouping+0x18>)
 8100906:	68db      	ldr	r3, [r3, #12]
 8100908:	0a1b      	lsrs	r3, r3, #8
 810090a:	f003 0307 	and.w	r3, r3, #7
}
 810090e:	4618      	mov	r0, r3
 8100910:	46bd      	mov	sp, r7
 8100912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100916:	4770      	bx	lr
 8100918:	e000ed00 	.word	0xe000ed00

0810091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810091c:	b480      	push	{r7}
 810091e:	b083      	sub	sp, #12
 8100920:	af00      	add	r7, sp, #0
 8100922:	4603      	mov	r3, r0
 8100924:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810092a:	2b00      	cmp	r3, #0
 810092c:	db0b      	blt.n	8100946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810092e:	88fb      	ldrh	r3, [r7, #6]
 8100930:	f003 021f 	and.w	r2, r3, #31
 8100934:	4907      	ldr	r1, [pc, #28]	@ (8100954 <__NVIC_EnableIRQ+0x38>)
 8100936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810093a:	095b      	lsrs	r3, r3, #5
 810093c:	2001      	movs	r0, #1
 810093e:	fa00 f202 	lsl.w	r2, r0, r2
 8100942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100946:	bf00      	nop
 8100948:	370c      	adds	r7, #12
 810094a:	46bd      	mov	sp, r7
 810094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100950:	4770      	bx	lr
 8100952:	bf00      	nop
 8100954:	e000e100 	.word	0xe000e100

08100958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100958:	b480      	push	{r7}
 810095a:	b083      	sub	sp, #12
 810095c:	af00      	add	r7, sp, #0
 810095e:	4603      	mov	r3, r0
 8100960:	6039      	str	r1, [r7, #0]
 8100962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100968:	2b00      	cmp	r3, #0
 810096a:	db0a      	blt.n	8100982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810096c:	683b      	ldr	r3, [r7, #0]
 810096e:	b2da      	uxtb	r2, r3
 8100970:	490c      	ldr	r1, [pc, #48]	@ (81009a4 <__NVIC_SetPriority+0x4c>)
 8100972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100976:	0112      	lsls	r2, r2, #4
 8100978:	b2d2      	uxtb	r2, r2
 810097a:	440b      	add	r3, r1
 810097c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100980:	e00a      	b.n	8100998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100982:	683b      	ldr	r3, [r7, #0]
 8100984:	b2da      	uxtb	r2, r3
 8100986:	4908      	ldr	r1, [pc, #32]	@ (81009a8 <__NVIC_SetPriority+0x50>)
 8100988:	88fb      	ldrh	r3, [r7, #6]
 810098a:	f003 030f 	and.w	r3, r3, #15
 810098e:	3b04      	subs	r3, #4
 8100990:	0112      	lsls	r2, r2, #4
 8100992:	b2d2      	uxtb	r2, r2
 8100994:	440b      	add	r3, r1
 8100996:	761a      	strb	r2, [r3, #24]
}
 8100998:	bf00      	nop
 810099a:	370c      	adds	r7, #12
 810099c:	46bd      	mov	sp, r7
 810099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009a2:	4770      	bx	lr
 81009a4:	e000e100 	.word	0xe000e100
 81009a8:	e000ed00 	.word	0xe000ed00

081009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81009ac:	b480      	push	{r7}
 81009ae:	b089      	sub	sp, #36	@ 0x24
 81009b0:	af00      	add	r7, sp, #0
 81009b2:	60f8      	str	r0, [r7, #12]
 81009b4:	60b9      	str	r1, [r7, #8]
 81009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81009b8:	68fb      	ldr	r3, [r7, #12]
 81009ba:	f003 0307 	and.w	r3, r3, #7
 81009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81009c0:	69fb      	ldr	r3, [r7, #28]
 81009c2:	f1c3 0307 	rsb	r3, r3, #7
 81009c6:	2b04      	cmp	r3, #4
 81009c8:	bf28      	it	cs
 81009ca:	2304      	movcs	r3, #4
 81009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81009ce:	69fb      	ldr	r3, [r7, #28]
 81009d0:	3304      	adds	r3, #4
 81009d2:	2b06      	cmp	r3, #6
 81009d4:	d902      	bls.n	81009dc <NVIC_EncodePriority+0x30>
 81009d6:	69fb      	ldr	r3, [r7, #28]
 81009d8:	3b03      	subs	r3, #3
 81009da:	e000      	b.n	81009de <NVIC_EncodePriority+0x32>
 81009dc:	2300      	movs	r3, #0
 81009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81009e0:	f04f 32ff 	mov.w	r2, #4294967295
 81009e4:	69bb      	ldr	r3, [r7, #24]
 81009e6:	fa02 f303 	lsl.w	r3, r2, r3
 81009ea:	43da      	mvns	r2, r3
 81009ec:	68bb      	ldr	r3, [r7, #8]
 81009ee:	401a      	ands	r2, r3
 81009f0:	697b      	ldr	r3, [r7, #20]
 81009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81009f4:	f04f 31ff 	mov.w	r1, #4294967295
 81009f8:	697b      	ldr	r3, [r7, #20]
 81009fa:	fa01 f303 	lsl.w	r3, r1, r3
 81009fe:	43d9      	mvns	r1, r3
 8100a00:	687b      	ldr	r3, [r7, #4]
 8100a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a04:	4313      	orrs	r3, r2
         );
}
 8100a06:	4618      	mov	r0, r3
 8100a08:	3724      	adds	r7, #36	@ 0x24
 8100a0a:	46bd      	mov	sp, r7
 8100a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a10:	4770      	bx	lr

08100a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100a12:	b580      	push	{r7, lr}
 8100a14:	b082      	sub	sp, #8
 8100a16:	af00      	add	r7, sp, #0
 8100a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100a1a:	6878      	ldr	r0, [r7, #4]
 8100a1c:	f7ff ff4c 	bl	81008b8 <__NVIC_SetPriorityGrouping>
}
 8100a20:	bf00      	nop
 8100a22:	3708      	adds	r7, #8
 8100a24:	46bd      	mov	sp, r7
 8100a26:	bd80      	pop	{r7, pc}

08100a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100a28:	b580      	push	{r7, lr}
 8100a2a:	b086      	sub	sp, #24
 8100a2c:	af00      	add	r7, sp, #0
 8100a2e:	4603      	mov	r3, r0
 8100a30:	60b9      	str	r1, [r7, #8]
 8100a32:	607a      	str	r2, [r7, #4]
 8100a34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100a36:	f7ff ff63 	bl	8100900 <__NVIC_GetPriorityGrouping>
 8100a3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100a3c:	687a      	ldr	r2, [r7, #4]
 8100a3e:	68b9      	ldr	r1, [r7, #8]
 8100a40:	6978      	ldr	r0, [r7, #20]
 8100a42:	f7ff ffb3 	bl	81009ac <NVIC_EncodePriority>
 8100a46:	4602      	mov	r2, r0
 8100a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100a4c:	4611      	mov	r1, r2
 8100a4e:	4618      	mov	r0, r3
 8100a50:	f7ff ff82 	bl	8100958 <__NVIC_SetPriority>
}
 8100a54:	bf00      	nop
 8100a56:	3718      	adds	r7, #24
 8100a58:	46bd      	mov	sp, r7
 8100a5a:	bd80      	pop	{r7, pc}

08100a5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100a5c:	b580      	push	{r7, lr}
 8100a5e:	b082      	sub	sp, #8
 8100a60:	af00      	add	r7, sp, #0
 8100a62:	4603      	mov	r3, r0
 8100a64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a6a:	4618      	mov	r0, r3
 8100a6c:	f7ff ff56 	bl	810091c <__NVIC_EnableIRQ>
}
 8100a70:	bf00      	nop
 8100a72:	3708      	adds	r7, #8
 8100a74:	46bd      	mov	sp, r7
 8100a76:	bd80      	pop	{r7, pc}

08100a78 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100a78:	b480      	push	{r7}
 8100a7a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100a7c:	4b07      	ldr	r3, [pc, #28]	@ (8100a9c <HAL_GetCurrentCPUID+0x24>)
 8100a7e:	681b      	ldr	r3, [r3, #0]
 8100a80:	091b      	lsrs	r3, r3, #4
 8100a82:	f003 030f 	and.w	r3, r3, #15
 8100a86:	2b07      	cmp	r3, #7
 8100a88:	d101      	bne.n	8100a8e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100a8a:	2303      	movs	r3, #3
 8100a8c:	e000      	b.n	8100a90 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100a8e:	2301      	movs	r3, #1
  }
}
 8100a90:	4618      	mov	r0, r3
 8100a92:	46bd      	mov	sp, r7
 8100a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a98:	4770      	bx	lr
 8100a9a:	bf00      	nop
 8100a9c:	e000ed00 	.word	0xe000ed00

08100aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8100aa0:	b480      	push	{r7}
 8100aa2:	b089      	sub	sp, #36	@ 0x24
 8100aa4:	af00      	add	r7, sp, #0
 8100aa6:	6078      	str	r0, [r7, #4]
 8100aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100aaa:	2300      	movs	r3, #0
 8100aac:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100aae:	4b89      	ldr	r3, [pc, #548]	@ (8100cd4 <HAL_GPIO_Init+0x234>)
 8100ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100ab2:	e194      	b.n	8100dde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100ab4:	683b      	ldr	r3, [r7, #0]
 8100ab6:	681a      	ldr	r2, [r3, #0]
 8100ab8:	2101      	movs	r1, #1
 8100aba:	69fb      	ldr	r3, [r7, #28]
 8100abc:	fa01 f303 	lsl.w	r3, r1, r3
 8100ac0:	4013      	ands	r3, r2
 8100ac2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100ac4:	693b      	ldr	r3, [r7, #16]
 8100ac6:	2b00      	cmp	r3, #0
 8100ac8:	f000 8186 	beq.w	8100dd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100acc:	683b      	ldr	r3, [r7, #0]
 8100ace:	685b      	ldr	r3, [r3, #4]
 8100ad0:	f003 0303 	and.w	r3, r3, #3
 8100ad4:	2b01      	cmp	r3, #1
 8100ad6:	d005      	beq.n	8100ae4 <HAL_GPIO_Init+0x44>
 8100ad8:	683b      	ldr	r3, [r7, #0]
 8100ada:	685b      	ldr	r3, [r3, #4]
 8100adc:	f003 0303 	and.w	r3, r3, #3
 8100ae0:	2b02      	cmp	r3, #2
 8100ae2:	d130      	bne.n	8100b46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100ae4:	687b      	ldr	r3, [r7, #4]
 8100ae6:	689b      	ldr	r3, [r3, #8]
 8100ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100aea:	69fb      	ldr	r3, [r7, #28]
 8100aec:	005b      	lsls	r3, r3, #1
 8100aee:	2203      	movs	r2, #3
 8100af0:	fa02 f303 	lsl.w	r3, r2, r3
 8100af4:	43db      	mvns	r3, r3
 8100af6:	69ba      	ldr	r2, [r7, #24]
 8100af8:	4013      	ands	r3, r2
 8100afa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100afc:	683b      	ldr	r3, [r7, #0]
 8100afe:	68da      	ldr	r2, [r3, #12]
 8100b00:	69fb      	ldr	r3, [r7, #28]
 8100b02:	005b      	lsls	r3, r3, #1
 8100b04:	fa02 f303 	lsl.w	r3, r2, r3
 8100b08:	69ba      	ldr	r2, [r7, #24]
 8100b0a:	4313      	orrs	r3, r2
 8100b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100b0e:	687b      	ldr	r3, [r7, #4]
 8100b10:	69ba      	ldr	r2, [r7, #24]
 8100b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100b14:	687b      	ldr	r3, [r7, #4]
 8100b16:	685b      	ldr	r3, [r3, #4]
 8100b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100b1a:	2201      	movs	r2, #1
 8100b1c:	69fb      	ldr	r3, [r7, #28]
 8100b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8100b22:	43db      	mvns	r3, r3
 8100b24:	69ba      	ldr	r2, [r7, #24]
 8100b26:	4013      	ands	r3, r2
 8100b28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100b2a:	683b      	ldr	r3, [r7, #0]
 8100b2c:	685b      	ldr	r3, [r3, #4]
 8100b2e:	091b      	lsrs	r3, r3, #4
 8100b30:	f003 0201 	and.w	r2, r3, #1
 8100b34:	69fb      	ldr	r3, [r7, #28]
 8100b36:	fa02 f303 	lsl.w	r3, r2, r3
 8100b3a:	69ba      	ldr	r2, [r7, #24]
 8100b3c:	4313      	orrs	r3, r2
 8100b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100b40:	687b      	ldr	r3, [r7, #4]
 8100b42:	69ba      	ldr	r2, [r7, #24]
 8100b44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100b46:	683b      	ldr	r3, [r7, #0]
 8100b48:	685b      	ldr	r3, [r3, #4]
 8100b4a:	f003 0303 	and.w	r3, r3, #3
 8100b4e:	2b03      	cmp	r3, #3
 8100b50:	d017      	beq.n	8100b82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100b52:	687b      	ldr	r3, [r7, #4]
 8100b54:	68db      	ldr	r3, [r3, #12]
 8100b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100b58:	69fb      	ldr	r3, [r7, #28]
 8100b5a:	005b      	lsls	r3, r3, #1
 8100b5c:	2203      	movs	r2, #3
 8100b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8100b62:	43db      	mvns	r3, r3
 8100b64:	69ba      	ldr	r2, [r7, #24]
 8100b66:	4013      	ands	r3, r2
 8100b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100b6a:	683b      	ldr	r3, [r7, #0]
 8100b6c:	689a      	ldr	r2, [r3, #8]
 8100b6e:	69fb      	ldr	r3, [r7, #28]
 8100b70:	005b      	lsls	r3, r3, #1
 8100b72:	fa02 f303 	lsl.w	r3, r2, r3
 8100b76:	69ba      	ldr	r2, [r7, #24]
 8100b78:	4313      	orrs	r3, r2
 8100b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100b7c:	687b      	ldr	r3, [r7, #4]
 8100b7e:	69ba      	ldr	r2, [r7, #24]
 8100b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100b82:	683b      	ldr	r3, [r7, #0]
 8100b84:	685b      	ldr	r3, [r3, #4]
 8100b86:	f003 0303 	and.w	r3, r3, #3
 8100b8a:	2b02      	cmp	r3, #2
 8100b8c:	d123      	bne.n	8100bd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100b8e:	69fb      	ldr	r3, [r7, #28]
 8100b90:	08da      	lsrs	r2, r3, #3
 8100b92:	687b      	ldr	r3, [r7, #4]
 8100b94:	3208      	adds	r2, #8
 8100b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100b9c:	69fb      	ldr	r3, [r7, #28]
 8100b9e:	f003 0307 	and.w	r3, r3, #7
 8100ba2:	009b      	lsls	r3, r3, #2
 8100ba4:	220f      	movs	r2, #15
 8100ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8100baa:	43db      	mvns	r3, r3
 8100bac:	69ba      	ldr	r2, [r7, #24]
 8100bae:	4013      	ands	r3, r2
 8100bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100bb2:	683b      	ldr	r3, [r7, #0]
 8100bb4:	691a      	ldr	r2, [r3, #16]
 8100bb6:	69fb      	ldr	r3, [r7, #28]
 8100bb8:	f003 0307 	and.w	r3, r3, #7
 8100bbc:	009b      	lsls	r3, r3, #2
 8100bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8100bc2:	69ba      	ldr	r2, [r7, #24]
 8100bc4:	4313      	orrs	r3, r2
 8100bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100bc8:	69fb      	ldr	r3, [r7, #28]
 8100bca:	08da      	lsrs	r2, r3, #3
 8100bcc:	687b      	ldr	r3, [r7, #4]
 8100bce:	3208      	adds	r2, #8
 8100bd0:	69b9      	ldr	r1, [r7, #24]
 8100bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100bd6:	687b      	ldr	r3, [r7, #4]
 8100bd8:	681b      	ldr	r3, [r3, #0]
 8100bda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100bdc:	69fb      	ldr	r3, [r7, #28]
 8100bde:	005b      	lsls	r3, r3, #1
 8100be0:	2203      	movs	r2, #3
 8100be2:	fa02 f303 	lsl.w	r3, r2, r3
 8100be6:	43db      	mvns	r3, r3
 8100be8:	69ba      	ldr	r2, [r7, #24]
 8100bea:	4013      	ands	r3, r2
 8100bec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100bee:	683b      	ldr	r3, [r7, #0]
 8100bf0:	685b      	ldr	r3, [r3, #4]
 8100bf2:	f003 0203 	and.w	r2, r3, #3
 8100bf6:	69fb      	ldr	r3, [r7, #28]
 8100bf8:	005b      	lsls	r3, r3, #1
 8100bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8100bfe:	69ba      	ldr	r2, [r7, #24]
 8100c00:	4313      	orrs	r3, r2
 8100c02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100c04:	687b      	ldr	r3, [r7, #4]
 8100c06:	69ba      	ldr	r2, [r7, #24]
 8100c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100c0a:	683b      	ldr	r3, [r7, #0]
 8100c0c:	685b      	ldr	r3, [r3, #4]
 8100c0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100c12:	2b00      	cmp	r3, #0
 8100c14:	f000 80e0 	beq.w	8100dd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100c18:	4b2f      	ldr	r3, [pc, #188]	@ (8100cd8 <HAL_GPIO_Init+0x238>)
 8100c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8100cd8 <HAL_GPIO_Init+0x238>)
 8100c20:	f043 0302 	orr.w	r3, r3, #2
 8100c24:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100c28:	4b2b      	ldr	r3, [pc, #172]	@ (8100cd8 <HAL_GPIO_Init+0x238>)
 8100c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100c2e:	f003 0302 	and.w	r3, r3, #2
 8100c32:	60fb      	str	r3, [r7, #12]
 8100c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100c36:	4a29      	ldr	r2, [pc, #164]	@ (8100cdc <HAL_GPIO_Init+0x23c>)
 8100c38:	69fb      	ldr	r3, [r7, #28]
 8100c3a:	089b      	lsrs	r3, r3, #2
 8100c3c:	3302      	adds	r3, #2
 8100c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100c44:	69fb      	ldr	r3, [r7, #28]
 8100c46:	f003 0303 	and.w	r3, r3, #3
 8100c4a:	009b      	lsls	r3, r3, #2
 8100c4c:	220f      	movs	r2, #15
 8100c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c52:	43db      	mvns	r3, r3
 8100c54:	69ba      	ldr	r2, [r7, #24]
 8100c56:	4013      	ands	r3, r2
 8100c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100c5a:	687b      	ldr	r3, [r7, #4]
 8100c5c:	4a20      	ldr	r2, [pc, #128]	@ (8100ce0 <HAL_GPIO_Init+0x240>)
 8100c5e:	4293      	cmp	r3, r2
 8100c60:	d052      	beq.n	8100d08 <HAL_GPIO_Init+0x268>
 8100c62:	687b      	ldr	r3, [r7, #4]
 8100c64:	4a1f      	ldr	r2, [pc, #124]	@ (8100ce4 <HAL_GPIO_Init+0x244>)
 8100c66:	4293      	cmp	r3, r2
 8100c68:	d031      	beq.n	8100cce <HAL_GPIO_Init+0x22e>
 8100c6a:	687b      	ldr	r3, [r7, #4]
 8100c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8100ce8 <HAL_GPIO_Init+0x248>)
 8100c6e:	4293      	cmp	r3, r2
 8100c70:	d02b      	beq.n	8100cca <HAL_GPIO_Init+0x22a>
 8100c72:	687b      	ldr	r3, [r7, #4]
 8100c74:	4a1d      	ldr	r2, [pc, #116]	@ (8100cec <HAL_GPIO_Init+0x24c>)
 8100c76:	4293      	cmp	r3, r2
 8100c78:	d025      	beq.n	8100cc6 <HAL_GPIO_Init+0x226>
 8100c7a:	687b      	ldr	r3, [r7, #4]
 8100c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8100cf0 <HAL_GPIO_Init+0x250>)
 8100c7e:	4293      	cmp	r3, r2
 8100c80:	d01f      	beq.n	8100cc2 <HAL_GPIO_Init+0x222>
 8100c82:	687b      	ldr	r3, [r7, #4]
 8100c84:	4a1b      	ldr	r2, [pc, #108]	@ (8100cf4 <HAL_GPIO_Init+0x254>)
 8100c86:	4293      	cmp	r3, r2
 8100c88:	d019      	beq.n	8100cbe <HAL_GPIO_Init+0x21e>
 8100c8a:	687b      	ldr	r3, [r7, #4]
 8100c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8100cf8 <HAL_GPIO_Init+0x258>)
 8100c8e:	4293      	cmp	r3, r2
 8100c90:	d013      	beq.n	8100cba <HAL_GPIO_Init+0x21a>
 8100c92:	687b      	ldr	r3, [r7, #4]
 8100c94:	4a19      	ldr	r2, [pc, #100]	@ (8100cfc <HAL_GPIO_Init+0x25c>)
 8100c96:	4293      	cmp	r3, r2
 8100c98:	d00d      	beq.n	8100cb6 <HAL_GPIO_Init+0x216>
 8100c9a:	687b      	ldr	r3, [r7, #4]
 8100c9c:	4a18      	ldr	r2, [pc, #96]	@ (8100d00 <HAL_GPIO_Init+0x260>)
 8100c9e:	4293      	cmp	r3, r2
 8100ca0:	d007      	beq.n	8100cb2 <HAL_GPIO_Init+0x212>
 8100ca2:	687b      	ldr	r3, [r7, #4]
 8100ca4:	4a17      	ldr	r2, [pc, #92]	@ (8100d04 <HAL_GPIO_Init+0x264>)
 8100ca6:	4293      	cmp	r3, r2
 8100ca8:	d101      	bne.n	8100cae <HAL_GPIO_Init+0x20e>
 8100caa:	2309      	movs	r3, #9
 8100cac:	e02d      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cae:	230a      	movs	r3, #10
 8100cb0:	e02b      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cb2:	2308      	movs	r3, #8
 8100cb4:	e029      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cb6:	2307      	movs	r3, #7
 8100cb8:	e027      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cba:	2306      	movs	r3, #6
 8100cbc:	e025      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cbe:	2305      	movs	r3, #5
 8100cc0:	e023      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cc2:	2304      	movs	r3, #4
 8100cc4:	e021      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cc6:	2303      	movs	r3, #3
 8100cc8:	e01f      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cca:	2302      	movs	r3, #2
 8100ccc:	e01d      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cce:	2301      	movs	r3, #1
 8100cd0:	e01b      	b.n	8100d0a <HAL_GPIO_Init+0x26a>
 8100cd2:	bf00      	nop
 8100cd4:	580000c0 	.word	0x580000c0
 8100cd8:	58024400 	.word	0x58024400
 8100cdc:	58000400 	.word	0x58000400
 8100ce0:	58020000 	.word	0x58020000
 8100ce4:	58020400 	.word	0x58020400
 8100ce8:	58020800 	.word	0x58020800
 8100cec:	58020c00 	.word	0x58020c00
 8100cf0:	58021000 	.word	0x58021000
 8100cf4:	58021400 	.word	0x58021400
 8100cf8:	58021800 	.word	0x58021800
 8100cfc:	58021c00 	.word	0x58021c00
 8100d00:	58022000 	.word	0x58022000
 8100d04:	58022400 	.word	0x58022400
 8100d08:	2300      	movs	r3, #0
 8100d0a:	69fa      	ldr	r2, [r7, #28]
 8100d0c:	f002 0203 	and.w	r2, r2, #3
 8100d10:	0092      	lsls	r2, r2, #2
 8100d12:	4093      	lsls	r3, r2
 8100d14:	69ba      	ldr	r2, [r7, #24]
 8100d16:	4313      	orrs	r3, r2
 8100d18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100d1a:	4938      	ldr	r1, [pc, #224]	@ (8100dfc <HAL_GPIO_Init+0x35c>)
 8100d1c:	69fb      	ldr	r3, [r7, #28]
 8100d1e:	089b      	lsrs	r3, r3, #2
 8100d20:	3302      	adds	r3, #2
 8100d22:	69ba      	ldr	r2, [r7, #24]
 8100d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100d2c:	681b      	ldr	r3, [r3, #0]
 8100d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100d30:	693b      	ldr	r3, [r7, #16]
 8100d32:	43db      	mvns	r3, r3
 8100d34:	69ba      	ldr	r2, [r7, #24]
 8100d36:	4013      	ands	r3, r2
 8100d38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100d3a:	683b      	ldr	r3, [r7, #0]
 8100d3c:	685b      	ldr	r3, [r3, #4]
 8100d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100d42:	2b00      	cmp	r3, #0
 8100d44:	d003      	beq.n	8100d4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100d46:	69ba      	ldr	r2, [r7, #24]
 8100d48:	693b      	ldr	r3, [r7, #16]
 8100d4a:	4313      	orrs	r3, r2
 8100d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100d4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100d52:	69bb      	ldr	r3, [r7, #24]
 8100d54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100d5a:	685b      	ldr	r3, [r3, #4]
 8100d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100d5e:	693b      	ldr	r3, [r7, #16]
 8100d60:	43db      	mvns	r3, r3
 8100d62:	69ba      	ldr	r2, [r7, #24]
 8100d64:	4013      	ands	r3, r2
 8100d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100d68:	683b      	ldr	r3, [r7, #0]
 8100d6a:	685b      	ldr	r3, [r3, #4]
 8100d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100d70:	2b00      	cmp	r3, #0
 8100d72:	d003      	beq.n	8100d7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100d74:	69ba      	ldr	r2, [r7, #24]
 8100d76:	693b      	ldr	r3, [r7, #16]
 8100d78:	4313      	orrs	r3, r2
 8100d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100d7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100d80:	69bb      	ldr	r3, [r7, #24]
 8100d82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100d84:	697b      	ldr	r3, [r7, #20]
 8100d86:	685b      	ldr	r3, [r3, #4]
 8100d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100d8a:	693b      	ldr	r3, [r7, #16]
 8100d8c:	43db      	mvns	r3, r3
 8100d8e:	69ba      	ldr	r2, [r7, #24]
 8100d90:	4013      	ands	r3, r2
 8100d92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100d94:	683b      	ldr	r3, [r7, #0]
 8100d96:	685b      	ldr	r3, [r3, #4]
 8100d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8100d9c:	2b00      	cmp	r3, #0
 8100d9e:	d003      	beq.n	8100da8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100da0:	69ba      	ldr	r2, [r7, #24]
 8100da2:	693b      	ldr	r3, [r7, #16]
 8100da4:	4313      	orrs	r3, r2
 8100da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100da8:	697b      	ldr	r3, [r7, #20]
 8100daa:	69ba      	ldr	r2, [r7, #24]
 8100dac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100dae:	697b      	ldr	r3, [r7, #20]
 8100db0:	681b      	ldr	r3, [r3, #0]
 8100db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100db4:	693b      	ldr	r3, [r7, #16]
 8100db6:	43db      	mvns	r3, r3
 8100db8:	69ba      	ldr	r2, [r7, #24]
 8100dba:	4013      	ands	r3, r2
 8100dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100dbe:	683b      	ldr	r3, [r7, #0]
 8100dc0:	685b      	ldr	r3, [r3, #4]
 8100dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100dc6:	2b00      	cmp	r3, #0
 8100dc8:	d003      	beq.n	8100dd2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100dca:	69ba      	ldr	r2, [r7, #24]
 8100dcc:	693b      	ldr	r3, [r7, #16]
 8100dce:	4313      	orrs	r3, r2
 8100dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100dd2:	697b      	ldr	r3, [r7, #20]
 8100dd4:	69ba      	ldr	r2, [r7, #24]
 8100dd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100dd8:	69fb      	ldr	r3, [r7, #28]
 8100dda:	3301      	adds	r3, #1
 8100ddc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100dde:	683b      	ldr	r3, [r7, #0]
 8100de0:	681a      	ldr	r2, [r3, #0]
 8100de2:	69fb      	ldr	r3, [r7, #28]
 8100de4:	fa22 f303 	lsr.w	r3, r2, r3
 8100de8:	2b00      	cmp	r3, #0
 8100dea:	f47f ae63 	bne.w	8100ab4 <HAL_GPIO_Init+0x14>
  }
}
 8100dee:	bf00      	nop
 8100df0:	bf00      	nop
 8100df2:	3724      	adds	r7, #36	@ 0x24
 8100df4:	46bd      	mov	sp, r7
 8100df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dfa:	4770      	bx	lr
 8100dfc:	58000400 	.word	0x58000400

08100e00 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100e00:	b480      	push	{r7}
 8100e02:	b083      	sub	sp, #12
 8100e04:	af00      	add	r7, sp, #0
 8100e06:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100e08:	4b05      	ldr	r3, [pc, #20]	@ (8100e20 <HAL_HSEM_ActivateNotification+0x20>)
 8100e0a:	681a      	ldr	r2, [r3, #0]
 8100e0c:	4904      	ldr	r1, [pc, #16]	@ (8100e20 <HAL_HSEM_ActivateNotification+0x20>)
 8100e0e:	687b      	ldr	r3, [r7, #4]
 8100e10:	4313      	orrs	r3, r2
 8100e12:	600b      	str	r3, [r1, #0]
#endif
}
 8100e14:	bf00      	nop
 8100e16:	370c      	adds	r7, #12
 8100e18:	46bd      	mov	sp, r7
 8100e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e1e:	4770      	bx	lr
 8100e20:	58026510 	.word	0x58026510

08100e24 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100e24:	b580      	push	{r7, lr}
 8100e26:	b084      	sub	sp, #16
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	60f8      	str	r0, [r7, #12]
 8100e2c:	460b      	mov	r3, r1
 8100e2e:	607a      	str	r2, [r7, #4]
 8100e30:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100e32:	4b37      	ldr	r3, [pc, #220]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	f023 0201 	bic.w	r2, r3, #1
 8100e3a:	4935      	ldr	r1, [pc, #212]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e3c:	68fb      	ldr	r3, [r7, #12]
 8100e3e:	4313      	orrs	r3, r2
 8100e40:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100e42:	687b      	ldr	r3, [r7, #4]
 8100e44:	2b00      	cmp	r3, #0
 8100e46:	d123      	bne.n	8100e90 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100e48:	f7ff fe16 	bl	8100a78 <HAL_GetCurrentCPUID>
 8100e4c:	4603      	mov	r3, r0
 8100e4e:	2b03      	cmp	r3, #3
 8100e50:	d158      	bne.n	8100f04 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100e52:	4b2f      	ldr	r3, [pc, #188]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e54:	691b      	ldr	r3, [r3, #16]
 8100e56:	4a2e      	ldr	r2, [pc, #184]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e58:	f023 0301 	bic.w	r3, r3, #1
 8100e5c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8100f14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e60:	691b      	ldr	r3, [r3, #16]
 8100e62:	4a2c      	ldr	r2, [pc, #176]	@ (8100f14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e64:	f043 0304 	orr.w	r3, r3, #4
 8100e68:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100e6a:	f3bf 8f4f 	dsb	sy
}
 8100e6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100e70:	f3bf 8f6f 	isb	sy
}
 8100e74:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100e76:	7afb      	ldrb	r3, [r7, #11]
 8100e78:	2b01      	cmp	r3, #1
 8100e7a:	d101      	bne.n	8100e80 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100e7c:	bf30      	wfi
 8100e7e:	e000      	b.n	8100e82 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100e80:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e82:	4b24      	ldr	r3, [pc, #144]	@ (8100f14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e84:	691b      	ldr	r3, [r3, #16]
 8100e86:	4a23      	ldr	r2, [pc, #140]	@ (8100f14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e88:	f023 0304 	bic.w	r3, r3, #4
 8100e8c:	6113      	str	r3, [r2, #16]
 8100e8e:	e03c      	b.n	8100f0a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100e90:	687b      	ldr	r3, [r7, #4]
 8100e92:	2b01      	cmp	r3, #1
 8100e94:	d123      	bne.n	8100ede <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100e96:	f7ff fdef 	bl	8100a78 <HAL_GetCurrentCPUID>
 8100e9a:	4603      	mov	r3, r0
 8100e9c:	2b01      	cmp	r3, #1
 8100e9e:	d133      	bne.n	8100f08 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ea2:	695b      	ldr	r3, [r3, #20]
 8100ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ea6:	f023 0302 	bic.w	r3, r3, #2
 8100eaa:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100eac:	4b19      	ldr	r3, [pc, #100]	@ (8100f14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100eae:	691b      	ldr	r3, [r3, #16]
 8100eb0:	4a18      	ldr	r2, [pc, #96]	@ (8100f14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100eb2:	f043 0304 	orr.w	r3, r3, #4
 8100eb6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100eb8:	f3bf 8f4f 	dsb	sy
}
 8100ebc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100ebe:	f3bf 8f6f 	isb	sy
}
 8100ec2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100ec4:	7afb      	ldrb	r3, [r7, #11]
 8100ec6:	2b01      	cmp	r3, #1
 8100ec8:	d101      	bne.n	8100ece <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100eca:	bf30      	wfi
 8100ecc:	e000      	b.n	8100ed0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100ece:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100ed0:	4b10      	ldr	r3, [pc, #64]	@ (8100f14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ed2:	691b      	ldr	r3, [r3, #16]
 8100ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8100f14 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ed6:	f023 0304 	bic.w	r3, r3, #4
 8100eda:	6113      	str	r3, [r2, #16]
 8100edc:	e015      	b.n	8100f0a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100ede:	f7ff fdcb 	bl	8100a78 <HAL_GetCurrentCPUID>
 8100ee2:	4603      	mov	r3, r0
 8100ee4:	2b03      	cmp	r3, #3
 8100ee6:	d106      	bne.n	8100ef6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100ee8:	4b09      	ldr	r3, [pc, #36]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100eea:	691b      	ldr	r3, [r3, #16]
 8100eec:	4a08      	ldr	r2, [pc, #32]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100eee:	f023 0304 	bic.w	r3, r3, #4
 8100ef2:	6113      	str	r3, [r2, #16]
 8100ef4:	e009      	b.n	8100f0a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100ef6:	4b06      	ldr	r3, [pc, #24]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ef8:	695b      	ldr	r3, [r3, #20]
 8100efa:	4a05      	ldr	r2, [pc, #20]	@ (8100f10 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100efc:	f023 0304 	bic.w	r3, r3, #4
 8100f00:	6153      	str	r3, [r2, #20]
 8100f02:	e002      	b.n	8100f0a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100f04:	bf00      	nop
 8100f06:	e000      	b.n	8100f0a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100f08:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100f0a:	3710      	adds	r7, #16
 8100f0c:	46bd      	mov	sp, r7
 8100f0e:	bd80      	pop	{r7, pc}
 8100f10:	58024800 	.word	0x58024800
 8100f14:	e000ed00 	.word	0xe000ed00

08100f18 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100f18:	b580      	push	{r7, lr}
 8100f1a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100f1c:	f7ff fdac 	bl	8100a78 <HAL_GetCurrentCPUID>
 8100f20:	4603      	mov	r3, r0
 8100f22:	2b03      	cmp	r3, #3
 8100f24:	d101      	bne.n	8100f2a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100f26:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100f28:	e001      	b.n	8100f2e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100f2a:	bf40      	sev
    __WFE ();
 8100f2c:	bf20      	wfe
}
 8100f2e:	bf00      	nop
 8100f30:	bd80      	pop	{r7, pc}
	...

08100f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100f34:	b480      	push	{r7}
 8100f36:	b089      	sub	sp, #36	@ 0x24
 8100f38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100f3a:	4bb3      	ldr	r3, [pc, #716]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f3c:	691b      	ldr	r3, [r3, #16]
 8100f3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8100f42:	2b18      	cmp	r3, #24
 8100f44:	f200 8155 	bhi.w	81011f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8100f48:	a201      	add	r2, pc, #4	@ (adr r2, 8100f50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100f4e:	bf00      	nop
 8100f50:	08100fb5 	.word	0x08100fb5
 8100f54:	081011f3 	.word	0x081011f3
 8100f58:	081011f3 	.word	0x081011f3
 8100f5c:	081011f3 	.word	0x081011f3
 8100f60:	081011f3 	.word	0x081011f3
 8100f64:	081011f3 	.word	0x081011f3
 8100f68:	081011f3 	.word	0x081011f3
 8100f6c:	081011f3 	.word	0x081011f3
 8100f70:	08100fdb 	.word	0x08100fdb
 8100f74:	081011f3 	.word	0x081011f3
 8100f78:	081011f3 	.word	0x081011f3
 8100f7c:	081011f3 	.word	0x081011f3
 8100f80:	081011f3 	.word	0x081011f3
 8100f84:	081011f3 	.word	0x081011f3
 8100f88:	081011f3 	.word	0x081011f3
 8100f8c:	081011f3 	.word	0x081011f3
 8100f90:	08100fe1 	.word	0x08100fe1
 8100f94:	081011f3 	.word	0x081011f3
 8100f98:	081011f3 	.word	0x081011f3
 8100f9c:	081011f3 	.word	0x081011f3
 8100fa0:	081011f3 	.word	0x081011f3
 8100fa4:	081011f3 	.word	0x081011f3
 8100fa8:	081011f3 	.word	0x081011f3
 8100fac:	081011f3 	.word	0x081011f3
 8100fb0:	08100fe7 	.word	0x08100fe7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100fb4:	4b94      	ldr	r3, [pc, #592]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fb6:	681b      	ldr	r3, [r3, #0]
 8100fb8:	f003 0320 	and.w	r3, r3, #32
 8100fbc:	2b00      	cmp	r3, #0
 8100fbe:	d009      	beq.n	8100fd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100fc0:	4b91      	ldr	r3, [pc, #580]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fc2:	681b      	ldr	r3, [r3, #0]
 8100fc4:	08db      	lsrs	r3, r3, #3
 8100fc6:	f003 0303 	and.w	r3, r3, #3
 8100fca:	4a90      	ldr	r2, [pc, #576]	@ (810120c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8100fd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100fd2:	e111      	b.n	81011f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100fd4:	4b8d      	ldr	r3, [pc, #564]	@ (810120c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100fd6:	61bb      	str	r3, [r7, #24]
      break;
 8100fd8:	e10e      	b.n	81011f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100fda:	4b8d      	ldr	r3, [pc, #564]	@ (8101210 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100fdc:	61bb      	str	r3, [r7, #24]
      break;
 8100fde:	e10b      	b.n	81011f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100fe0:	4b8c      	ldr	r3, [pc, #560]	@ (8101214 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100fe2:	61bb      	str	r3, [r7, #24]
      break;
 8100fe4:	e108      	b.n	81011f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100fe6:	4b88      	ldr	r3, [pc, #544]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100fea:	f003 0303 	and.w	r3, r3, #3
 8100fee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100ff0:	4b85      	ldr	r3, [pc, #532]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100ff4:	091b      	lsrs	r3, r3, #4
 8100ff6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8100ffa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100ffc:	4b82      	ldr	r3, [pc, #520]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101000:	f003 0301 	and.w	r3, r3, #1
 8101004:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101006:	4b80      	ldr	r3, [pc, #512]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810100a:	08db      	lsrs	r3, r3, #3
 810100c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101010:	68fa      	ldr	r2, [r7, #12]
 8101012:	fb02 f303 	mul.w	r3, r2, r3
 8101016:	ee07 3a90 	vmov	s15, r3
 810101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810101e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101022:	693b      	ldr	r3, [r7, #16]
 8101024:	2b00      	cmp	r3, #0
 8101026:	f000 80e1 	beq.w	81011ec <HAL_RCC_GetSysClockFreq+0x2b8>
 810102a:	697b      	ldr	r3, [r7, #20]
 810102c:	2b02      	cmp	r3, #2
 810102e:	f000 8083 	beq.w	8101138 <HAL_RCC_GetSysClockFreq+0x204>
 8101032:	697b      	ldr	r3, [r7, #20]
 8101034:	2b02      	cmp	r3, #2
 8101036:	f200 80a1 	bhi.w	810117c <HAL_RCC_GetSysClockFreq+0x248>
 810103a:	697b      	ldr	r3, [r7, #20]
 810103c:	2b00      	cmp	r3, #0
 810103e:	d003      	beq.n	8101048 <HAL_RCC_GetSysClockFreq+0x114>
 8101040:	697b      	ldr	r3, [r7, #20]
 8101042:	2b01      	cmp	r3, #1
 8101044:	d056      	beq.n	81010f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101046:	e099      	b.n	810117c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101048:	4b6f      	ldr	r3, [pc, #444]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810104a:	681b      	ldr	r3, [r3, #0]
 810104c:	f003 0320 	and.w	r3, r3, #32
 8101050:	2b00      	cmp	r3, #0
 8101052:	d02d      	beq.n	81010b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101054:	4b6c      	ldr	r3, [pc, #432]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101056:	681b      	ldr	r3, [r3, #0]
 8101058:	08db      	lsrs	r3, r3, #3
 810105a:	f003 0303 	and.w	r3, r3, #3
 810105e:	4a6b      	ldr	r2, [pc, #428]	@ (810120c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101060:	fa22 f303 	lsr.w	r3, r2, r3
 8101064:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101066:	687b      	ldr	r3, [r7, #4]
 8101068:	ee07 3a90 	vmov	s15, r3
 810106c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101070:	693b      	ldr	r3, [r7, #16]
 8101072:	ee07 3a90 	vmov	s15, r3
 8101076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810107a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810107e:	4b62      	ldr	r3, [pc, #392]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101086:	ee07 3a90 	vmov	s15, r3
 810108a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810108e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101092:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101218 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810109a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810109e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81010a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81010a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81010aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81010ae:	e087      	b.n	81011c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81010b0:	693b      	ldr	r3, [r7, #16]
 81010b2:	ee07 3a90 	vmov	s15, r3
 81010b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810121c <HAL_RCC_GetSysClockFreq+0x2e8>
 81010be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81010c2:	4b51      	ldr	r3, [pc, #324]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81010c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81010ca:	ee07 3a90 	vmov	s15, r3
 81010ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010d2:	ed97 6a02 	vldr	s12, [r7, #8]
 81010d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101218 <HAL_RCC_GetSysClockFreq+0x2e4>
 81010da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81010de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81010e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81010e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81010ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81010f2:	e065      	b.n	81011c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81010f4:	693b      	ldr	r3, [r7, #16]
 81010f6:	ee07 3a90 	vmov	s15, r3
 81010fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101220 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101106:	4b40      	ldr	r3, [pc, #256]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810110a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810110e:	ee07 3a90 	vmov	s15, r3
 8101112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101116:	ed97 6a02 	vldr	s12, [r7, #8]
 810111a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101218 <HAL_RCC_GetSysClockFreq+0x2e4>
 810111e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810112a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101132:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101136:	e043      	b.n	81011c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101138:	693b      	ldr	r3, [r7, #16]
 810113a:	ee07 3a90 	vmov	s15, r3
 810113e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101142:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101224 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810114a:	4b2f      	ldr	r3, [pc, #188]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810114e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101152:	ee07 3a90 	vmov	s15, r3
 8101156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810115a:	ed97 6a02 	vldr	s12, [r7, #8]
 810115e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101218 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810116a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810116e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810117a:	e021      	b.n	81011c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810117c:	693b      	ldr	r3, [r7, #16]
 810117e:	ee07 3a90 	vmov	s15, r3
 8101182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101186:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101220 <HAL_RCC_GetSysClockFreq+0x2ec>
 810118a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810118e:	4b1e      	ldr	r3, [pc, #120]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101196:	ee07 3a90 	vmov	s15, r3
 810119a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810119e:	ed97 6a02 	vldr	s12, [r7, #8]
 81011a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101218 <HAL_RCC_GetSysClockFreq+0x2e4>
 81011a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81011aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81011ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81011b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81011be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81011c0:	4b11      	ldr	r3, [pc, #68]	@ (8101208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81011c4:	0a5b      	lsrs	r3, r3, #9
 81011c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81011ca:	3301      	adds	r3, #1
 81011cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81011ce:	683b      	ldr	r3, [r7, #0]
 81011d0:	ee07 3a90 	vmov	s15, r3
 81011d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81011d8:	edd7 6a07 	vldr	s13, [r7, #28]
 81011dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81011e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81011e4:	ee17 3a90 	vmov	r3, s15
 81011e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81011ea:	e005      	b.n	81011f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81011ec:	2300      	movs	r3, #0
 81011ee:	61bb      	str	r3, [r7, #24]
      break;
 81011f0:	e002      	b.n	81011f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81011f2:	4b07      	ldr	r3, [pc, #28]	@ (8101210 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81011f4:	61bb      	str	r3, [r7, #24]
      break;
 81011f6:	bf00      	nop
  }

  return sysclockfreq;
 81011f8:	69bb      	ldr	r3, [r7, #24]
}
 81011fa:	4618      	mov	r0, r3
 81011fc:	3724      	adds	r7, #36	@ 0x24
 81011fe:	46bd      	mov	sp, r7
 8101200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101204:	4770      	bx	lr
 8101206:	bf00      	nop
 8101208:	58024400 	.word	0x58024400
 810120c:	03d09000 	.word	0x03d09000
 8101210:	003d0900 	.word	0x003d0900
 8101214:	007a1200 	.word	0x007a1200
 8101218:	46000000 	.word	0x46000000
 810121c:	4c742400 	.word	0x4c742400
 8101220:	4a742400 	.word	0x4a742400
 8101224:	4af42400 	.word	0x4af42400

08101228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101228:	b580      	push	{r7, lr}
 810122a:	b082      	sub	sp, #8
 810122c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810122e:	f7ff fe81 	bl	8100f34 <HAL_RCC_GetSysClockFreq>
 8101232:	4602      	mov	r2, r0
 8101234:	4b11      	ldr	r3, [pc, #68]	@ (810127c <HAL_RCC_GetHCLKFreq+0x54>)
 8101236:	699b      	ldr	r3, [r3, #24]
 8101238:	0a1b      	lsrs	r3, r3, #8
 810123a:	f003 030f 	and.w	r3, r3, #15
 810123e:	4910      	ldr	r1, [pc, #64]	@ (8101280 <HAL_RCC_GetHCLKFreq+0x58>)
 8101240:	5ccb      	ldrb	r3, [r1, r3]
 8101242:	f003 031f 	and.w	r3, r3, #31
 8101246:	fa22 f303 	lsr.w	r3, r2, r3
 810124a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810124c:	4b0b      	ldr	r3, [pc, #44]	@ (810127c <HAL_RCC_GetHCLKFreq+0x54>)
 810124e:	699b      	ldr	r3, [r3, #24]
 8101250:	f003 030f 	and.w	r3, r3, #15
 8101254:	4a0a      	ldr	r2, [pc, #40]	@ (8101280 <HAL_RCC_GetHCLKFreq+0x58>)
 8101256:	5cd3      	ldrb	r3, [r2, r3]
 8101258:	f003 031f 	and.w	r3, r3, #31
 810125c:	687a      	ldr	r2, [r7, #4]
 810125e:	fa22 f303 	lsr.w	r3, r2, r3
 8101262:	4a08      	ldr	r2, [pc, #32]	@ (8101284 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101264:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101266:	4b07      	ldr	r3, [pc, #28]	@ (8101284 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101268:	681b      	ldr	r3, [r3, #0]
 810126a:	4a07      	ldr	r2, [pc, #28]	@ (8101288 <HAL_RCC_GetHCLKFreq+0x60>)
 810126c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810126e:	4b05      	ldr	r3, [pc, #20]	@ (8101284 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101270:	681b      	ldr	r3, [r3, #0]
}
 8101272:	4618      	mov	r0, r3
 8101274:	3708      	adds	r7, #8
 8101276:	46bd      	mov	sp, r7
 8101278:	bd80      	pop	{r7, pc}
 810127a:	bf00      	nop
 810127c:	58024400 	.word	0x58024400
 8101280:	081050a8 	.word	0x081050a8
 8101284:	10000004 	.word	0x10000004
 8101288:	10000000 	.word	0x10000000

0810128c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810128c:	b580      	push	{r7, lr}
 810128e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101290:	f7ff ffca 	bl	8101228 <HAL_RCC_GetHCLKFreq>
 8101294:	4602      	mov	r2, r0
 8101296:	4b06      	ldr	r3, [pc, #24]	@ (81012b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101298:	69db      	ldr	r3, [r3, #28]
 810129a:	091b      	lsrs	r3, r3, #4
 810129c:	f003 0307 	and.w	r3, r3, #7
 81012a0:	4904      	ldr	r1, [pc, #16]	@ (81012b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 81012a2:	5ccb      	ldrb	r3, [r1, r3]
 81012a4:	f003 031f 	and.w	r3, r3, #31
 81012a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81012ac:	4618      	mov	r0, r3
 81012ae:	bd80      	pop	{r7, pc}
 81012b0:	58024400 	.word	0x58024400
 81012b4:	081050a8 	.word	0x081050a8

081012b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81012b8:	b480      	push	{r7}
 81012ba:	b083      	sub	sp, #12
 81012bc:	af00      	add	r7, sp, #0
 81012be:	6078      	str	r0, [r7, #4]
 81012c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	223f      	movs	r2, #63	@ 0x3f
 81012c6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8101334 <HAL_RCC_GetClockConfig+0x7c>)
 81012ca:	691b      	ldr	r3, [r3, #16]
 81012cc:	f003 0207 	and.w	r2, r3, #7
 81012d0:	687b      	ldr	r3, [r7, #4]
 81012d2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 81012d4:	4b17      	ldr	r3, [pc, #92]	@ (8101334 <HAL_RCC_GetClockConfig+0x7c>)
 81012d6:	699b      	ldr	r3, [r3, #24]
 81012d8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 81012dc:	687b      	ldr	r3, [r7, #4]
 81012de:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81012e0:	4b14      	ldr	r3, [pc, #80]	@ (8101334 <HAL_RCC_GetClockConfig+0x7c>)
 81012e2:	699b      	ldr	r3, [r3, #24]
 81012e4:	f003 020f 	and.w	r2, r3, #15
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81012ec:	4b11      	ldr	r3, [pc, #68]	@ (8101334 <HAL_RCC_GetClockConfig+0x7c>)
 81012ee:	699b      	ldr	r3, [r3, #24]
 81012f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81012f8:	4b0e      	ldr	r3, [pc, #56]	@ (8101334 <HAL_RCC_GetClockConfig+0x7c>)
 81012fa:	69db      	ldr	r3, [r3, #28]
 81012fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8101300:	687b      	ldr	r3, [r7, #4]
 8101302:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101304:	4b0b      	ldr	r3, [pc, #44]	@ (8101334 <HAL_RCC_GetClockConfig+0x7c>)
 8101306:	69db      	ldr	r3, [r3, #28]
 8101308:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810130c:	687b      	ldr	r3, [r7, #4]
 810130e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8101310:	4b08      	ldr	r3, [pc, #32]	@ (8101334 <HAL_RCC_GetClockConfig+0x7c>)
 8101312:	6a1b      	ldr	r3, [r3, #32]
 8101314:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8101318:	687b      	ldr	r3, [r7, #4]
 810131a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810131c:	4b06      	ldr	r3, [pc, #24]	@ (8101338 <HAL_RCC_GetClockConfig+0x80>)
 810131e:	681b      	ldr	r3, [r3, #0]
 8101320:	f003 020f 	and.w	r2, r3, #15
 8101324:	683b      	ldr	r3, [r7, #0]
 8101326:	601a      	str	r2, [r3, #0]
}
 8101328:	bf00      	nop
 810132a:	370c      	adds	r7, #12
 810132c:	46bd      	mov	sp, r7
 810132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101332:	4770      	bx	lr
 8101334:	58024400 	.word	0x58024400
 8101338:	52002000 	.word	0x52002000

0810133c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810133c:	b580      	push	{r7, lr}
 810133e:	b082      	sub	sp, #8
 8101340:	af00      	add	r7, sp, #0
 8101342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101344:	687b      	ldr	r3, [r7, #4]
 8101346:	2b00      	cmp	r3, #0
 8101348:	d101      	bne.n	810134e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810134a:	2301      	movs	r3, #1
 810134c:	e049      	b.n	81013e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8101354:	b2db      	uxtb	r3, r3
 8101356:	2b00      	cmp	r3, #0
 8101358:	d106      	bne.n	8101368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810135a:	687b      	ldr	r3, [r7, #4]
 810135c:	2200      	movs	r2, #0
 810135e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8101362:	6878      	ldr	r0, [r7, #4]
 8101364:	f000 f841 	bl	81013ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101368:	687b      	ldr	r3, [r7, #4]
 810136a:	2202      	movs	r2, #2
 810136c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	681a      	ldr	r2, [r3, #0]
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	3304      	adds	r3, #4
 8101378:	4619      	mov	r1, r3
 810137a:	4610      	mov	r0, r2
 810137c:	f000 f9e8 	bl	8101750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101380:	687b      	ldr	r3, [r7, #4]
 8101382:	2201      	movs	r2, #1
 8101384:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101388:	687b      	ldr	r3, [r7, #4]
 810138a:	2201      	movs	r2, #1
 810138c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	2201      	movs	r2, #1
 8101394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8101398:	687b      	ldr	r3, [r7, #4]
 810139a:	2201      	movs	r2, #1
 810139c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81013a0:	687b      	ldr	r3, [r7, #4]
 81013a2:	2201      	movs	r2, #1
 81013a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81013a8:	687b      	ldr	r3, [r7, #4]
 81013aa:	2201      	movs	r2, #1
 81013ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81013b0:	687b      	ldr	r3, [r7, #4]
 81013b2:	2201      	movs	r2, #1
 81013b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81013b8:	687b      	ldr	r3, [r7, #4]
 81013ba:	2201      	movs	r2, #1
 81013bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81013c0:	687b      	ldr	r3, [r7, #4]
 81013c2:	2201      	movs	r2, #1
 81013c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	2201      	movs	r2, #1
 81013cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	2201      	movs	r2, #1
 81013d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81013d8:	687b      	ldr	r3, [r7, #4]
 81013da:	2201      	movs	r2, #1
 81013dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81013e0:	2300      	movs	r3, #0
}
 81013e2:	4618      	mov	r0, r3
 81013e4:	3708      	adds	r7, #8
 81013e6:	46bd      	mov	sp, r7
 81013e8:	bd80      	pop	{r7, pc}

081013ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81013ea:	b480      	push	{r7}
 81013ec:	b083      	sub	sp, #12
 81013ee:	af00      	add	r7, sp, #0
 81013f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81013f2:	bf00      	nop
 81013f4:	370c      	adds	r7, #12
 81013f6:	46bd      	mov	sp, r7
 81013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013fc:	4770      	bx	lr
	...

08101400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8101400:	b480      	push	{r7}
 8101402:	b085      	sub	sp, #20
 8101404:	af00      	add	r7, sp, #0
 8101406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8101408:	687b      	ldr	r3, [r7, #4]
 810140a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810140e:	b2db      	uxtb	r3, r3
 8101410:	2b01      	cmp	r3, #1
 8101412:	d001      	beq.n	8101418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8101414:	2301      	movs	r3, #1
 8101416:	e054      	b.n	81014c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	2202      	movs	r2, #2
 810141c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8101420:	687b      	ldr	r3, [r7, #4]
 8101422:	681b      	ldr	r3, [r3, #0]
 8101424:	68da      	ldr	r2, [r3, #12]
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	681b      	ldr	r3, [r3, #0]
 810142a:	f042 0201 	orr.w	r2, r2, #1
 810142e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8101430:	687b      	ldr	r3, [r7, #4]
 8101432:	681b      	ldr	r3, [r3, #0]
 8101434:	4a26      	ldr	r2, [pc, #152]	@ (81014d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8101436:	4293      	cmp	r3, r2
 8101438:	d022      	beq.n	8101480 <HAL_TIM_Base_Start_IT+0x80>
 810143a:	687b      	ldr	r3, [r7, #4]
 810143c:	681b      	ldr	r3, [r3, #0]
 810143e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101442:	d01d      	beq.n	8101480 <HAL_TIM_Base_Start_IT+0x80>
 8101444:	687b      	ldr	r3, [r7, #4]
 8101446:	681b      	ldr	r3, [r3, #0]
 8101448:	4a22      	ldr	r2, [pc, #136]	@ (81014d4 <HAL_TIM_Base_Start_IT+0xd4>)
 810144a:	4293      	cmp	r3, r2
 810144c:	d018      	beq.n	8101480 <HAL_TIM_Base_Start_IT+0x80>
 810144e:	687b      	ldr	r3, [r7, #4]
 8101450:	681b      	ldr	r3, [r3, #0]
 8101452:	4a21      	ldr	r2, [pc, #132]	@ (81014d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8101454:	4293      	cmp	r3, r2
 8101456:	d013      	beq.n	8101480 <HAL_TIM_Base_Start_IT+0x80>
 8101458:	687b      	ldr	r3, [r7, #4]
 810145a:	681b      	ldr	r3, [r3, #0]
 810145c:	4a1f      	ldr	r2, [pc, #124]	@ (81014dc <HAL_TIM_Base_Start_IT+0xdc>)
 810145e:	4293      	cmp	r3, r2
 8101460:	d00e      	beq.n	8101480 <HAL_TIM_Base_Start_IT+0x80>
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	681b      	ldr	r3, [r3, #0]
 8101466:	4a1e      	ldr	r2, [pc, #120]	@ (81014e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8101468:	4293      	cmp	r3, r2
 810146a:	d009      	beq.n	8101480 <HAL_TIM_Base_Start_IT+0x80>
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	681b      	ldr	r3, [r3, #0]
 8101470:	4a1c      	ldr	r2, [pc, #112]	@ (81014e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8101472:	4293      	cmp	r3, r2
 8101474:	d004      	beq.n	8101480 <HAL_TIM_Base_Start_IT+0x80>
 8101476:	687b      	ldr	r3, [r7, #4]
 8101478:	681b      	ldr	r3, [r3, #0]
 810147a:	4a1b      	ldr	r2, [pc, #108]	@ (81014e8 <HAL_TIM_Base_Start_IT+0xe8>)
 810147c:	4293      	cmp	r3, r2
 810147e:	d115      	bne.n	81014ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101480:	687b      	ldr	r3, [r7, #4]
 8101482:	681b      	ldr	r3, [r3, #0]
 8101484:	689a      	ldr	r2, [r3, #8]
 8101486:	4b19      	ldr	r3, [pc, #100]	@ (81014ec <HAL_TIM_Base_Start_IT+0xec>)
 8101488:	4013      	ands	r3, r2
 810148a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810148c:	68fb      	ldr	r3, [r7, #12]
 810148e:	2b06      	cmp	r3, #6
 8101490:	d015      	beq.n	81014be <HAL_TIM_Base_Start_IT+0xbe>
 8101492:	68fb      	ldr	r3, [r7, #12]
 8101494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101498:	d011      	beq.n	81014be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810149a:	687b      	ldr	r3, [r7, #4]
 810149c:	681b      	ldr	r3, [r3, #0]
 810149e:	681a      	ldr	r2, [r3, #0]
 81014a0:	687b      	ldr	r3, [r7, #4]
 81014a2:	681b      	ldr	r3, [r3, #0]
 81014a4:	f042 0201 	orr.w	r2, r2, #1
 81014a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81014aa:	e008      	b.n	81014be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81014ac:	687b      	ldr	r3, [r7, #4]
 81014ae:	681b      	ldr	r3, [r3, #0]
 81014b0:	681a      	ldr	r2, [r3, #0]
 81014b2:	687b      	ldr	r3, [r7, #4]
 81014b4:	681b      	ldr	r3, [r3, #0]
 81014b6:	f042 0201 	orr.w	r2, r2, #1
 81014ba:	601a      	str	r2, [r3, #0]
 81014bc:	e000      	b.n	81014c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81014be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81014c0:	2300      	movs	r3, #0
}
 81014c2:	4618      	mov	r0, r3
 81014c4:	3714      	adds	r7, #20
 81014c6:	46bd      	mov	sp, r7
 81014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014cc:	4770      	bx	lr
 81014ce:	bf00      	nop
 81014d0:	40010000 	.word	0x40010000
 81014d4:	40000400 	.word	0x40000400
 81014d8:	40000800 	.word	0x40000800
 81014dc:	40000c00 	.word	0x40000c00
 81014e0:	40010400 	.word	0x40010400
 81014e4:	40001800 	.word	0x40001800
 81014e8:	40014000 	.word	0x40014000
 81014ec:	00010007 	.word	0x00010007

081014f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81014f0:	b580      	push	{r7, lr}
 81014f2:	b084      	sub	sp, #16
 81014f4:	af00      	add	r7, sp, #0
 81014f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	681b      	ldr	r3, [r3, #0]
 81014fc:	68db      	ldr	r3, [r3, #12]
 81014fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8101500:	687b      	ldr	r3, [r7, #4]
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	691b      	ldr	r3, [r3, #16]
 8101506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8101508:	68bb      	ldr	r3, [r7, #8]
 810150a:	f003 0302 	and.w	r3, r3, #2
 810150e:	2b00      	cmp	r3, #0
 8101510:	d020      	beq.n	8101554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8101512:	68fb      	ldr	r3, [r7, #12]
 8101514:	f003 0302 	and.w	r3, r3, #2
 8101518:	2b00      	cmp	r3, #0
 810151a:	d01b      	beq.n	8101554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810151c:	687b      	ldr	r3, [r7, #4]
 810151e:	681b      	ldr	r3, [r3, #0]
 8101520:	f06f 0202 	mvn.w	r2, #2
 8101524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8101526:	687b      	ldr	r3, [r7, #4]
 8101528:	2201      	movs	r2, #1
 810152a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810152c:	687b      	ldr	r3, [r7, #4]
 810152e:	681b      	ldr	r3, [r3, #0]
 8101530:	699b      	ldr	r3, [r3, #24]
 8101532:	f003 0303 	and.w	r3, r3, #3
 8101536:	2b00      	cmp	r3, #0
 8101538:	d003      	beq.n	8101542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810153a:	6878      	ldr	r0, [r7, #4]
 810153c:	f000 f8e9 	bl	8101712 <HAL_TIM_IC_CaptureCallback>
 8101540:	e005      	b.n	810154e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8101542:	6878      	ldr	r0, [r7, #4]
 8101544:	f000 f8db 	bl	81016fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101548:	6878      	ldr	r0, [r7, #4]
 810154a:	f000 f8ec 	bl	8101726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810154e:	687b      	ldr	r3, [r7, #4]
 8101550:	2200      	movs	r2, #0
 8101552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8101554:	68bb      	ldr	r3, [r7, #8]
 8101556:	f003 0304 	and.w	r3, r3, #4
 810155a:	2b00      	cmp	r3, #0
 810155c:	d020      	beq.n	81015a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810155e:	68fb      	ldr	r3, [r7, #12]
 8101560:	f003 0304 	and.w	r3, r3, #4
 8101564:	2b00      	cmp	r3, #0
 8101566:	d01b      	beq.n	81015a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8101568:	687b      	ldr	r3, [r7, #4]
 810156a:	681b      	ldr	r3, [r3, #0]
 810156c:	f06f 0204 	mvn.w	r2, #4
 8101570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8101572:	687b      	ldr	r3, [r7, #4]
 8101574:	2202      	movs	r2, #2
 8101576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101578:	687b      	ldr	r3, [r7, #4]
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	699b      	ldr	r3, [r3, #24]
 810157e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101582:	2b00      	cmp	r3, #0
 8101584:	d003      	beq.n	810158e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101586:	6878      	ldr	r0, [r7, #4]
 8101588:	f000 f8c3 	bl	8101712 <HAL_TIM_IC_CaptureCallback>
 810158c:	e005      	b.n	810159a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810158e:	6878      	ldr	r0, [r7, #4]
 8101590:	f000 f8b5 	bl	81016fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101594:	6878      	ldr	r0, [r7, #4]
 8101596:	f000 f8c6 	bl	8101726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810159a:	687b      	ldr	r3, [r7, #4]
 810159c:	2200      	movs	r2, #0
 810159e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81015a0:	68bb      	ldr	r3, [r7, #8]
 81015a2:	f003 0308 	and.w	r3, r3, #8
 81015a6:	2b00      	cmp	r3, #0
 81015a8:	d020      	beq.n	81015ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81015aa:	68fb      	ldr	r3, [r7, #12]
 81015ac:	f003 0308 	and.w	r3, r3, #8
 81015b0:	2b00      	cmp	r3, #0
 81015b2:	d01b      	beq.n	81015ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81015b4:	687b      	ldr	r3, [r7, #4]
 81015b6:	681b      	ldr	r3, [r3, #0]
 81015b8:	f06f 0208 	mvn.w	r2, #8
 81015bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	2204      	movs	r2, #4
 81015c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81015c4:	687b      	ldr	r3, [r7, #4]
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	69db      	ldr	r3, [r3, #28]
 81015ca:	f003 0303 	and.w	r3, r3, #3
 81015ce:	2b00      	cmp	r3, #0
 81015d0:	d003      	beq.n	81015da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81015d2:	6878      	ldr	r0, [r7, #4]
 81015d4:	f000 f89d 	bl	8101712 <HAL_TIM_IC_CaptureCallback>
 81015d8:	e005      	b.n	81015e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81015da:	6878      	ldr	r0, [r7, #4]
 81015dc:	f000 f88f 	bl	81016fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81015e0:	6878      	ldr	r0, [r7, #4]
 81015e2:	f000 f8a0 	bl	8101726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81015e6:	687b      	ldr	r3, [r7, #4]
 81015e8:	2200      	movs	r2, #0
 81015ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81015ec:	68bb      	ldr	r3, [r7, #8]
 81015ee:	f003 0310 	and.w	r3, r3, #16
 81015f2:	2b00      	cmp	r3, #0
 81015f4:	d020      	beq.n	8101638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81015f6:	68fb      	ldr	r3, [r7, #12]
 81015f8:	f003 0310 	and.w	r3, r3, #16
 81015fc:	2b00      	cmp	r3, #0
 81015fe:	d01b      	beq.n	8101638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8101600:	687b      	ldr	r3, [r7, #4]
 8101602:	681b      	ldr	r3, [r3, #0]
 8101604:	f06f 0210 	mvn.w	r2, #16
 8101608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810160a:	687b      	ldr	r3, [r7, #4]
 810160c:	2208      	movs	r2, #8
 810160e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8101610:	687b      	ldr	r3, [r7, #4]
 8101612:	681b      	ldr	r3, [r3, #0]
 8101614:	69db      	ldr	r3, [r3, #28]
 8101616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810161a:	2b00      	cmp	r3, #0
 810161c:	d003      	beq.n	8101626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810161e:	6878      	ldr	r0, [r7, #4]
 8101620:	f000 f877 	bl	8101712 <HAL_TIM_IC_CaptureCallback>
 8101624:	e005      	b.n	8101632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101626:	6878      	ldr	r0, [r7, #4]
 8101628:	f000 f869 	bl	81016fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810162c:	6878      	ldr	r0, [r7, #4]
 810162e:	f000 f87a 	bl	8101726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101632:	687b      	ldr	r3, [r7, #4]
 8101634:	2200      	movs	r2, #0
 8101636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8101638:	68bb      	ldr	r3, [r7, #8]
 810163a:	f003 0301 	and.w	r3, r3, #1
 810163e:	2b00      	cmp	r3, #0
 8101640:	d00c      	beq.n	810165c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8101642:	68fb      	ldr	r3, [r7, #12]
 8101644:	f003 0301 	and.w	r3, r3, #1
 8101648:	2b00      	cmp	r3, #0
 810164a:	d007      	beq.n	810165c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810164c:	687b      	ldr	r3, [r7, #4]
 810164e:	681b      	ldr	r3, [r3, #0]
 8101650:	f06f 0201 	mvn.w	r2, #1
 8101654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8101656:	6878      	ldr	r0, [r7, #4]
 8101658:	f7fe ff8c 	bl	8100574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810165c:	68bb      	ldr	r3, [r7, #8]
 810165e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101662:	2b00      	cmp	r3, #0
 8101664:	d104      	bne.n	8101670 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8101666:	68bb      	ldr	r3, [r7, #8]
 8101668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810166c:	2b00      	cmp	r3, #0
 810166e:	d00c      	beq.n	810168a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8101670:	68fb      	ldr	r3, [r7, #12]
 8101672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101676:	2b00      	cmp	r3, #0
 8101678:	d007      	beq.n	810168a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810167a:	687b      	ldr	r3, [r7, #4]
 810167c:	681b      	ldr	r3, [r3, #0]
 810167e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8101682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8101684:	6878      	ldr	r0, [r7, #4]
 8101686:	f000 f90d 	bl	81018a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810168a:	68bb      	ldr	r3, [r7, #8]
 810168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101690:	2b00      	cmp	r3, #0
 8101692:	d00c      	beq.n	81016ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8101694:	68fb      	ldr	r3, [r7, #12]
 8101696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810169a:	2b00      	cmp	r3, #0
 810169c:	d007      	beq.n	81016ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810169e:	687b      	ldr	r3, [r7, #4]
 81016a0:	681b      	ldr	r3, [r3, #0]
 81016a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 81016a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81016a8:	6878      	ldr	r0, [r7, #4]
 81016aa:	f000 f905 	bl	81018b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 81016ae:	68bb      	ldr	r3, [r7, #8]
 81016b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81016b4:	2b00      	cmp	r3, #0
 81016b6:	d00c      	beq.n	81016d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 81016b8:	68fb      	ldr	r3, [r7, #12]
 81016ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81016be:	2b00      	cmp	r3, #0
 81016c0:	d007      	beq.n	81016d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	681b      	ldr	r3, [r3, #0]
 81016c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 81016ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81016cc:	6878      	ldr	r0, [r7, #4]
 81016ce:	f000 f834 	bl	810173a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 81016d2:	68bb      	ldr	r3, [r7, #8]
 81016d4:	f003 0320 	and.w	r3, r3, #32
 81016d8:	2b00      	cmp	r3, #0
 81016da:	d00c      	beq.n	81016f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 81016dc:	68fb      	ldr	r3, [r7, #12]
 81016de:	f003 0320 	and.w	r3, r3, #32
 81016e2:	2b00      	cmp	r3, #0
 81016e4:	d007      	beq.n	81016f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81016e6:	687b      	ldr	r3, [r7, #4]
 81016e8:	681b      	ldr	r3, [r3, #0]
 81016ea:	f06f 0220 	mvn.w	r2, #32
 81016ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81016f0:	6878      	ldr	r0, [r7, #4]
 81016f2:	f000 f8cd 	bl	8101890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81016f6:	bf00      	nop
 81016f8:	3710      	adds	r7, #16
 81016fa:	46bd      	mov	sp, r7
 81016fc:	bd80      	pop	{r7, pc}

081016fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81016fe:	b480      	push	{r7}
 8101700:	b083      	sub	sp, #12
 8101702:	af00      	add	r7, sp, #0
 8101704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8101706:	bf00      	nop
 8101708:	370c      	adds	r7, #12
 810170a:	46bd      	mov	sp, r7
 810170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101710:	4770      	bx	lr

08101712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8101712:	b480      	push	{r7}
 8101714:	b083      	sub	sp, #12
 8101716:	af00      	add	r7, sp, #0
 8101718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810171a:	bf00      	nop
 810171c:	370c      	adds	r7, #12
 810171e:	46bd      	mov	sp, r7
 8101720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101724:	4770      	bx	lr

08101726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8101726:	b480      	push	{r7}
 8101728:	b083      	sub	sp, #12
 810172a:	af00      	add	r7, sp, #0
 810172c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810172e:	bf00      	nop
 8101730:	370c      	adds	r7, #12
 8101732:	46bd      	mov	sp, r7
 8101734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101738:	4770      	bx	lr

0810173a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810173a:	b480      	push	{r7}
 810173c:	b083      	sub	sp, #12
 810173e:	af00      	add	r7, sp, #0
 8101740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8101742:	bf00      	nop
 8101744:	370c      	adds	r7, #12
 8101746:	46bd      	mov	sp, r7
 8101748:	f85d 7b04 	ldr.w	r7, [sp], #4
 810174c:	4770      	bx	lr
	...

08101750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8101750:	b480      	push	{r7}
 8101752:	b085      	sub	sp, #20
 8101754:	af00      	add	r7, sp, #0
 8101756:	6078      	str	r0, [r7, #4]
 8101758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810175a:	687b      	ldr	r3, [r7, #4]
 810175c:	681b      	ldr	r3, [r3, #0]
 810175e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	4a43      	ldr	r2, [pc, #268]	@ (8101870 <TIM_Base_SetConfig+0x120>)
 8101764:	4293      	cmp	r3, r2
 8101766:	d013      	beq.n	8101790 <TIM_Base_SetConfig+0x40>
 8101768:	687b      	ldr	r3, [r7, #4]
 810176a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810176e:	d00f      	beq.n	8101790 <TIM_Base_SetConfig+0x40>
 8101770:	687b      	ldr	r3, [r7, #4]
 8101772:	4a40      	ldr	r2, [pc, #256]	@ (8101874 <TIM_Base_SetConfig+0x124>)
 8101774:	4293      	cmp	r3, r2
 8101776:	d00b      	beq.n	8101790 <TIM_Base_SetConfig+0x40>
 8101778:	687b      	ldr	r3, [r7, #4]
 810177a:	4a3f      	ldr	r2, [pc, #252]	@ (8101878 <TIM_Base_SetConfig+0x128>)
 810177c:	4293      	cmp	r3, r2
 810177e:	d007      	beq.n	8101790 <TIM_Base_SetConfig+0x40>
 8101780:	687b      	ldr	r3, [r7, #4]
 8101782:	4a3e      	ldr	r2, [pc, #248]	@ (810187c <TIM_Base_SetConfig+0x12c>)
 8101784:	4293      	cmp	r3, r2
 8101786:	d003      	beq.n	8101790 <TIM_Base_SetConfig+0x40>
 8101788:	687b      	ldr	r3, [r7, #4]
 810178a:	4a3d      	ldr	r2, [pc, #244]	@ (8101880 <TIM_Base_SetConfig+0x130>)
 810178c:	4293      	cmp	r3, r2
 810178e:	d108      	bne.n	81017a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101790:	68fb      	ldr	r3, [r7, #12]
 8101792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8101796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101798:	683b      	ldr	r3, [r7, #0]
 810179a:	685b      	ldr	r3, [r3, #4]
 810179c:	68fa      	ldr	r2, [r7, #12]
 810179e:	4313      	orrs	r3, r2
 81017a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81017a2:	687b      	ldr	r3, [r7, #4]
 81017a4:	4a32      	ldr	r2, [pc, #200]	@ (8101870 <TIM_Base_SetConfig+0x120>)
 81017a6:	4293      	cmp	r3, r2
 81017a8:	d01f      	beq.n	81017ea <TIM_Base_SetConfig+0x9a>
 81017aa:	687b      	ldr	r3, [r7, #4]
 81017ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81017b0:	d01b      	beq.n	81017ea <TIM_Base_SetConfig+0x9a>
 81017b2:	687b      	ldr	r3, [r7, #4]
 81017b4:	4a2f      	ldr	r2, [pc, #188]	@ (8101874 <TIM_Base_SetConfig+0x124>)
 81017b6:	4293      	cmp	r3, r2
 81017b8:	d017      	beq.n	81017ea <TIM_Base_SetConfig+0x9a>
 81017ba:	687b      	ldr	r3, [r7, #4]
 81017bc:	4a2e      	ldr	r2, [pc, #184]	@ (8101878 <TIM_Base_SetConfig+0x128>)
 81017be:	4293      	cmp	r3, r2
 81017c0:	d013      	beq.n	81017ea <TIM_Base_SetConfig+0x9a>
 81017c2:	687b      	ldr	r3, [r7, #4]
 81017c4:	4a2d      	ldr	r2, [pc, #180]	@ (810187c <TIM_Base_SetConfig+0x12c>)
 81017c6:	4293      	cmp	r3, r2
 81017c8:	d00f      	beq.n	81017ea <TIM_Base_SetConfig+0x9a>
 81017ca:	687b      	ldr	r3, [r7, #4]
 81017cc:	4a2c      	ldr	r2, [pc, #176]	@ (8101880 <TIM_Base_SetConfig+0x130>)
 81017ce:	4293      	cmp	r3, r2
 81017d0:	d00b      	beq.n	81017ea <TIM_Base_SetConfig+0x9a>
 81017d2:	687b      	ldr	r3, [r7, #4]
 81017d4:	4a2b      	ldr	r2, [pc, #172]	@ (8101884 <TIM_Base_SetConfig+0x134>)
 81017d6:	4293      	cmp	r3, r2
 81017d8:	d007      	beq.n	81017ea <TIM_Base_SetConfig+0x9a>
 81017da:	687b      	ldr	r3, [r7, #4]
 81017dc:	4a2a      	ldr	r2, [pc, #168]	@ (8101888 <TIM_Base_SetConfig+0x138>)
 81017de:	4293      	cmp	r3, r2
 81017e0:	d003      	beq.n	81017ea <TIM_Base_SetConfig+0x9a>
 81017e2:	687b      	ldr	r3, [r7, #4]
 81017e4:	4a29      	ldr	r2, [pc, #164]	@ (810188c <TIM_Base_SetConfig+0x13c>)
 81017e6:	4293      	cmp	r3, r2
 81017e8:	d108      	bne.n	81017fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81017ea:	68fb      	ldr	r3, [r7, #12]
 81017ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81017f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81017f2:	683b      	ldr	r3, [r7, #0]
 81017f4:	68db      	ldr	r3, [r3, #12]
 81017f6:	68fa      	ldr	r2, [r7, #12]
 81017f8:	4313      	orrs	r3, r2
 81017fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81017fc:	68fb      	ldr	r3, [r7, #12]
 81017fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8101802:	683b      	ldr	r3, [r7, #0]
 8101804:	695b      	ldr	r3, [r3, #20]
 8101806:	4313      	orrs	r3, r2
 8101808:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810180a:	683b      	ldr	r3, [r7, #0]
 810180c:	689a      	ldr	r2, [r3, #8]
 810180e:	687b      	ldr	r3, [r7, #4]
 8101810:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8101812:	683b      	ldr	r3, [r7, #0]
 8101814:	681a      	ldr	r2, [r3, #0]
 8101816:	687b      	ldr	r3, [r7, #4]
 8101818:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810181a:	687b      	ldr	r3, [r7, #4]
 810181c:	4a14      	ldr	r2, [pc, #80]	@ (8101870 <TIM_Base_SetConfig+0x120>)
 810181e:	4293      	cmp	r3, r2
 8101820:	d00f      	beq.n	8101842 <TIM_Base_SetConfig+0xf2>
 8101822:	687b      	ldr	r3, [r7, #4]
 8101824:	4a16      	ldr	r2, [pc, #88]	@ (8101880 <TIM_Base_SetConfig+0x130>)
 8101826:	4293      	cmp	r3, r2
 8101828:	d00b      	beq.n	8101842 <TIM_Base_SetConfig+0xf2>
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	4a15      	ldr	r2, [pc, #84]	@ (8101884 <TIM_Base_SetConfig+0x134>)
 810182e:	4293      	cmp	r3, r2
 8101830:	d007      	beq.n	8101842 <TIM_Base_SetConfig+0xf2>
 8101832:	687b      	ldr	r3, [r7, #4]
 8101834:	4a14      	ldr	r2, [pc, #80]	@ (8101888 <TIM_Base_SetConfig+0x138>)
 8101836:	4293      	cmp	r3, r2
 8101838:	d003      	beq.n	8101842 <TIM_Base_SetConfig+0xf2>
 810183a:	687b      	ldr	r3, [r7, #4]
 810183c:	4a13      	ldr	r2, [pc, #76]	@ (810188c <TIM_Base_SetConfig+0x13c>)
 810183e:	4293      	cmp	r3, r2
 8101840:	d103      	bne.n	810184a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8101842:	683b      	ldr	r3, [r7, #0]
 8101844:	691a      	ldr	r2, [r3, #16]
 8101846:	687b      	ldr	r3, [r7, #4]
 8101848:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 810184a:	687b      	ldr	r3, [r7, #4]
 810184c:	681b      	ldr	r3, [r3, #0]
 810184e:	f043 0204 	orr.w	r2, r3, #4
 8101852:	687b      	ldr	r3, [r7, #4]
 8101854:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8101856:	687b      	ldr	r3, [r7, #4]
 8101858:	2201      	movs	r2, #1
 810185a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 810185c:	687b      	ldr	r3, [r7, #4]
 810185e:	68fa      	ldr	r2, [r7, #12]
 8101860:	601a      	str	r2, [r3, #0]
}
 8101862:	bf00      	nop
 8101864:	3714      	adds	r7, #20
 8101866:	46bd      	mov	sp, r7
 8101868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810186c:	4770      	bx	lr
 810186e:	bf00      	nop
 8101870:	40010000 	.word	0x40010000
 8101874:	40000400 	.word	0x40000400
 8101878:	40000800 	.word	0x40000800
 810187c:	40000c00 	.word	0x40000c00
 8101880:	40010400 	.word	0x40010400
 8101884:	40014000 	.word	0x40014000
 8101888:	40014400 	.word	0x40014400
 810188c:	40014800 	.word	0x40014800

08101890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8101890:	b480      	push	{r7}
 8101892:	b083      	sub	sp, #12
 8101894:	af00      	add	r7, sp, #0
 8101896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8101898:	bf00      	nop
 810189a:	370c      	adds	r7, #12
 810189c:	46bd      	mov	sp, r7
 810189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018a2:	4770      	bx	lr

081018a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81018a4:	b480      	push	{r7}
 81018a6:	b083      	sub	sp, #12
 81018a8:	af00      	add	r7, sp, #0
 81018aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81018ac:	bf00      	nop
 81018ae:	370c      	adds	r7, #12
 81018b0:	46bd      	mov	sp, r7
 81018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b6:	4770      	bx	lr

081018b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81018b8:	b480      	push	{r7}
 81018ba:	b083      	sub	sp, #12
 81018bc:	af00      	add	r7, sp, #0
 81018be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81018c0:	bf00      	nop
 81018c2:	370c      	adds	r7, #12
 81018c4:	46bd      	mov	sp, r7
 81018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018ca:	4770      	bx	lr

081018cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81018cc:	b580      	push	{r7, lr}
 81018ce:	b08a      	sub	sp, #40	@ 0x28
 81018d0:	af02      	add	r7, sp, #8
 81018d2:	60f8      	str	r0, [r7, #12]
 81018d4:	60b9      	str	r1, [r7, #8]
 81018d6:	603b      	str	r3, [r7, #0]
 81018d8:	4613      	mov	r3, r2
 81018da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81018dc:	68fb      	ldr	r3, [r7, #12]
 81018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81018e2:	2b20      	cmp	r3, #32
 81018e4:	d17b      	bne.n	81019de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 81018e6:	68bb      	ldr	r3, [r7, #8]
 81018e8:	2b00      	cmp	r3, #0
 81018ea:	d002      	beq.n	81018f2 <HAL_UART_Transmit+0x26>
 81018ec:	88fb      	ldrh	r3, [r7, #6]
 81018ee:	2b00      	cmp	r3, #0
 81018f0:	d101      	bne.n	81018f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 81018f2:	2301      	movs	r3, #1
 81018f4:	e074      	b.n	81019e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81018f6:	68fb      	ldr	r3, [r7, #12]
 81018f8:	2200      	movs	r2, #0
 81018fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81018fe:	68fb      	ldr	r3, [r7, #12]
 8101900:	2221      	movs	r2, #33	@ 0x21
 8101902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8101906:	f7fe ffcb 	bl	81008a0 <HAL_GetTick>
 810190a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810190c:	68fb      	ldr	r3, [r7, #12]
 810190e:	88fa      	ldrh	r2, [r7, #6]
 8101910:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8101914:	68fb      	ldr	r3, [r7, #12]
 8101916:	88fa      	ldrh	r2, [r7, #6]
 8101918:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810191c:	68fb      	ldr	r3, [r7, #12]
 810191e:	689b      	ldr	r3, [r3, #8]
 8101920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101924:	d108      	bne.n	8101938 <HAL_UART_Transmit+0x6c>
 8101926:	68fb      	ldr	r3, [r7, #12]
 8101928:	691b      	ldr	r3, [r3, #16]
 810192a:	2b00      	cmp	r3, #0
 810192c:	d104      	bne.n	8101938 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810192e:	2300      	movs	r3, #0
 8101930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8101932:	68bb      	ldr	r3, [r7, #8]
 8101934:	61bb      	str	r3, [r7, #24]
 8101936:	e003      	b.n	8101940 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8101938:	68bb      	ldr	r3, [r7, #8]
 810193a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810193c:	2300      	movs	r3, #0
 810193e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8101940:	e030      	b.n	81019a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8101942:	683b      	ldr	r3, [r7, #0]
 8101944:	9300      	str	r3, [sp, #0]
 8101946:	697b      	ldr	r3, [r7, #20]
 8101948:	2200      	movs	r2, #0
 810194a:	2180      	movs	r1, #128	@ 0x80
 810194c:	68f8      	ldr	r0, [r7, #12]
 810194e:	f000 f84b 	bl	81019e8 <UART_WaitOnFlagUntilTimeout>
 8101952:	4603      	mov	r3, r0
 8101954:	2b00      	cmp	r3, #0
 8101956:	d005      	beq.n	8101964 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8101958:	68fb      	ldr	r3, [r7, #12]
 810195a:	2220      	movs	r2, #32
 810195c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8101960:	2303      	movs	r3, #3
 8101962:	e03d      	b.n	81019e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8101964:	69fb      	ldr	r3, [r7, #28]
 8101966:	2b00      	cmp	r3, #0
 8101968:	d10b      	bne.n	8101982 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810196a:	69bb      	ldr	r3, [r7, #24]
 810196c:	881b      	ldrh	r3, [r3, #0]
 810196e:	461a      	mov	r2, r3
 8101970:	68fb      	ldr	r3, [r7, #12]
 8101972:	681b      	ldr	r3, [r3, #0]
 8101974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8101978:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810197a:	69bb      	ldr	r3, [r7, #24]
 810197c:	3302      	adds	r3, #2
 810197e:	61bb      	str	r3, [r7, #24]
 8101980:	e007      	b.n	8101992 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8101982:	69fb      	ldr	r3, [r7, #28]
 8101984:	781a      	ldrb	r2, [r3, #0]
 8101986:	68fb      	ldr	r3, [r7, #12]
 8101988:	681b      	ldr	r3, [r3, #0]
 810198a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810198c:	69fb      	ldr	r3, [r7, #28]
 810198e:	3301      	adds	r3, #1
 8101990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8101992:	68fb      	ldr	r3, [r7, #12]
 8101994:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8101998:	b29b      	uxth	r3, r3
 810199a:	3b01      	subs	r3, #1
 810199c:	b29a      	uxth	r2, r3
 810199e:	68fb      	ldr	r3, [r7, #12]
 81019a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81019a4:	68fb      	ldr	r3, [r7, #12]
 81019a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81019aa:	b29b      	uxth	r3, r3
 81019ac:	2b00      	cmp	r3, #0
 81019ae:	d1c8      	bne.n	8101942 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81019b0:	683b      	ldr	r3, [r7, #0]
 81019b2:	9300      	str	r3, [sp, #0]
 81019b4:	697b      	ldr	r3, [r7, #20]
 81019b6:	2200      	movs	r2, #0
 81019b8:	2140      	movs	r1, #64	@ 0x40
 81019ba:	68f8      	ldr	r0, [r7, #12]
 81019bc:	f000 f814 	bl	81019e8 <UART_WaitOnFlagUntilTimeout>
 81019c0:	4603      	mov	r3, r0
 81019c2:	2b00      	cmp	r3, #0
 81019c4:	d005      	beq.n	81019d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81019c6:	68fb      	ldr	r3, [r7, #12]
 81019c8:	2220      	movs	r2, #32
 81019ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81019ce:	2303      	movs	r3, #3
 81019d0:	e006      	b.n	81019e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81019d2:	68fb      	ldr	r3, [r7, #12]
 81019d4:	2220      	movs	r2, #32
 81019d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 81019da:	2300      	movs	r3, #0
 81019dc:	e000      	b.n	81019e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 81019de:	2302      	movs	r3, #2
  }
}
 81019e0:	4618      	mov	r0, r3
 81019e2:	3720      	adds	r7, #32
 81019e4:	46bd      	mov	sp, r7
 81019e6:	bd80      	pop	{r7, pc}

081019e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81019e8:	b580      	push	{r7, lr}
 81019ea:	b084      	sub	sp, #16
 81019ec:	af00      	add	r7, sp, #0
 81019ee:	60f8      	str	r0, [r7, #12]
 81019f0:	60b9      	str	r1, [r7, #8]
 81019f2:	603b      	str	r3, [r7, #0]
 81019f4:	4613      	mov	r3, r2
 81019f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81019f8:	e04f      	b.n	8101a9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81019fa:	69bb      	ldr	r3, [r7, #24]
 81019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101a00:	d04b      	beq.n	8101a9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8101a02:	f7fe ff4d 	bl	81008a0 <HAL_GetTick>
 8101a06:	4602      	mov	r2, r0
 8101a08:	683b      	ldr	r3, [r7, #0]
 8101a0a:	1ad3      	subs	r3, r2, r3
 8101a0c:	69ba      	ldr	r2, [r7, #24]
 8101a0e:	429a      	cmp	r2, r3
 8101a10:	d302      	bcc.n	8101a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8101a12:	69bb      	ldr	r3, [r7, #24]
 8101a14:	2b00      	cmp	r3, #0
 8101a16:	d101      	bne.n	8101a1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8101a18:	2303      	movs	r3, #3
 8101a1a:	e04e      	b.n	8101aba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8101a1c:	68fb      	ldr	r3, [r7, #12]
 8101a1e:	681b      	ldr	r3, [r3, #0]
 8101a20:	681b      	ldr	r3, [r3, #0]
 8101a22:	f003 0304 	and.w	r3, r3, #4
 8101a26:	2b00      	cmp	r3, #0
 8101a28:	d037      	beq.n	8101a9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8101a2a:	68bb      	ldr	r3, [r7, #8]
 8101a2c:	2b80      	cmp	r3, #128	@ 0x80
 8101a2e:	d034      	beq.n	8101a9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8101a30:	68bb      	ldr	r3, [r7, #8]
 8101a32:	2b40      	cmp	r3, #64	@ 0x40
 8101a34:	d031      	beq.n	8101a9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8101a36:	68fb      	ldr	r3, [r7, #12]
 8101a38:	681b      	ldr	r3, [r3, #0]
 8101a3a:	69db      	ldr	r3, [r3, #28]
 8101a3c:	f003 0308 	and.w	r3, r3, #8
 8101a40:	2b08      	cmp	r3, #8
 8101a42:	d110      	bne.n	8101a66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8101a44:	68fb      	ldr	r3, [r7, #12]
 8101a46:	681b      	ldr	r3, [r3, #0]
 8101a48:	2208      	movs	r2, #8
 8101a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8101a4c:	68f8      	ldr	r0, [r7, #12]
 8101a4e:	f000 f838 	bl	8101ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8101a52:	68fb      	ldr	r3, [r7, #12]
 8101a54:	2208      	movs	r2, #8
 8101a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8101a5a:	68fb      	ldr	r3, [r7, #12]
 8101a5c:	2200      	movs	r2, #0
 8101a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8101a62:	2301      	movs	r3, #1
 8101a64:	e029      	b.n	8101aba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8101a66:	68fb      	ldr	r3, [r7, #12]
 8101a68:	681b      	ldr	r3, [r3, #0]
 8101a6a:	69db      	ldr	r3, [r3, #28]
 8101a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8101a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8101a74:	d111      	bne.n	8101a9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8101a76:	68fb      	ldr	r3, [r7, #12]
 8101a78:	681b      	ldr	r3, [r3, #0]
 8101a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8101a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8101a80:	68f8      	ldr	r0, [r7, #12]
 8101a82:	f000 f81e 	bl	8101ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8101a86:	68fb      	ldr	r3, [r7, #12]
 8101a88:	2220      	movs	r2, #32
 8101a8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8101a8e:	68fb      	ldr	r3, [r7, #12]
 8101a90:	2200      	movs	r2, #0
 8101a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8101a96:	2303      	movs	r3, #3
 8101a98:	e00f      	b.n	8101aba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8101a9a:	68fb      	ldr	r3, [r7, #12]
 8101a9c:	681b      	ldr	r3, [r3, #0]
 8101a9e:	69da      	ldr	r2, [r3, #28]
 8101aa0:	68bb      	ldr	r3, [r7, #8]
 8101aa2:	4013      	ands	r3, r2
 8101aa4:	68ba      	ldr	r2, [r7, #8]
 8101aa6:	429a      	cmp	r2, r3
 8101aa8:	bf0c      	ite	eq
 8101aaa:	2301      	moveq	r3, #1
 8101aac:	2300      	movne	r3, #0
 8101aae:	b2db      	uxtb	r3, r3
 8101ab0:	461a      	mov	r2, r3
 8101ab2:	79fb      	ldrb	r3, [r7, #7]
 8101ab4:	429a      	cmp	r2, r3
 8101ab6:	d0a0      	beq.n	81019fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8101ab8:	2300      	movs	r3, #0
}
 8101aba:	4618      	mov	r0, r3
 8101abc:	3710      	adds	r7, #16
 8101abe:	46bd      	mov	sp, r7
 8101ac0:	bd80      	pop	{r7, pc}

08101ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8101ac2:	b480      	push	{r7}
 8101ac4:	b095      	sub	sp, #84	@ 0x54
 8101ac6:	af00      	add	r7, sp, #0
 8101ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	681b      	ldr	r3, [r3, #0]
 8101ace:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101ad2:	e853 3f00 	ldrex	r3, [r3]
 8101ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8101ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8101ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	461a      	mov	r2, r3
 8101ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8101ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8101aea:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8101aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8101af0:	e841 2300 	strex	r3, r2, [r1]
 8101af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8101af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101af8:	2b00      	cmp	r3, #0
 8101afa:	d1e6      	bne.n	8101aca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	3308      	adds	r3, #8
 8101b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101b04:	6a3b      	ldr	r3, [r7, #32]
 8101b06:	e853 3f00 	ldrex	r3, [r3]
 8101b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8101b0c:	69fb      	ldr	r3, [r7, #28]
 8101b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8101b12:	f023 0301 	bic.w	r3, r3, #1
 8101b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8101b18:	687b      	ldr	r3, [r7, #4]
 8101b1a:	681b      	ldr	r3, [r3, #0]
 8101b1c:	3308      	adds	r3, #8
 8101b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8101b20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8101b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8101b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101b28:	e841 2300 	strex	r3, r2, [r1]
 8101b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8101b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b30:	2b00      	cmp	r3, #0
 8101b32:	d1e3      	bne.n	8101afc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8101b34:	687b      	ldr	r3, [r7, #4]
 8101b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101b38:	2b01      	cmp	r3, #1
 8101b3a:	d118      	bne.n	8101b6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8101b3c:	687b      	ldr	r3, [r7, #4]
 8101b3e:	681b      	ldr	r3, [r3, #0]
 8101b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101b42:	68fb      	ldr	r3, [r7, #12]
 8101b44:	e853 3f00 	ldrex	r3, [r3]
 8101b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8101b4a:	68bb      	ldr	r3, [r7, #8]
 8101b4c:	f023 0310 	bic.w	r3, r3, #16
 8101b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	681b      	ldr	r3, [r3, #0]
 8101b56:	461a      	mov	r2, r3
 8101b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101b5a:	61bb      	str	r3, [r7, #24]
 8101b5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101b5e:	6979      	ldr	r1, [r7, #20]
 8101b60:	69ba      	ldr	r2, [r7, #24]
 8101b62:	e841 2300 	strex	r3, r2, [r1]
 8101b66:	613b      	str	r3, [r7, #16]
   return(result);
 8101b68:	693b      	ldr	r3, [r7, #16]
 8101b6a:	2b00      	cmp	r3, #0
 8101b6c:	d1e6      	bne.n	8101b3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	2220      	movs	r2, #32
 8101b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	2200      	movs	r2, #0
 8101b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	2200      	movs	r2, #0
 8101b80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8101b82:	bf00      	nop
 8101b84:	3754      	adds	r7, #84	@ 0x54
 8101b86:	46bd      	mov	sp, r7
 8101b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b8c:	4770      	bx	lr
	...

08101b90 <__NVIC_SetPriority>:
{
 8101b90:	b480      	push	{r7}
 8101b92:	b083      	sub	sp, #12
 8101b94:	af00      	add	r7, sp, #0
 8101b96:	4603      	mov	r3, r0
 8101b98:	6039      	str	r1, [r7, #0]
 8101b9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ba0:	2b00      	cmp	r3, #0
 8101ba2:	db0a      	blt.n	8101bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101ba4:	683b      	ldr	r3, [r7, #0]
 8101ba6:	b2da      	uxtb	r2, r3
 8101ba8:	490c      	ldr	r1, [pc, #48]	@ (8101bdc <__NVIC_SetPriority+0x4c>)
 8101baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101bae:	0112      	lsls	r2, r2, #4
 8101bb0:	b2d2      	uxtb	r2, r2
 8101bb2:	440b      	add	r3, r1
 8101bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8101bb8:	e00a      	b.n	8101bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101bba:	683b      	ldr	r3, [r7, #0]
 8101bbc:	b2da      	uxtb	r2, r3
 8101bbe:	4908      	ldr	r1, [pc, #32]	@ (8101be0 <__NVIC_SetPriority+0x50>)
 8101bc0:	88fb      	ldrh	r3, [r7, #6]
 8101bc2:	f003 030f 	and.w	r3, r3, #15
 8101bc6:	3b04      	subs	r3, #4
 8101bc8:	0112      	lsls	r2, r2, #4
 8101bca:	b2d2      	uxtb	r2, r2
 8101bcc:	440b      	add	r3, r1
 8101bce:	761a      	strb	r2, [r3, #24]
}
 8101bd0:	bf00      	nop
 8101bd2:	370c      	adds	r7, #12
 8101bd4:	46bd      	mov	sp, r7
 8101bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bda:	4770      	bx	lr
 8101bdc:	e000e100 	.word	0xe000e100
 8101be0:	e000ed00 	.word	0xe000ed00

08101be4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8101be4:	b580      	push	{r7, lr}
 8101be6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8101be8:	4b05      	ldr	r3, [pc, #20]	@ (8101c00 <SysTick_Handler+0x1c>)
 8101bea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8101bec:	f002 f95a 	bl	8103ea4 <xTaskGetSchedulerState>
 8101bf0:	4603      	mov	r3, r0
 8101bf2:	2b01      	cmp	r3, #1
 8101bf4:	d001      	beq.n	8101bfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8101bf6:	f000 fd9f 	bl	8102738 <xPortSysTickHandler>
  }
}
 8101bfa:	bf00      	nop
 8101bfc:	bd80      	pop	{r7, pc}
 8101bfe:	bf00      	nop
 8101c00:	e000e010 	.word	0xe000e010

08101c04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8101c04:	b580      	push	{r7, lr}
 8101c06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8101c08:	2100      	movs	r1, #0
 8101c0a:	f06f 0004 	mvn.w	r0, #4
 8101c0e:	f7ff ffbf 	bl	8101b90 <__NVIC_SetPriority>
#endif
}
 8101c12:	bf00      	nop
 8101c14:	bd80      	pop	{r7, pc}
	...

08101c18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8101c18:	b480      	push	{r7}
 8101c1a:	b083      	sub	sp, #12
 8101c1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101c1e:	f3ef 8305 	mrs	r3, IPSR
 8101c22:	603b      	str	r3, [r7, #0]
  return(result);
 8101c24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101c26:	2b00      	cmp	r3, #0
 8101c28:	d003      	beq.n	8101c32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8101c2a:	f06f 0305 	mvn.w	r3, #5
 8101c2e:	607b      	str	r3, [r7, #4]
 8101c30:	e00c      	b.n	8101c4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8101c32:	4b0a      	ldr	r3, [pc, #40]	@ (8101c5c <osKernelInitialize+0x44>)
 8101c34:	681b      	ldr	r3, [r3, #0]
 8101c36:	2b00      	cmp	r3, #0
 8101c38:	d105      	bne.n	8101c46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8101c3a:	4b08      	ldr	r3, [pc, #32]	@ (8101c5c <osKernelInitialize+0x44>)
 8101c3c:	2201      	movs	r2, #1
 8101c3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8101c40:	2300      	movs	r3, #0
 8101c42:	607b      	str	r3, [r7, #4]
 8101c44:	e002      	b.n	8101c4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8101c46:	f04f 33ff 	mov.w	r3, #4294967295
 8101c4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101c4c:	687b      	ldr	r3, [r7, #4]
}
 8101c4e:	4618      	mov	r0, r3
 8101c50:	370c      	adds	r7, #12
 8101c52:	46bd      	mov	sp, r7
 8101c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c58:	4770      	bx	lr
 8101c5a:	bf00      	nop
 8101c5c:	1000016c 	.word	0x1000016c

08101c60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8101c60:	b580      	push	{r7, lr}
 8101c62:	b082      	sub	sp, #8
 8101c64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101c66:	f3ef 8305 	mrs	r3, IPSR
 8101c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8101c6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101c6e:	2b00      	cmp	r3, #0
 8101c70:	d003      	beq.n	8101c7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8101c72:	f06f 0305 	mvn.w	r3, #5
 8101c76:	607b      	str	r3, [r7, #4]
 8101c78:	e010      	b.n	8101c9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8101c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8101ca8 <osKernelStart+0x48>)
 8101c7c:	681b      	ldr	r3, [r3, #0]
 8101c7e:	2b01      	cmp	r3, #1
 8101c80:	d109      	bne.n	8101c96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8101c82:	f7ff ffbf 	bl	8101c04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8101c86:	4b08      	ldr	r3, [pc, #32]	@ (8101ca8 <osKernelStart+0x48>)
 8101c88:	2202      	movs	r2, #2
 8101c8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8101c8c:	f001 fcbc 	bl	8103608 <vTaskStartScheduler>
      stat = osOK;
 8101c90:	2300      	movs	r3, #0
 8101c92:	607b      	str	r3, [r7, #4]
 8101c94:	e002      	b.n	8101c9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8101c96:	f04f 33ff 	mov.w	r3, #4294967295
 8101c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8101c9c:	687b      	ldr	r3, [r7, #4]
}
 8101c9e:	4618      	mov	r0, r3
 8101ca0:	3708      	adds	r7, #8
 8101ca2:	46bd      	mov	sp, r7
 8101ca4:	bd80      	pop	{r7, pc}
 8101ca6:	bf00      	nop
 8101ca8:	1000016c 	.word	0x1000016c

08101cac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8101cac:	b580      	push	{r7, lr}
 8101cae:	b08e      	sub	sp, #56	@ 0x38
 8101cb0:	af04      	add	r7, sp, #16
 8101cb2:	60f8      	str	r0, [r7, #12]
 8101cb4:	60b9      	str	r1, [r7, #8]
 8101cb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8101cb8:	2300      	movs	r3, #0
 8101cba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101cbc:	f3ef 8305 	mrs	r3, IPSR
 8101cc0:	617b      	str	r3, [r7, #20]
  return(result);
 8101cc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8101cc4:	2b00      	cmp	r3, #0
 8101cc6:	d17e      	bne.n	8101dc6 <osThreadNew+0x11a>
 8101cc8:	68fb      	ldr	r3, [r7, #12]
 8101cca:	2b00      	cmp	r3, #0
 8101ccc:	d07b      	beq.n	8101dc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8101cce:	2380      	movs	r3, #128	@ 0x80
 8101cd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8101cd2:	2318      	movs	r3, #24
 8101cd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8101cd6:	2300      	movs	r3, #0
 8101cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8101cda:	f04f 33ff 	mov.w	r3, #4294967295
 8101cde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8101ce0:	687b      	ldr	r3, [r7, #4]
 8101ce2:	2b00      	cmp	r3, #0
 8101ce4:	d045      	beq.n	8101d72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	2b00      	cmp	r3, #0
 8101cec:	d002      	beq.n	8101cf4 <osThreadNew+0x48>
        name = attr->name;
 8101cee:	687b      	ldr	r3, [r7, #4]
 8101cf0:	681b      	ldr	r3, [r3, #0]
 8101cf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	699b      	ldr	r3, [r3, #24]
 8101cf8:	2b00      	cmp	r3, #0
 8101cfa:	d002      	beq.n	8101d02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8101cfc:	687b      	ldr	r3, [r7, #4]
 8101cfe:	699b      	ldr	r3, [r3, #24]
 8101d00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8101d02:	69fb      	ldr	r3, [r7, #28]
 8101d04:	2b00      	cmp	r3, #0
 8101d06:	d008      	beq.n	8101d1a <osThreadNew+0x6e>
 8101d08:	69fb      	ldr	r3, [r7, #28]
 8101d0a:	2b38      	cmp	r3, #56	@ 0x38
 8101d0c:	d805      	bhi.n	8101d1a <osThreadNew+0x6e>
 8101d0e:	687b      	ldr	r3, [r7, #4]
 8101d10:	685b      	ldr	r3, [r3, #4]
 8101d12:	f003 0301 	and.w	r3, r3, #1
 8101d16:	2b00      	cmp	r3, #0
 8101d18:	d001      	beq.n	8101d1e <osThreadNew+0x72>
        return (NULL);
 8101d1a:	2300      	movs	r3, #0
 8101d1c:	e054      	b.n	8101dc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8101d1e:	687b      	ldr	r3, [r7, #4]
 8101d20:	695b      	ldr	r3, [r3, #20]
 8101d22:	2b00      	cmp	r3, #0
 8101d24:	d003      	beq.n	8101d2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	695b      	ldr	r3, [r3, #20]
 8101d2a:	089b      	lsrs	r3, r3, #2
 8101d2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	689b      	ldr	r3, [r3, #8]
 8101d32:	2b00      	cmp	r3, #0
 8101d34:	d00e      	beq.n	8101d54 <osThreadNew+0xa8>
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	68db      	ldr	r3, [r3, #12]
 8101d3a:	2b5b      	cmp	r3, #91	@ 0x5b
 8101d3c:	d90a      	bls.n	8101d54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8101d42:	2b00      	cmp	r3, #0
 8101d44:	d006      	beq.n	8101d54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	695b      	ldr	r3, [r3, #20]
 8101d4a:	2b00      	cmp	r3, #0
 8101d4c:	d002      	beq.n	8101d54 <osThreadNew+0xa8>
        mem = 1;
 8101d4e:	2301      	movs	r3, #1
 8101d50:	61bb      	str	r3, [r7, #24]
 8101d52:	e010      	b.n	8101d76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8101d54:	687b      	ldr	r3, [r7, #4]
 8101d56:	689b      	ldr	r3, [r3, #8]
 8101d58:	2b00      	cmp	r3, #0
 8101d5a:	d10c      	bne.n	8101d76 <osThreadNew+0xca>
 8101d5c:	687b      	ldr	r3, [r7, #4]
 8101d5e:	68db      	ldr	r3, [r3, #12]
 8101d60:	2b00      	cmp	r3, #0
 8101d62:	d108      	bne.n	8101d76 <osThreadNew+0xca>
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	691b      	ldr	r3, [r3, #16]
 8101d68:	2b00      	cmp	r3, #0
 8101d6a:	d104      	bne.n	8101d76 <osThreadNew+0xca>
          mem = 0;
 8101d6c:	2300      	movs	r3, #0
 8101d6e:	61bb      	str	r3, [r7, #24]
 8101d70:	e001      	b.n	8101d76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8101d72:	2300      	movs	r3, #0
 8101d74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8101d76:	69bb      	ldr	r3, [r7, #24]
 8101d78:	2b01      	cmp	r3, #1
 8101d7a:	d110      	bne.n	8101d9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8101d80:	687a      	ldr	r2, [r7, #4]
 8101d82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8101d84:	9202      	str	r2, [sp, #8]
 8101d86:	9301      	str	r3, [sp, #4]
 8101d88:	69fb      	ldr	r3, [r7, #28]
 8101d8a:	9300      	str	r3, [sp, #0]
 8101d8c:	68bb      	ldr	r3, [r7, #8]
 8101d8e:	6a3a      	ldr	r2, [r7, #32]
 8101d90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101d92:	68f8      	ldr	r0, [r7, #12]
 8101d94:	f001 fa5c 	bl	8103250 <xTaskCreateStatic>
 8101d98:	4603      	mov	r3, r0
 8101d9a:	613b      	str	r3, [r7, #16]
 8101d9c:	e013      	b.n	8101dc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8101d9e:	69bb      	ldr	r3, [r7, #24]
 8101da0:	2b00      	cmp	r3, #0
 8101da2:	d110      	bne.n	8101dc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8101da4:	6a3b      	ldr	r3, [r7, #32]
 8101da6:	b29a      	uxth	r2, r3
 8101da8:	f107 0310 	add.w	r3, r7, #16
 8101dac:	9301      	str	r3, [sp, #4]
 8101dae:	69fb      	ldr	r3, [r7, #28]
 8101db0:	9300      	str	r3, [sp, #0]
 8101db2:	68bb      	ldr	r3, [r7, #8]
 8101db4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101db6:	68f8      	ldr	r0, [r7, #12]
 8101db8:	f001 faaa 	bl	8103310 <xTaskCreate>
 8101dbc:	4603      	mov	r3, r0
 8101dbe:	2b01      	cmp	r3, #1
 8101dc0:	d001      	beq.n	8101dc6 <osThreadNew+0x11a>
            hTask = NULL;
 8101dc2:	2300      	movs	r3, #0
 8101dc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8101dc6:	693b      	ldr	r3, [r7, #16]
}
 8101dc8:	4618      	mov	r0, r3
 8101dca:	3728      	adds	r7, #40	@ 0x28
 8101dcc:	46bd      	mov	sp, r7
 8101dce:	bd80      	pop	{r7, pc}

08101dd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8101dd0:	b580      	push	{r7, lr}
 8101dd2:	b084      	sub	sp, #16
 8101dd4:	af00      	add	r7, sp, #0
 8101dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8101dd8:	f3ef 8305 	mrs	r3, IPSR
 8101ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8101dde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8101de0:	2b00      	cmp	r3, #0
 8101de2:	d003      	beq.n	8101dec <osDelay+0x1c>
    stat = osErrorISR;
 8101de4:	f06f 0305 	mvn.w	r3, #5
 8101de8:	60fb      	str	r3, [r7, #12]
 8101dea:	e007      	b.n	8101dfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8101dec:	2300      	movs	r3, #0
 8101dee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	2b00      	cmp	r3, #0
 8101df4:	d002      	beq.n	8101dfc <osDelay+0x2c>
      vTaskDelay(ticks);
 8101df6:	6878      	ldr	r0, [r7, #4]
 8101df8:	f001 fbd0 	bl	810359c <vTaskDelay>
    }
  }

  return (stat);
 8101dfc:	68fb      	ldr	r3, [r7, #12]
}
 8101dfe:	4618      	mov	r0, r3
 8101e00:	3710      	adds	r7, #16
 8101e02:	46bd      	mov	sp, r7
 8101e04:	bd80      	pop	{r7, pc}
	...

08101e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8101e08:	b480      	push	{r7}
 8101e0a:	b085      	sub	sp, #20
 8101e0c:	af00      	add	r7, sp, #0
 8101e0e:	60f8      	str	r0, [r7, #12]
 8101e10:	60b9      	str	r1, [r7, #8]
 8101e12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8101e14:	68fb      	ldr	r3, [r7, #12]
 8101e16:	4a07      	ldr	r2, [pc, #28]	@ (8101e34 <vApplicationGetIdleTaskMemory+0x2c>)
 8101e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8101e1a:	68bb      	ldr	r3, [r7, #8]
 8101e1c:	4a06      	ldr	r2, [pc, #24]	@ (8101e38 <vApplicationGetIdleTaskMemory+0x30>)
 8101e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	2280      	movs	r2, #128	@ 0x80
 8101e24:	601a      	str	r2, [r3, #0]
}
 8101e26:	bf00      	nop
 8101e28:	3714      	adds	r7, #20
 8101e2a:	46bd      	mov	sp, r7
 8101e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e30:	4770      	bx	lr
 8101e32:	bf00      	nop
 8101e34:	10000170 	.word	0x10000170
 8101e38:	100001cc 	.word	0x100001cc

08101e3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8101e3c:	b480      	push	{r7}
 8101e3e:	b085      	sub	sp, #20
 8101e40:	af00      	add	r7, sp, #0
 8101e42:	60f8      	str	r0, [r7, #12]
 8101e44:	60b9      	str	r1, [r7, #8]
 8101e46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8101e48:	68fb      	ldr	r3, [r7, #12]
 8101e4a:	4a07      	ldr	r2, [pc, #28]	@ (8101e68 <vApplicationGetTimerTaskMemory+0x2c>)
 8101e4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8101e4e:	68bb      	ldr	r3, [r7, #8]
 8101e50:	4a06      	ldr	r2, [pc, #24]	@ (8101e6c <vApplicationGetTimerTaskMemory+0x30>)
 8101e52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101e5a:	601a      	str	r2, [r3, #0]
}
 8101e5c:	bf00      	nop
 8101e5e:	3714      	adds	r7, #20
 8101e60:	46bd      	mov	sp, r7
 8101e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e66:	4770      	bx	lr
 8101e68:	100003cc 	.word	0x100003cc
 8101e6c:	10000428 	.word	0x10000428

08101e70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8101e70:	b580      	push	{r7, lr}
 8101e72:	b08a      	sub	sp, #40	@ 0x28
 8101e74:	af00      	add	r7, sp, #0
 8101e76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8101e78:	2300      	movs	r3, #0
 8101e7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8101e7c:	f001 fc2c 	bl	81036d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8101e80:	4b5c      	ldr	r3, [pc, #368]	@ (8101ff4 <pvPortMalloc+0x184>)
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	2b00      	cmp	r3, #0
 8101e86:	d101      	bne.n	8101e8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8101e88:	f000 f924 	bl	81020d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8101e8c:	4b5a      	ldr	r3, [pc, #360]	@ (8101ff8 <pvPortMalloc+0x188>)
 8101e8e:	681a      	ldr	r2, [r3, #0]
 8101e90:	687b      	ldr	r3, [r7, #4]
 8101e92:	4013      	ands	r3, r2
 8101e94:	2b00      	cmp	r3, #0
 8101e96:	f040 8095 	bne.w	8101fc4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	2b00      	cmp	r3, #0
 8101e9e:	d01e      	beq.n	8101ede <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8101ea0:	2208      	movs	r2, #8
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	4413      	add	r3, r2
 8101ea6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	f003 0307 	and.w	r3, r3, #7
 8101eae:	2b00      	cmp	r3, #0
 8101eb0:	d015      	beq.n	8101ede <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	f023 0307 	bic.w	r3, r3, #7
 8101eb8:	3308      	adds	r3, #8
 8101eba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	f003 0307 	and.w	r3, r3, #7
 8101ec2:	2b00      	cmp	r3, #0
 8101ec4:	d00b      	beq.n	8101ede <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8101ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101eca:	f383 8811 	msr	BASEPRI, r3
 8101ece:	f3bf 8f6f 	isb	sy
 8101ed2:	f3bf 8f4f 	dsb	sy
 8101ed6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8101ed8:	bf00      	nop
 8101eda:	bf00      	nop
 8101edc:	e7fd      	b.n	8101eda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	2b00      	cmp	r3, #0
 8101ee2:	d06f      	beq.n	8101fc4 <pvPortMalloc+0x154>
 8101ee4:	4b45      	ldr	r3, [pc, #276]	@ (8101ffc <pvPortMalloc+0x18c>)
 8101ee6:	681b      	ldr	r3, [r3, #0]
 8101ee8:	687a      	ldr	r2, [r7, #4]
 8101eea:	429a      	cmp	r2, r3
 8101eec:	d86a      	bhi.n	8101fc4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8101eee:	4b44      	ldr	r3, [pc, #272]	@ (8102000 <pvPortMalloc+0x190>)
 8101ef0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8101ef2:	4b43      	ldr	r3, [pc, #268]	@ (8102000 <pvPortMalloc+0x190>)
 8101ef4:	681b      	ldr	r3, [r3, #0]
 8101ef6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101ef8:	e004      	b.n	8101f04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8101efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101efc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8101efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f00:	681b      	ldr	r3, [r3, #0]
 8101f02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f06:	685b      	ldr	r3, [r3, #4]
 8101f08:	687a      	ldr	r2, [r7, #4]
 8101f0a:	429a      	cmp	r2, r3
 8101f0c:	d903      	bls.n	8101f16 <pvPortMalloc+0xa6>
 8101f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f10:	681b      	ldr	r3, [r3, #0]
 8101f12:	2b00      	cmp	r3, #0
 8101f14:	d1f1      	bne.n	8101efa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8101f16:	4b37      	ldr	r3, [pc, #220]	@ (8101ff4 <pvPortMalloc+0x184>)
 8101f18:	681b      	ldr	r3, [r3, #0]
 8101f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101f1c:	429a      	cmp	r2, r3
 8101f1e:	d051      	beq.n	8101fc4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8101f20:	6a3b      	ldr	r3, [r7, #32]
 8101f22:	681b      	ldr	r3, [r3, #0]
 8101f24:	2208      	movs	r2, #8
 8101f26:	4413      	add	r3, r2
 8101f28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8101f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f2c:	681a      	ldr	r2, [r3, #0]
 8101f2e:	6a3b      	ldr	r3, [r7, #32]
 8101f30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8101f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f34:	685a      	ldr	r2, [r3, #4]
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	1ad2      	subs	r2, r2, r3
 8101f3a:	2308      	movs	r3, #8
 8101f3c:	005b      	lsls	r3, r3, #1
 8101f3e:	429a      	cmp	r2, r3
 8101f40:	d920      	bls.n	8101f84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8101f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	4413      	add	r3, r2
 8101f48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101f4a:	69bb      	ldr	r3, [r7, #24]
 8101f4c:	f003 0307 	and.w	r3, r3, #7
 8101f50:	2b00      	cmp	r3, #0
 8101f52:	d00b      	beq.n	8101f6c <pvPortMalloc+0xfc>
	__asm volatile
 8101f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101f58:	f383 8811 	msr	BASEPRI, r3
 8101f5c:	f3bf 8f6f 	isb	sy
 8101f60:	f3bf 8f4f 	dsb	sy
 8101f64:	613b      	str	r3, [r7, #16]
}
 8101f66:	bf00      	nop
 8101f68:	bf00      	nop
 8101f6a:	e7fd      	b.n	8101f68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8101f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f6e:	685a      	ldr	r2, [r3, #4]
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	1ad2      	subs	r2, r2, r3
 8101f74:	69bb      	ldr	r3, [r7, #24]
 8101f76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8101f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f7a:	687a      	ldr	r2, [r7, #4]
 8101f7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8101f7e:	69b8      	ldr	r0, [r7, #24]
 8101f80:	f000 f90a 	bl	8102198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8101f84:	4b1d      	ldr	r3, [pc, #116]	@ (8101ffc <pvPortMalloc+0x18c>)
 8101f86:	681a      	ldr	r2, [r3, #0]
 8101f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f8a:	685b      	ldr	r3, [r3, #4]
 8101f8c:	1ad3      	subs	r3, r2, r3
 8101f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8101ffc <pvPortMalloc+0x18c>)
 8101f90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8101f92:	4b1a      	ldr	r3, [pc, #104]	@ (8101ffc <pvPortMalloc+0x18c>)
 8101f94:	681a      	ldr	r2, [r3, #0]
 8101f96:	4b1b      	ldr	r3, [pc, #108]	@ (8102004 <pvPortMalloc+0x194>)
 8101f98:	681b      	ldr	r3, [r3, #0]
 8101f9a:	429a      	cmp	r2, r3
 8101f9c:	d203      	bcs.n	8101fa6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8101f9e:	4b17      	ldr	r3, [pc, #92]	@ (8101ffc <pvPortMalloc+0x18c>)
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	4a18      	ldr	r2, [pc, #96]	@ (8102004 <pvPortMalloc+0x194>)
 8101fa4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8101fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101fa8:	685a      	ldr	r2, [r3, #4]
 8101faa:	4b13      	ldr	r3, [pc, #76]	@ (8101ff8 <pvPortMalloc+0x188>)
 8101fac:	681b      	ldr	r3, [r3, #0]
 8101fae:	431a      	orrs	r2, r3
 8101fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101fb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8101fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101fb6:	2200      	movs	r2, #0
 8101fb8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8101fba:	4b13      	ldr	r3, [pc, #76]	@ (8102008 <pvPortMalloc+0x198>)
 8101fbc:	681b      	ldr	r3, [r3, #0]
 8101fbe:	3301      	adds	r3, #1
 8101fc0:	4a11      	ldr	r2, [pc, #68]	@ (8102008 <pvPortMalloc+0x198>)
 8101fc2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8101fc4:	f001 fb96 	bl	81036f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8101fc8:	69fb      	ldr	r3, [r7, #28]
 8101fca:	f003 0307 	and.w	r3, r3, #7
 8101fce:	2b00      	cmp	r3, #0
 8101fd0:	d00b      	beq.n	8101fea <pvPortMalloc+0x17a>
	__asm volatile
 8101fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101fd6:	f383 8811 	msr	BASEPRI, r3
 8101fda:	f3bf 8f6f 	isb	sy
 8101fde:	f3bf 8f4f 	dsb	sy
 8101fe2:	60fb      	str	r3, [r7, #12]
}
 8101fe4:	bf00      	nop
 8101fe6:	bf00      	nop
 8101fe8:	e7fd      	b.n	8101fe6 <pvPortMalloc+0x176>
	return pvReturn;
 8101fea:	69fb      	ldr	r3, [r7, #28]
}
 8101fec:	4618      	mov	r0, r3
 8101fee:	3728      	adds	r7, #40	@ 0x28
 8101ff0:	46bd      	mov	sp, r7
 8101ff2:	bd80      	pop	{r7, pc}
 8101ff4:	10004430 	.word	0x10004430
 8101ff8:	10004444 	.word	0x10004444
 8101ffc:	10004434 	.word	0x10004434
 8102000:	10004428 	.word	0x10004428
 8102004:	10004438 	.word	0x10004438
 8102008:	1000443c 	.word	0x1000443c

0810200c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810200c:	b580      	push	{r7, lr}
 810200e:	b086      	sub	sp, #24
 8102010:	af00      	add	r7, sp, #0
 8102012:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	2b00      	cmp	r3, #0
 810201c:	d04f      	beq.n	81020be <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810201e:	2308      	movs	r3, #8
 8102020:	425b      	negs	r3, r3
 8102022:	697a      	ldr	r2, [r7, #20]
 8102024:	4413      	add	r3, r2
 8102026:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8102028:	697b      	ldr	r3, [r7, #20]
 810202a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810202c:	693b      	ldr	r3, [r7, #16]
 810202e:	685a      	ldr	r2, [r3, #4]
 8102030:	4b25      	ldr	r3, [pc, #148]	@ (81020c8 <vPortFree+0xbc>)
 8102032:	681b      	ldr	r3, [r3, #0]
 8102034:	4013      	ands	r3, r2
 8102036:	2b00      	cmp	r3, #0
 8102038:	d10b      	bne.n	8102052 <vPortFree+0x46>
	__asm volatile
 810203a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810203e:	f383 8811 	msr	BASEPRI, r3
 8102042:	f3bf 8f6f 	isb	sy
 8102046:	f3bf 8f4f 	dsb	sy
 810204a:	60fb      	str	r3, [r7, #12]
}
 810204c:	bf00      	nop
 810204e:	bf00      	nop
 8102050:	e7fd      	b.n	810204e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8102052:	693b      	ldr	r3, [r7, #16]
 8102054:	681b      	ldr	r3, [r3, #0]
 8102056:	2b00      	cmp	r3, #0
 8102058:	d00b      	beq.n	8102072 <vPortFree+0x66>
	__asm volatile
 810205a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810205e:	f383 8811 	msr	BASEPRI, r3
 8102062:	f3bf 8f6f 	isb	sy
 8102066:	f3bf 8f4f 	dsb	sy
 810206a:	60bb      	str	r3, [r7, #8]
}
 810206c:	bf00      	nop
 810206e:	bf00      	nop
 8102070:	e7fd      	b.n	810206e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8102072:	693b      	ldr	r3, [r7, #16]
 8102074:	685a      	ldr	r2, [r3, #4]
 8102076:	4b14      	ldr	r3, [pc, #80]	@ (81020c8 <vPortFree+0xbc>)
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	4013      	ands	r3, r2
 810207c:	2b00      	cmp	r3, #0
 810207e:	d01e      	beq.n	81020be <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8102080:	693b      	ldr	r3, [r7, #16]
 8102082:	681b      	ldr	r3, [r3, #0]
 8102084:	2b00      	cmp	r3, #0
 8102086:	d11a      	bne.n	81020be <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8102088:	693b      	ldr	r3, [r7, #16]
 810208a:	685a      	ldr	r2, [r3, #4]
 810208c:	4b0e      	ldr	r3, [pc, #56]	@ (81020c8 <vPortFree+0xbc>)
 810208e:	681b      	ldr	r3, [r3, #0]
 8102090:	43db      	mvns	r3, r3
 8102092:	401a      	ands	r2, r3
 8102094:	693b      	ldr	r3, [r7, #16]
 8102096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8102098:	f001 fb1e 	bl	81036d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810209c:	693b      	ldr	r3, [r7, #16]
 810209e:	685a      	ldr	r2, [r3, #4]
 81020a0:	4b0a      	ldr	r3, [pc, #40]	@ (81020cc <vPortFree+0xc0>)
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	4413      	add	r3, r2
 81020a6:	4a09      	ldr	r2, [pc, #36]	@ (81020cc <vPortFree+0xc0>)
 81020a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81020aa:	6938      	ldr	r0, [r7, #16]
 81020ac:	f000 f874 	bl	8102198 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81020b0:	4b07      	ldr	r3, [pc, #28]	@ (81020d0 <vPortFree+0xc4>)
 81020b2:	681b      	ldr	r3, [r3, #0]
 81020b4:	3301      	adds	r3, #1
 81020b6:	4a06      	ldr	r2, [pc, #24]	@ (81020d0 <vPortFree+0xc4>)
 81020b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81020ba:	f001 fb1b 	bl	81036f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81020be:	bf00      	nop
 81020c0:	3718      	adds	r7, #24
 81020c2:	46bd      	mov	sp, r7
 81020c4:	bd80      	pop	{r7, pc}
 81020c6:	bf00      	nop
 81020c8:	10004444 	.word	0x10004444
 81020cc:	10004434 	.word	0x10004434
 81020d0:	10004440 	.word	0x10004440

081020d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81020d4:	b480      	push	{r7}
 81020d6:	b085      	sub	sp, #20
 81020d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81020da:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 81020de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81020e0:	4b27      	ldr	r3, [pc, #156]	@ (8102180 <prvHeapInit+0xac>)
 81020e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81020e4:	68fb      	ldr	r3, [r7, #12]
 81020e6:	f003 0307 	and.w	r3, r3, #7
 81020ea:	2b00      	cmp	r3, #0
 81020ec:	d00c      	beq.n	8102108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81020ee:	68fb      	ldr	r3, [r7, #12]
 81020f0:	3307      	adds	r3, #7
 81020f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81020f4:	68fb      	ldr	r3, [r7, #12]
 81020f6:	f023 0307 	bic.w	r3, r3, #7
 81020fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81020fc:	68ba      	ldr	r2, [r7, #8]
 81020fe:	68fb      	ldr	r3, [r7, #12]
 8102100:	1ad3      	subs	r3, r2, r3
 8102102:	4a1f      	ldr	r2, [pc, #124]	@ (8102180 <prvHeapInit+0xac>)
 8102104:	4413      	add	r3, r2
 8102106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8102108:	68fb      	ldr	r3, [r7, #12]
 810210a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810210c:	4a1d      	ldr	r2, [pc, #116]	@ (8102184 <prvHeapInit+0xb0>)
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8102112:	4b1c      	ldr	r3, [pc, #112]	@ (8102184 <prvHeapInit+0xb0>)
 8102114:	2200      	movs	r2, #0
 8102116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	68ba      	ldr	r2, [r7, #8]
 810211c:	4413      	add	r3, r2
 810211e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8102120:	2208      	movs	r2, #8
 8102122:	68fb      	ldr	r3, [r7, #12]
 8102124:	1a9b      	subs	r3, r3, r2
 8102126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8102128:	68fb      	ldr	r3, [r7, #12]
 810212a:	f023 0307 	bic.w	r3, r3, #7
 810212e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8102130:	68fb      	ldr	r3, [r7, #12]
 8102132:	4a15      	ldr	r2, [pc, #84]	@ (8102188 <prvHeapInit+0xb4>)
 8102134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8102136:	4b14      	ldr	r3, [pc, #80]	@ (8102188 <prvHeapInit+0xb4>)
 8102138:	681b      	ldr	r3, [r3, #0]
 810213a:	2200      	movs	r2, #0
 810213c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810213e:	4b12      	ldr	r3, [pc, #72]	@ (8102188 <prvHeapInit+0xb4>)
 8102140:	681b      	ldr	r3, [r3, #0]
 8102142:	2200      	movs	r2, #0
 8102144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810214a:	683b      	ldr	r3, [r7, #0]
 810214c:	68fa      	ldr	r2, [r7, #12]
 810214e:	1ad2      	subs	r2, r2, r3
 8102150:	683b      	ldr	r3, [r7, #0]
 8102152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8102154:	4b0c      	ldr	r3, [pc, #48]	@ (8102188 <prvHeapInit+0xb4>)
 8102156:	681a      	ldr	r2, [r3, #0]
 8102158:	683b      	ldr	r3, [r7, #0]
 810215a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810215c:	683b      	ldr	r3, [r7, #0]
 810215e:	685b      	ldr	r3, [r3, #4]
 8102160:	4a0a      	ldr	r2, [pc, #40]	@ (810218c <prvHeapInit+0xb8>)
 8102162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8102164:	683b      	ldr	r3, [r7, #0]
 8102166:	685b      	ldr	r3, [r3, #4]
 8102168:	4a09      	ldr	r2, [pc, #36]	@ (8102190 <prvHeapInit+0xbc>)
 810216a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810216c:	4b09      	ldr	r3, [pc, #36]	@ (8102194 <prvHeapInit+0xc0>)
 810216e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8102172:	601a      	str	r2, [r3, #0]
}
 8102174:	bf00      	nop
 8102176:	3714      	adds	r7, #20
 8102178:	46bd      	mov	sp, r7
 810217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810217e:	4770      	bx	lr
 8102180:	10000828 	.word	0x10000828
 8102184:	10004428 	.word	0x10004428
 8102188:	10004430 	.word	0x10004430
 810218c:	10004438 	.word	0x10004438
 8102190:	10004434 	.word	0x10004434
 8102194:	10004444 	.word	0x10004444

08102198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8102198:	b480      	push	{r7}
 810219a:	b085      	sub	sp, #20
 810219c:	af00      	add	r7, sp, #0
 810219e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81021a0:	4b28      	ldr	r3, [pc, #160]	@ (8102244 <prvInsertBlockIntoFreeList+0xac>)
 81021a2:	60fb      	str	r3, [r7, #12]
 81021a4:	e002      	b.n	81021ac <prvInsertBlockIntoFreeList+0x14>
 81021a6:	68fb      	ldr	r3, [r7, #12]
 81021a8:	681b      	ldr	r3, [r3, #0]
 81021aa:	60fb      	str	r3, [r7, #12]
 81021ac:	68fb      	ldr	r3, [r7, #12]
 81021ae:	681b      	ldr	r3, [r3, #0]
 81021b0:	687a      	ldr	r2, [r7, #4]
 81021b2:	429a      	cmp	r2, r3
 81021b4:	d8f7      	bhi.n	81021a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81021b6:	68fb      	ldr	r3, [r7, #12]
 81021b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81021ba:	68fb      	ldr	r3, [r7, #12]
 81021bc:	685b      	ldr	r3, [r3, #4]
 81021be:	68ba      	ldr	r2, [r7, #8]
 81021c0:	4413      	add	r3, r2
 81021c2:	687a      	ldr	r2, [r7, #4]
 81021c4:	429a      	cmp	r2, r3
 81021c6:	d108      	bne.n	81021da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81021c8:	68fb      	ldr	r3, [r7, #12]
 81021ca:	685a      	ldr	r2, [r3, #4]
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	685b      	ldr	r3, [r3, #4]
 81021d0:	441a      	add	r2, r3
 81021d2:	68fb      	ldr	r3, [r7, #12]
 81021d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81021d6:	68fb      	ldr	r3, [r7, #12]
 81021d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81021da:	687b      	ldr	r3, [r7, #4]
 81021dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81021de:	687b      	ldr	r3, [r7, #4]
 81021e0:	685b      	ldr	r3, [r3, #4]
 81021e2:	68ba      	ldr	r2, [r7, #8]
 81021e4:	441a      	add	r2, r3
 81021e6:	68fb      	ldr	r3, [r7, #12]
 81021e8:	681b      	ldr	r3, [r3, #0]
 81021ea:	429a      	cmp	r2, r3
 81021ec:	d118      	bne.n	8102220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81021ee:	68fb      	ldr	r3, [r7, #12]
 81021f0:	681a      	ldr	r2, [r3, #0]
 81021f2:	4b15      	ldr	r3, [pc, #84]	@ (8102248 <prvInsertBlockIntoFreeList+0xb0>)
 81021f4:	681b      	ldr	r3, [r3, #0]
 81021f6:	429a      	cmp	r2, r3
 81021f8:	d00d      	beq.n	8102216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	685a      	ldr	r2, [r3, #4]
 81021fe:	68fb      	ldr	r3, [r7, #12]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	685b      	ldr	r3, [r3, #4]
 8102204:	441a      	add	r2, r3
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810220a:	68fb      	ldr	r3, [r7, #12]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	681a      	ldr	r2, [r3, #0]
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	601a      	str	r2, [r3, #0]
 8102214:	e008      	b.n	8102228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8102216:	4b0c      	ldr	r3, [pc, #48]	@ (8102248 <prvInsertBlockIntoFreeList+0xb0>)
 8102218:	681a      	ldr	r2, [r3, #0]
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	601a      	str	r2, [r3, #0]
 810221e:	e003      	b.n	8102228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8102220:	68fb      	ldr	r3, [r7, #12]
 8102222:	681a      	ldr	r2, [r3, #0]
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8102228:	68fa      	ldr	r2, [r7, #12]
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	429a      	cmp	r2, r3
 810222e:	d002      	beq.n	8102236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8102230:	68fb      	ldr	r3, [r7, #12]
 8102232:	687a      	ldr	r2, [r7, #4]
 8102234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102236:	bf00      	nop
 8102238:	3714      	adds	r7, #20
 810223a:	46bd      	mov	sp, r7
 810223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102240:	4770      	bx	lr
 8102242:	bf00      	nop
 8102244:	10004428 	.word	0x10004428
 8102248:	10004430 	.word	0x10004430

0810224c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810224c:	b480      	push	{r7}
 810224e:	b083      	sub	sp, #12
 8102250:	af00      	add	r7, sp, #0
 8102252:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	f103 0208 	add.w	r2, r3, #8
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	f04f 32ff 	mov.w	r2, #4294967295
 8102264:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	f103 0208 	add.w	r2, r3, #8
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	f103 0208 	add.w	r2, r3, #8
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	2200      	movs	r2, #0
 810227e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8102280:	bf00      	nop
 8102282:	370c      	adds	r7, #12
 8102284:	46bd      	mov	sp, r7
 8102286:	f85d 7b04 	ldr.w	r7, [sp], #4
 810228a:	4770      	bx	lr

0810228c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810228c:	b480      	push	{r7}
 810228e:	b083      	sub	sp, #12
 8102290:	af00      	add	r7, sp, #0
 8102292:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	2200      	movs	r2, #0
 8102298:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810229a:	bf00      	nop
 810229c:	370c      	adds	r7, #12
 810229e:	46bd      	mov	sp, r7
 81022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a4:	4770      	bx	lr

081022a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81022a6:	b480      	push	{r7}
 81022a8:	b085      	sub	sp, #20
 81022aa:	af00      	add	r7, sp, #0
 81022ac:	6078      	str	r0, [r7, #4]
 81022ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	685b      	ldr	r3, [r3, #4]
 81022b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81022b6:	683b      	ldr	r3, [r7, #0]
 81022b8:	68fa      	ldr	r2, [r7, #12]
 81022ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81022bc:	68fb      	ldr	r3, [r7, #12]
 81022be:	689a      	ldr	r2, [r3, #8]
 81022c0:	683b      	ldr	r3, [r7, #0]
 81022c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81022c4:	68fb      	ldr	r3, [r7, #12]
 81022c6:	689b      	ldr	r3, [r3, #8]
 81022c8:	683a      	ldr	r2, [r7, #0]
 81022ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81022cc:	68fb      	ldr	r3, [r7, #12]
 81022ce:	683a      	ldr	r2, [r7, #0]
 81022d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81022d2:	683b      	ldr	r3, [r7, #0]
 81022d4:	687a      	ldr	r2, [r7, #4]
 81022d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	681b      	ldr	r3, [r3, #0]
 81022dc:	1c5a      	adds	r2, r3, #1
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	601a      	str	r2, [r3, #0]
}
 81022e2:	bf00      	nop
 81022e4:	3714      	adds	r7, #20
 81022e6:	46bd      	mov	sp, r7
 81022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ec:	4770      	bx	lr

081022ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81022ee:	b480      	push	{r7}
 81022f0:	b085      	sub	sp, #20
 81022f2:	af00      	add	r7, sp, #0
 81022f4:	6078      	str	r0, [r7, #4]
 81022f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81022f8:	683b      	ldr	r3, [r7, #0]
 81022fa:	681b      	ldr	r3, [r3, #0]
 81022fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81022fe:	68bb      	ldr	r3, [r7, #8]
 8102300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102304:	d103      	bne.n	810230e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	691b      	ldr	r3, [r3, #16]
 810230a:	60fb      	str	r3, [r7, #12]
 810230c:	e00c      	b.n	8102328 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	3308      	adds	r3, #8
 8102312:	60fb      	str	r3, [r7, #12]
 8102314:	e002      	b.n	810231c <vListInsert+0x2e>
 8102316:	68fb      	ldr	r3, [r7, #12]
 8102318:	685b      	ldr	r3, [r3, #4]
 810231a:	60fb      	str	r3, [r7, #12]
 810231c:	68fb      	ldr	r3, [r7, #12]
 810231e:	685b      	ldr	r3, [r3, #4]
 8102320:	681b      	ldr	r3, [r3, #0]
 8102322:	68ba      	ldr	r2, [r7, #8]
 8102324:	429a      	cmp	r2, r3
 8102326:	d2f6      	bcs.n	8102316 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8102328:	68fb      	ldr	r3, [r7, #12]
 810232a:	685a      	ldr	r2, [r3, #4]
 810232c:	683b      	ldr	r3, [r7, #0]
 810232e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8102330:	683b      	ldr	r3, [r7, #0]
 8102332:	685b      	ldr	r3, [r3, #4]
 8102334:	683a      	ldr	r2, [r7, #0]
 8102336:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8102338:	683b      	ldr	r3, [r7, #0]
 810233a:	68fa      	ldr	r2, [r7, #12]
 810233c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810233e:	68fb      	ldr	r3, [r7, #12]
 8102340:	683a      	ldr	r2, [r7, #0]
 8102342:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8102344:	683b      	ldr	r3, [r7, #0]
 8102346:	687a      	ldr	r2, [r7, #4]
 8102348:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	1c5a      	adds	r2, r3, #1
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	601a      	str	r2, [r3, #0]
}
 8102354:	bf00      	nop
 8102356:	3714      	adds	r7, #20
 8102358:	46bd      	mov	sp, r7
 810235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810235e:	4770      	bx	lr

08102360 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8102360:	b480      	push	{r7}
 8102362:	b085      	sub	sp, #20
 8102364:	af00      	add	r7, sp, #0
 8102366:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	691b      	ldr	r3, [r3, #16]
 810236c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	685b      	ldr	r3, [r3, #4]
 8102372:	687a      	ldr	r2, [r7, #4]
 8102374:	6892      	ldr	r2, [r2, #8]
 8102376:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	689b      	ldr	r3, [r3, #8]
 810237c:	687a      	ldr	r2, [r7, #4]
 810237e:	6852      	ldr	r2, [r2, #4]
 8102380:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8102382:	68fb      	ldr	r3, [r7, #12]
 8102384:	685b      	ldr	r3, [r3, #4]
 8102386:	687a      	ldr	r2, [r7, #4]
 8102388:	429a      	cmp	r2, r3
 810238a:	d103      	bne.n	8102394 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	689a      	ldr	r2, [r3, #8]
 8102390:	68fb      	ldr	r3, [r7, #12]
 8102392:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	2200      	movs	r2, #0
 8102398:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810239a:	68fb      	ldr	r3, [r7, #12]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	1e5a      	subs	r2, r3, #1
 81023a0:	68fb      	ldr	r3, [r7, #12]
 81023a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81023a4:	68fb      	ldr	r3, [r7, #12]
 81023a6:	681b      	ldr	r3, [r3, #0]
}
 81023a8:	4618      	mov	r0, r3
 81023aa:	3714      	adds	r7, #20
 81023ac:	46bd      	mov	sp, r7
 81023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023b2:	4770      	bx	lr

081023b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81023b4:	b480      	push	{r7}
 81023b6:	b085      	sub	sp, #20
 81023b8:	af00      	add	r7, sp, #0
 81023ba:	60f8      	str	r0, [r7, #12]
 81023bc:	60b9      	str	r1, [r7, #8]
 81023be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81023c0:	68fb      	ldr	r3, [r7, #12]
 81023c2:	3b04      	subs	r3, #4
 81023c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81023c6:	68fb      	ldr	r3, [r7, #12]
 81023c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81023cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81023ce:	68fb      	ldr	r3, [r7, #12]
 81023d0:	3b04      	subs	r3, #4
 81023d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81023d4:	68bb      	ldr	r3, [r7, #8]
 81023d6:	f023 0201 	bic.w	r2, r3, #1
 81023da:	68fb      	ldr	r3, [r7, #12]
 81023dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81023de:	68fb      	ldr	r3, [r7, #12]
 81023e0:	3b04      	subs	r3, #4
 81023e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81023e4:	4a0c      	ldr	r2, [pc, #48]	@ (8102418 <pxPortInitialiseStack+0x64>)
 81023e6:	68fb      	ldr	r3, [r7, #12]
 81023e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81023ea:	68fb      	ldr	r3, [r7, #12]
 81023ec:	3b14      	subs	r3, #20
 81023ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81023f0:	687a      	ldr	r2, [r7, #4]
 81023f2:	68fb      	ldr	r3, [r7, #12]
 81023f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81023f6:	68fb      	ldr	r3, [r7, #12]
 81023f8:	3b04      	subs	r3, #4
 81023fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81023fc:	68fb      	ldr	r3, [r7, #12]
 81023fe:	f06f 0202 	mvn.w	r2, #2
 8102402:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8102404:	68fb      	ldr	r3, [r7, #12]
 8102406:	3b20      	subs	r3, #32
 8102408:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810240a:	68fb      	ldr	r3, [r7, #12]
}
 810240c:	4618      	mov	r0, r3
 810240e:	3714      	adds	r7, #20
 8102410:	46bd      	mov	sp, r7
 8102412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102416:	4770      	bx	lr
 8102418:	0810241d 	.word	0x0810241d

0810241c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810241c:	b480      	push	{r7}
 810241e:	b085      	sub	sp, #20
 8102420:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8102422:	2300      	movs	r3, #0
 8102424:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8102426:	4b13      	ldr	r3, [pc, #76]	@ (8102474 <prvTaskExitError+0x58>)
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810242e:	d00b      	beq.n	8102448 <prvTaskExitError+0x2c>
	__asm volatile
 8102430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102434:	f383 8811 	msr	BASEPRI, r3
 8102438:	f3bf 8f6f 	isb	sy
 810243c:	f3bf 8f4f 	dsb	sy
 8102440:	60fb      	str	r3, [r7, #12]
}
 8102442:	bf00      	nop
 8102444:	bf00      	nop
 8102446:	e7fd      	b.n	8102444 <prvTaskExitError+0x28>
	__asm volatile
 8102448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810244c:	f383 8811 	msr	BASEPRI, r3
 8102450:	f3bf 8f6f 	isb	sy
 8102454:	f3bf 8f4f 	dsb	sy
 8102458:	60bb      	str	r3, [r7, #8]
}
 810245a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810245c:	bf00      	nop
 810245e:	687b      	ldr	r3, [r7, #4]
 8102460:	2b00      	cmp	r3, #0
 8102462:	d0fc      	beq.n	810245e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8102464:	bf00      	nop
 8102466:	bf00      	nop
 8102468:	3714      	adds	r7, #20
 810246a:	46bd      	mov	sp, r7
 810246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102470:	4770      	bx	lr
 8102472:	bf00      	nop
 8102474:	10000010 	.word	0x10000010
	...

08102480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8102480:	4b07      	ldr	r3, [pc, #28]	@ (81024a0 <pxCurrentTCBConst2>)
 8102482:	6819      	ldr	r1, [r3, #0]
 8102484:	6808      	ldr	r0, [r1, #0]
 8102486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810248a:	f380 8809 	msr	PSP, r0
 810248e:	f3bf 8f6f 	isb	sy
 8102492:	f04f 0000 	mov.w	r0, #0
 8102496:	f380 8811 	msr	BASEPRI, r0
 810249a:	4770      	bx	lr
 810249c:	f3af 8000 	nop.w

081024a0 <pxCurrentTCBConst2>:
 81024a0:	10004490 	.word	0x10004490
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81024a4:	bf00      	nop
 81024a6:	bf00      	nop

081024a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81024a8:	4808      	ldr	r0, [pc, #32]	@ (81024cc <prvPortStartFirstTask+0x24>)
 81024aa:	6800      	ldr	r0, [r0, #0]
 81024ac:	6800      	ldr	r0, [r0, #0]
 81024ae:	f380 8808 	msr	MSP, r0
 81024b2:	f04f 0000 	mov.w	r0, #0
 81024b6:	f380 8814 	msr	CONTROL, r0
 81024ba:	b662      	cpsie	i
 81024bc:	b661      	cpsie	f
 81024be:	f3bf 8f4f 	dsb	sy
 81024c2:	f3bf 8f6f 	isb	sy
 81024c6:	df00      	svc	0
 81024c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81024ca:	bf00      	nop
 81024cc:	e000ed08 	.word	0xe000ed08

081024d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81024d0:	b580      	push	{r7, lr}
 81024d2:	b086      	sub	sp, #24
 81024d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81024d6:	4b47      	ldr	r3, [pc, #284]	@ (81025f4 <xPortStartScheduler+0x124>)
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	4a47      	ldr	r2, [pc, #284]	@ (81025f8 <xPortStartScheduler+0x128>)
 81024dc:	4293      	cmp	r3, r2
 81024de:	d10b      	bne.n	81024f8 <xPortStartScheduler+0x28>
	__asm volatile
 81024e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81024e4:	f383 8811 	msr	BASEPRI, r3
 81024e8:	f3bf 8f6f 	isb	sy
 81024ec:	f3bf 8f4f 	dsb	sy
 81024f0:	613b      	str	r3, [r7, #16]
}
 81024f2:	bf00      	nop
 81024f4:	bf00      	nop
 81024f6:	e7fd      	b.n	81024f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81024f8:	4b3e      	ldr	r3, [pc, #248]	@ (81025f4 <xPortStartScheduler+0x124>)
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	4a3f      	ldr	r2, [pc, #252]	@ (81025fc <xPortStartScheduler+0x12c>)
 81024fe:	4293      	cmp	r3, r2
 8102500:	d10b      	bne.n	810251a <xPortStartScheduler+0x4a>
	__asm volatile
 8102502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102506:	f383 8811 	msr	BASEPRI, r3
 810250a:	f3bf 8f6f 	isb	sy
 810250e:	f3bf 8f4f 	dsb	sy
 8102512:	60fb      	str	r3, [r7, #12]
}
 8102514:	bf00      	nop
 8102516:	bf00      	nop
 8102518:	e7fd      	b.n	8102516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810251a:	4b39      	ldr	r3, [pc, #228]	@ (8102600 <xPortStartScheduler+0x130>)
 810251c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810251e:	697b      	ldr	r3, [r7, #20]
 8102520:	781b      	ldrb	r3, [r3, #0]
 8102522:	b2db      	uxtb	r3, r3
 8102524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8102526:	697b      	ldr	r3, [r7, #20]
 8102528:	22ff      	movs	r2, #255	@ 0xff
 810252a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810252c:	697b      	ldr	r3, [r7, #20]
 810252e:	781b      	ldrb	r3, [r3, #0]
 8102530:	b2db      	uxtb	r3, r3
 8102532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8102534:	78fb      	ldrb	r3, [r7, #3]
 8102536:	b2db      	uxtb	r3, r3
 8102538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810253c:	b2da      	uxtb	r2, r3
 810253e:	4b31      	ldr	r3, [pc, #196]	@ (8102604 <xPortStartScheduler+0x134>)
 8102540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8102542:	4b31      	ldr	r3, [pc, #196]	@ (8102608 <xPortStartScheduler+0x138>)
 8102544:	2207      	movs	r2, #7
 8102546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8102548:	e009      	b.n	810255e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810254a:	4b2f      	ldr	r3, [pc, #188]	@ (8102608 <xPortStartScheduler+0x138>)
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	3b01      	subs	r3, #1
 8102550:	4a2d      	ldr	r2, [pc, #180]	@ (8102608 <xPortStartScheduler+0x138>)
 8102552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8102554:	78fb      	ldrb	r3, [r7, #3]
 8102556:	b2db      	uxtb	r3, r3
 8102558:	005b      	lsls	r3, r3, #1
 810255a:	b2db      	uxtb	r3, r3
 810255c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810255e:	78fb      	ldrb	r3, [r7, #3]
 8102560:	b2db      	uxtb	r3, r3
 8102562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102566:	2b80      	cmp	r3, #128	@ 0x80
 8102568:	d0ef      	beq.n	810254a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810256a:	4b27      	ldr	r3, [pc, #156]	@ (8102608 <xPortStartScheduler+0x138>)
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	f1c3 0307 	rsb	r3, r3, #7
 8102572:	2b04      	cmp	r3, #4
 8102574:	d00b      	beq.n	810258e <xPortStartScheduler+0xbe>
	__asm volatile
 8102576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810257a:	f383 8811 	msr	BASEPRI, r3
 810257e:	f3bf 8f6f 	isb	sy
 8102582:	f3bf 8f4f 	dsb	sy
 8102586:	60bb      	str	r3, [r7, #8]
}
 8102588:	bf00      	nop
 810258a:	bf00      	nop
 810258c:	e7fd      	b.n	810258a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810258e:	4b1e      	ldr	r3, [pc, #120]	@ (8102608 <xPortStartScheduler+0x138>)
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	021b      	lsls	r3, r3, #8
 8102594:	4a1c      	ldr	r2, [pc, #112]	@ (8102608 <xPortStartScheduler+0x138>)
 8102596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8102598:	4b1b      	ldr	r3, [pc, #108]	@ (8102608 <xPortStartScheduler+0x138>)
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81025a0:	4a19      	ldr	r2, [pc, #100]	@ (8102608 <xPortStartScheduler+0x138>)
 81025a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	b2da      	uxtb	r2, r3
 81025a8:	697b      	ldr	r3, [r7, #20]
 81025aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81025ac:	4b17      	ldr	r3, [pc, #92]	@ (810260c <xPortStartScheduler+0x13c>)
 81025ae:	681b      	ldr	r3, [r3, #0]
 81025b0:	4a16      	ldr	r2, [pc, #88]	@ (810260c <xPortStartScheduler+0x13c>)
 81025b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81025b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81025b8:	4b14      	ldr	r3, [pc, #80]	@ (810260c <xPortStartScheduler+0x13c>)
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	4a13      	ldr	r2, [pc, #76]	@ (810260c <xPortStartScheduler+0x13c>)
 81025be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 81025c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81025c4:	f000 f8da 	bl	810277c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81025c8:	4b11      	ldr	r3, [pc, #68]	@ (8102610 <xPortStartScheduler+0x140>)
 81025ca:	2200      	movs	r2, #0
 81025cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81025ce:	f000 f8f9 	bl	81027c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81025d2:	4b10      	ldr	r3, [pc, #64]	@ (8102614 <xPortStartScheduler+0x144>)
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	4a0f      	ldr	r2, [pc, #60]	@ (8102614 <xPortStartScheduler+0x144>)
 81025d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 81025dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81025de:	f7ff ff63 	bl	81024a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81025e2:	f001 f9ef 	bl	81039c4 <vTaskSwitchContext>
	prvTaskExitError();
 81025e6:	f7ff ff19 	bl	810241c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81025ea:	2300      	movs	r3, #0
}
 81025ec:	4618      	mov	r0, r3
 81025ee:	3718      	adds	r7, #24
 81025f0:	46bd      	mov	sp, r7
 81025f2:	bd80      	pop	{r7, pc}
 81025f4:	e000ed00 	.word	0xe000ed00
 81025f8:	410fc271 	.word	0x410fc271
 81025fc:	410fc270 	.word	0x410fc270
 8102600:	e000e400 	.word	0xe000e400
 8102604:	10004448 	.word	0x10004448
 8102608:	1000444c 	.word	0x1000444c
 810260c:	e000ed20 	.word	0xe000ed20
 8102610:	10000010 	.word	0x10000010
 8102614:	e000ef34 	.word	0xe000ef34

08102618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8102618:	b480      	push	{r7}
 810261a:	b083      	sub	sp, #12
 810261c:	af00      	add	r7, sp, #0
	__asm volatile
 810261e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102622:	f383 8811 	msr	BASEPRI, r3
 8102626:	f3bf 8f6f 	isb	sy
 810262a:	f3bf 8f4f 	dsb	sy
 810262e:	607b      	str	r3, [r7, #4]
}
 8102630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8102632:	4b10      	ldr	r3, [pc, #64]	@ (8102674 <vPortEnterCritical+0x5c>)
 8102634:	681b      	ldr	r3, [r3, #0]
 8102636:	3301      	adds	r3, #1
 8102638:	4a0e      	ldr	r2, [pc, #56]	@ (8102674 <vPortEnterCritical+0x5c>)
 810263a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810263c:	4b0d      	ldr	r3, [pc, #52]	@ (8102674 <vPortEnterCritical+0x5c>)
 810263e:	681b      	ldr	r3, [r3, #0]
 8102640:	2b01      	cmp	r3, #1
 8102642:	d110      	bne.n	8102666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8102644:	4b0c      	ldr	r3, [pc, #48]	@ (8102678 <vPortEnterCritical+0x60>)
 8102646:	681b      	ldr	r3, [r3, #0]
 8102648:	b2db      	uxtb	r3, r3
 810264a:	2b00      	cmp	r3, #0
 810264c:	d00b      	beq.n	8102666 <vPortEnterCritical+0x4e>
	__asm volatile
 810264e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102652:	f383 8811 	msr	BASEPRI, r3
 8102656:	f3bf 8f6f 	isb	sy
 810265a:	f3bf 8f4f 	dsb	sy
 810265e:	603b      	str	r3, [r7, #0]
}
 8102660:	bf00      	nop
 8102662:	bf00      	nop
 8102664:	e7fd      	b.n	8102662 <vPortEnterCritical+0x4a>
	}
}
 8102666:	bf00      	nop
 8102668:	370c      	adds	r7, #12
 810266a:	46bd      	mov	sp, r7
 810266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102670:	4770      	bx	lr
 8102672:	bf00      	nop
 8102674:	10000010 	.word	0x10000010
 8102678:	e000ed04 	.word	0xe000ed04

0810267c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810267c:	b480      	push	{r7}
 810267e:	b083      	sub	sp, #12
 8102680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8102682:	4b12      	ldr	r3, [pc, #72]	@ (81026cc <vPortExitCritical+0x50>)
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	2b00      	cmp	r3, #0
 8102688:	d10b      	bne.n	81026a2 <vPortExitCritical+0x26>
	__asm volatile
 810268a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810268e:	f383 8811 	msr	BASEPRI, r3
 8102692:	f3bf 8f6f 	isb	sy
 8102696:	f3bf 8f4f 	dsb	sy
 810269a:	607b      	str	r3, [r7, #4]
}
 810269c:	bf00      	nop
 810269e:	bf00      	nop
 81026a0:	e7fd      	b.n	810269e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81026a2:	4b0a      	ldr	r3, [pc, #40]	@ (81026cc <vPortExitCritical+0x50>)
 81026a4:	681b      	ldr	r3, [r3, #0]
 81026a6:	3b01      	subs	r3, #1
 81026a8:	4a08      	ldr	r2, [pc, #32]	@ (81026cc <vPortExitCritical+0x50>)
 81026aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81026ac:	4b07      	ldr	r3, [pc, #28]	@ (81026cc <vPortExitCritical+0x50>)
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	2b00      	cmp	r3, #0
 81026b2:	d105      	bne.n	81026c0 <vPortExitCritical+0x44>
 81026b4:	2300      	movs	r3, #0
 81026b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81026b8:	683b      	ldr	r3, [r7, #0]
 81026ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81026be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81026c0:	bf00      	nop
 81026c2:	370c      	adds	r7, #12
 81026c4:	46bd      	mov	sp, r7
 81026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026ca:	4770      	bx	lr
 81026cc:	10000010 	.word	0x10000010

081026d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81026d0:	f3ef 8009 	mrs	r0, PSP
 81026d4:	f3bf 8f6f 	isb	sy
 81026d8:	4b15      	ldr	r3, [pc, #84]	@ (8102730 <pxCurrentTCBConst>)
 81026da:	681a      	ldr	r2, [r3, #0]
 81026dc:	f01e 0f10 	tst.w	lr, #16
 81026e0:	bf08      	it	eq
 81026e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81026e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81026ea:	6010      	str	r0, [r2, #0]
 81026ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 81026f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 81026f4:	f380 8811 	msr	BASEPRI, r0
 81026f8:	f3bf 8f4f 	dsb	sy
 81026fc:	f3bf 8f6f 	isb	sy
 8102700:	f001 f960 	bl	81039c4 <vTaskSwitchContext>
 8102704:	f04f 0000 	mov.w	r0, #0
 8102708:	f380 8811 	msr	BASEPRI, r0
 810270c:	bc09      	pop	{r0, r3}
 810270e:	6819      	ldr	r1, [r3, #0]
 8102710:	6808      	ldr	r0, [r1, #0]
 8102712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102716:	f01e 0f10 	tst.w	lr, #16
 810271a:	bf08      	it	eq
 810271c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8102720:	f380 8809 	msr	PSP, r0
 8102724:	f3bf 8f6f 	isb	sy
 8102728:	4770      	bx	lr
 810272a:	bf00      	nop
 810272c:	f3af 8000 	nop.w

08102730 <pxCurrentTCBConst>:
 8102730:	10004490 	.word	0x10004490
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8102734:	bf00      	nop
 8102736:	bf00      	nop

08102738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8102738:	b580      	push	{r7, lr}
 810273a:	b082      	sub	sp, #8
 810273c:	af00      	add	r7, sp, #0
	__asm volatile
 810273e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102742:	f383 8811 	msr	BASEPRI, r3
 8102746:	f3bf 8f6f 	isb	sy
 810274a:	f3bf 8f4f 	dsb	sy
 810274e:	607b      	str	r3, [r7, #4]
}
 8102750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8102752:	f001 f87d 	bl	8103850 <xTaskIncrementTick>
 8102756:	4603      	mov	r3, r0
 8102758:	2b00      	cmp	r3, #0
 810275a:	d003      	beq.n	8102764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810275c:	4b06      	ldr	r3, [pc, #24]	@ (8102778 <xPortSysTickHandler+0x40>)
 810275e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102762:	601a      	str	r2, [r3, #0]
 8102764:	2300      	movs	r3, #0
 8102766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8102768:	683b      	ldr	r3, [r7, #0]
 810276a:	f383 8811 	msr	BASEPRI, r3
}
 810276e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8102770:	bf00      	nop
 8102772:	3708      	adds	r7, #8
 8102774:	46bd      	mov	sp, r7
 8102776:	bd80      	pop	{r7, pc}
 8102778:	e000ed04 	.word	0xe000ed04

0810277c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810277c:	b480      	push	{r7}
 810277e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8102780:	4b0b      	ldr	r3, [pc, #44]	@ (81027b0 <vPortSetupTimerInterrupt+0x34>)
 8102782:	2200      	movs	r2, #0
 8102784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8102786:	4b0b      	ldr	r3, [pc, #44]	@ (81027b4 <vPortSetupTimerInterrupt+0x38>)
 8102788:	2200      	movs	r2, #0
 810278a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810278c:	4b0a      	ldr	r3, [pc, #40]	@ (81027b8 <vPortSetupTimerInterrupt+0x3c>)
 810278e:	681b      	ldr	r3, [r3, #0]
 8102790:	4a0a      	ldr	r2, [pc, #40]	@ (81027bc <vPortSetupTimerInterrupt+0x40>)
 8102792:	fba2 2303 	umull	r2, r3, r2, r3
 8102796:	099b      	lsrs	r3, r3, #6
 8102798:	4a09      	ldr	r2, [pc, #36]	@ (81027c0 <vPortSetupTimerInterrupt+0x44>)
 810279a:	3b01      	subs	r3, #1
 810279c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810279e:	4b04      	ldr	r3, [pc, #16]	@ (81027b0 <vPortSetupTimerInterrupt+0x34>)
 81027a0:	2207      	movs	r2, #7
 81027a2:	601a      	str	r2, [r3, #0]
}
 81027a4:	bf00      	nop
 81027a6:	46bd      	mov	sp, r7
 81027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ac:	4770      	bx	lr
 81027ae:	bf00      	nop
 81027b0:	e000e010 	.word	0xe000e010
 81027b4:	e000e018 	.word	0xe000e018
 81027b8:	10000004 	.word	0x10000004
 81027bc:	10624dd3 	.word	0x10624dd3
 81027c0:	e000e014 	.word	0xe000e014

081027c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81027c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 81027d4 <vPortEnableVFP+0x10>
 81027c8:	6801      	ldr	r1, [r0, #0]
 81027ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81027ce:	6001      	str	r1, [r0, #0]
 81027d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81027d2:	bf00      	nop
 81027d4:	e000ed88 	.word	0xe000ed88

081027d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81027d8:	b480      	push	{r7}
 81027da:	b085      	sub	sp, #20
 81027dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81027de:	f3ef 8305 	mrs	r3, IPSR
 81027e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81027e4:	68fb      	ldr	r3, [r7, #12]
 81027e6:	2b0f      	cmp	r3, #15
 81027e8:	d915      	bls.n	8102816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81027ea:	4a18      	ldr	r2, [pc, #96]	@ (810284c <vPortValidateInterruptPriority+0x74>)
 81027ec:	68fb      	ldr	r3, [r7, #12]
 81027ee:	4413      	add	r3, r2
 81027f0:	781b      	ldrb	r3, [r3, #0]
 81027f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81027f4:	4b16      	ldr	r3, [pc, #88]	@ (8102850 <vPortValidateInterruptPriority+0x78>)
 81027f6:	781b      	ldrb	r3, [r3, #0]
 81027f8:	7afa      	ldrb	r2, [r7, #11]
 81027fa:	429a      	cmp	r2, r3
 81027fc:	d20b      	bcs.n	8102816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 81027fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102802:	f383 8811 	msr	BASEPRI, r3
 8102806:	f3bf 8f6f 	isb	sy
 810280a:	f3bf 8f4f 	dsb	sy
 810280e:	607b      	str	r3, [r7, #4]
}
 8102810:	bf00      	nop
 8102812:	bf00      	nop
 8102814:	e7fd      	b.n	8102812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8102816:	4b0f      	ldr	r3, [pc, #60]	@ (8102854 <vPortValidateInterruptPriority+0x7c>)
 8102818:	681b      	ldr	r3, [r3, #0]
 810281a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810281e:	4b0e      	ldr	r3, [pc, #56]	@ (8102858 <vPortValidateInterruptPriority+0x80>)
 8102820:	681b      	ldr	r3, [r3, #0]
 8102822:	429a      	cmp	r2, r3
 8102824:	d90b      	bls.n	810283e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8102826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810282a:	f383 8811 	msr	BASEPRI, r3
 810282e:	f3bf 8f6f 	isb	sy
 8102832:	f3bf 8f4f 	dsb	sy
 8102836:	603b      	str	r3, [r7, #0]
}
 8102838:	bf00      	nop
 810283a:	bf00      	nop
 810283c:	e7fd      	b.n	810283a <vPortValidateInterruptPriority+0x62>
	}
 810283e:	bf00      	nop
 8102840:	3714      	adds	r7, #20
 8102842:	46bd      	mov	sp, r7
 8102844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102848:	4770      	bx	lr
 810284a:	bf00      	nop
 810284c:	e000e3f0 	.word	0xe000e3f0
 8102850:	10004448 	.word	0x10004448
 8102854:	e000ed0c 	.word	0xe000ed0c
 8102858:	1000444c 	.word	0x1000444c

0810285c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810285c:	b580      	push	{r7, lr}
 810285e:	b084      	sub	sp, #16
 8102860:	af00      	add	r7, sp, #0
 8102862:	6078      	str	r0, [r7, #4]
 8102864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810286a:	68fb      	ldr	r3, [r7, #12]
 810286c:	2b00      	cmp	r3, #0
 810286e:	d10b      	bne.n	8102888 <xQueueGenericReset+0x2c>
	__asm volatile
 8102870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102874:	f383 8811 	msr	BASEPRI, r3
 8102878:	f3bf 8f6f 	isb	sy
 810287c:	f3bf 8f4f 	dsb	sy
 8102880:	60bb      	str	r3, [r7, #8]
}
 8102882:	bf00      	nop
 8102884:	bf00      	nop
 8102886:	e7fd      	b.n	8102884 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8102888:	f7ff fec6 	bl	8102618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810288c:	68fb      	ldr	r3, [r7, #12]
 810288e:	681a      	ldr	r2, [r3, #0]
 8102890:	68fb      	ldr	r3, [r7, #12]
 8102892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102894:	68f9      	ldr	r1, [r7, #12]
 8102896:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8102898:	fb01 f303 	mul.w	r3, r1, r3
 810289c:	441a      	add	r2, r3
 810289e:	68fb      	ldr	r3, [r7, #12]
 81028a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81028a2:	68fb      	ldr	r3, [r7, #12]
 81028a4:	2200      	movs	r2, #0
 81028a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81028a8:	68fb      	ldr	r3, [r7, #12]
 81028aa:	681a      	ldr	r2, [r3, #0]
 81028ac:	68fb      	ldr	r3, [r7, #12]
 81028ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81028b0:	68fb      	ldr	r3, [r7, #12]
 81028b2:	681a      	ldr	r2, [r3, #0]
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81028b8:	3b01      	subs	r3, #1
 81028ba:	68f9      	ldr	r1, [r7, #12]
 81028bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81028be:	fb01 f303 	mul.w	r3, r1, r3
 81028c2:	441a      	add	r2, r3
 81028c4:	68fb      	ldr	r3, [r7, #12]
 81028c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81028c8:	68fb      	ldr	r3, [r7, #12]
 81028ca:	22ff      	movs	r2, #255	@ 0xff
 81028cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81028d0:	68fb      	ldr	r3, [r7, #12]
 81028d2:	22ff      	movs	r2, #255	@ 0xff
 81028d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 81028d8:	683b      	ldr	r3, [r7, #0]
 81028da:	2b00      	cmp	r3, #0
 81028dc:	d114      	bne.n	8102908 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81028de:	68fb      	ldr	r3, [r7, #12]
 81028e0:	691b      	ldr	r3, [r3, #16]
 81028e2:	2b00      	cmp	r3, #0
 81028e4:	d01a      	beq.n	810291c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81028e6:	68fb      	ldr	r3, [r7, #12]
 81028e8:	3310      	adds	r3, #16
 81028ea:	4618      	mov	r0, r3
 81028ec:	f001 f91a 	bl	8103b24 <xTaskRemoveFromEventList>
 81028f0:	4603      	mov	r3, r0
 81028f2:	2b00      	cmp	r3, #0
 81028f4:	d012      	beq.n	810291c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81028f6:	4b0d      	ldr	r3, [pc, #52]	@ (810292c <xQueueGenericReset+0xd0>)
 81028f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81028fc:	601a      	str	r2, [r3, #0]
 81028fe:	f3bf 8f4f 	dsb	sy
 8102902:	f3bf 8f6f 	isb	sy
 8102906:	e009      	b.n	810291c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8102908:	68fb      	ldr	r3, [r7, #12]
 810290a:	3310      	adds	r3, #16
 810290c:	4618      	mov	r0, r3
 810290e:	f7ff fc9d 	bl	810224c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	3324      	adds	r3, #36	@ 0x24
 8102916:	4618      	mov	r0, r3
 8102918:	f7ff fc98 	bl	810224c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810291c:	f7ff feae 	bl	810267c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8102920:	2301      	movs	r3, #1
}
 8102922:	4618      	mov	r0, r3
 8102924:	3710      	adds	r7, #16
 8102926:	46bd      	mov	sp, r7
 8102928:	bd80      	pop	{r7, pc}
 810292a:	bf00      	nop
 810292c:	e000ed04 	.word	0xe000ed04

08102930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8102930:	b580      	push	{r7, lr}
 8102932:	b08e      	sub	sp, #56	@ 0x38
 8102934:	af02      	add	r7, sp, #8
 8102936:	60f8      	str	r0, [r7, #12]
 8102938:	60b9      	str	r1, [r7, #8]
 810293a:	607a      	str	r2, [r7, #4]
 810293c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810293e:	68fb      	ldr	r3, [r7, #12]
 8102940:	2b00      	cmp	r3, #0
 8102942:	d10b      	bne.n	810295c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8102944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102948:	f383 8811 	msr	BASEPRI, r3
 810294c:	f3bf 8f6f 	isb	sy
 8102950:	f3bf 8f4f 	dsb	sy
 8102954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8102956:	bf00      	nop
 8102958:	bf00      	nop
 810295a:	e7fd      	b.n	8102958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810295c:	683b      	ldr	r3, [r7, #0]
 810295e:	2b00      	cmp	r3, #0
 8102960:	d10b      	bne.n	810297a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8102962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102966:	f383 8811 	msr	BASEPRI, r3
 810296a:	f3bf 8f6f 	isb	sy
 810296e:	f3bf 8f4f 	dsb	sy
 8102972:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8102974:	bf00      	nop
 8102976:	bf00      	nop
 8102978:	e7fd      	b.n	8102976 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	2b00      	cmp	r3, #0
 810297e:	d002      	beq.n	8102986 <xQueueGenericCreateStatic+0x56>
 8102980:	68bb      	ldr	r3, [r7, #8]
 8102982:	2b00      	cmp	r3, #0
 8102984:	d001      	beq.n	810298a <xQueueGenericCreateStatic+0x5a>
 8102986:	2301      	movs	r3, #1
 8102988:	e000      	b.n	810298c <xQueueGenericCreateStatic+0x5c>
 810298a:	2300      	movs	r3, #0
 810298c:	2b00      	cmp	r3, #0
 810298e:	d10b      	bne.n	81029a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8102990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102994:	f383 8811 	msr	BASEPRI, r3
 8102998:	f3bf 8f6f 	isb	sy
 810299c:	f3bf 8f4f 	dsb	sy
 81029a0:	623b      	str	r3, [r7, #32]
}
 81029a2:	bf00      	nop
 81029a4:	bf00      	nop
 81029a6:	e7fd      	b.n	81029a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	2b00      	cmp	r3, #0
 81029ac:	d102      	bne.n	81029b4 <xQueueGenericCreateStatic+0x84>
 81029ae:	68bb      	ldr	r3, [r7, #8]
 81029b0:	2b00      	cmp	r3, #0
 81029b2:	d101      	bne.n	81029b8 <xQueueGenericCreateStatic+0x88>
 81029b4:	2301      	movs	r3, #1
 81029b6:	e000      	b.n	81029ba <xQueueGenericCreateStatic+0x8a>
 81029b8:	2300      	movs	r3, #0
 81029ba:	2b00      	cmp	r3, #0
 81029bc:	d10b      	bne.n	81029d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 81029be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81029c2:	f383 8811 	msr	BASEPRI, r3
 81029c6:	f3bf 8f6f 	isb	sy
 81029ca:	f3bf 8f4f 	dsb	sy
 81029ce:	61fb      	str	r3, [r7, #28]
}
 81029d0:	bf00      	nop
 81029d2:	bf00      	nop
 81029d4:	e7fd      	b.n	81029d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81029d6:	2350      	movs	r3, #80	@ 0x50
 81029d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81029da:	697b      	ldr	r3, [r7, #20]
 81029dc:	2b50      	cmp	r3, #80	@ 0x50
 81029de:	d00b      	beq.n	81029f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 81029e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81029e4:	f383 8811 	msr	BASEPRI, r3
 81029e8:	f3bf 8f6f 	isb	sy
 81029ec:	f3bf 8f4f 	dsb	sy
 81029f0:	61bb      	str	r3, [r7, #24]
}
 81029f2:	bf00      	nop
 81029f4:	bf00      	nop
 81029f6:	e7fd      	b.n	81029f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81029f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81029fa:	683b      	ldr	r3, [r7, #0]
 81029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 81029fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102a00:	2b00      	cmp	r3, #0
 8102a02:	d00d      	beq.n	8102a20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8102a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102a06:	2201      	movs	r2, #1
 8102a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8102a0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8102a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102a12:	9300      	str	r3, [sp, #0]
 8102a14:	4613      	mov	r3, r2
 8102a16:	687a      	ldr	r2, [r7, #4]
 8102a18:	68b9      	ldr	r1, [r7, #8]
 8102a1a:	68f8      	ldr	r0, [r7, #12]
 8102a1c:	f000 f805 	bl	8102a2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8102a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8102a22:	4618      	mov	r0, r3
 8102a24:	3730      	adds	r7, #48	@ 0x30
 8102a26:	46bd      	mov	sp, r7
 8102a28:	bd80      	pop	{r7, pc}

08102a2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8102a2a:	b580      	push	{r7, lr}
 8102a2c:	b084      	sub	sp, #16
 8102a2e:	af00      	add	r7, sp, #0
 8102a30:	60f8      	str	r0, [r7, #12]
 8102a32:	60b9      	str	r1, [r7, #8]
 8102a34:	607a      	str	r2, [r7, #4]
 8102a36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8102a38:	68bb      	ldr	r3, [r7, #8]
 8102a3a:	2b00      	cmp	r3, #0
 8102a3c:	d103      	bne.n	8102a46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8102a3e:	69bb      	ldr	r3, [r7, #24]
 8102a40:	69ba      	ldr	r2, [r7, #24]
 8102a42:	601a      	str	r2, [r3, #0]
 8102a44:	e002      	b.n	8102a4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8102a46:	69bb      	ldr	r3, [r7, #24]
 8102a48:	687a      	ldr	r2, [r7, #4]
 8102a4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8102a4c:	69bb      	ldr	r3, [r7, #24]
 8102a4e:	68fa      	ldr	r2, [r7, #12]
 8102a50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8102a52:	69bb      	ldr	r3, [r7, #24]
 8102a54:	68ba      	ldr	r2, [r7, #8]
 8102a56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8102a58:	2101      	movs	r1, #1
 8102a5a:	69b8      	ldr	r0, [r7, #24]
 8102a5c:	f7ff fefe 	bl	810285c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8102a60:	69bb      	ldr	r3, [r7, #24]
 8102a62:	78fa      	ldrb	r2, [r7, #3]
 8102a64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8102a68:	bf00      	nop
 8102a6a:	3710      	adds	r7, #16
 8102a6c:	46bd      	mov	sp, r7
 8102a6e:	bd80      	pop	{r7, pc}

08102a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8102a70:	b580      	push	{r7, lr}
 8102a72:	b08e      	sub	sp, #56	@ 0x38
 8102a74:	af00      	add	r7, sp, #0
 8102a76:	60f8      	str	r0, [r7, #12]
 8102a78:	60b9      	str	r1, [r7, #8]
 8102a7a:	607a      	str	r2, [r7, #4]
 8102a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8102a7e:	2300      	movs	r3, #0
 8102a80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102a82:	68fb      	ldr	r3, [r7, #12]
 8102a84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8102a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102a88:	2b00      	cmp	r3, #0
 8102a8a:	d10b      	bne.n	8102aa4 <xQueueGenericSend+0x34>
	__asm volatile
 8102a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102a90:	f383 8811 	msr	BASEPRI, r3
 8102a94:	f3bf 8f6f 	isb	sy
 8102a98:	f3bf 8f4f 	dsb	sy
 8102a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8102a9e:	bf00      	nop
 8102aa0:	bf00      	nop
 8102aa2:	e7fd      	b.n	8102aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102aa4:	68bb      	ldr	r3, [r7, #8]
 8102aa6:	2b00      	cmp	r3, #0
 8102aa8:	d103      	bne.n	8102ab2 <xQueueGenericSend+0x42>
 8102aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102aae:	2b00      	cmp	r3, #0
 8102ab0:	d101      	bne.n	8102ab6 <xQueueGenericSend+0x46>
 8102ab2:	2301      	movs	r3, #1
 8102ab4:	e000      	b.n	8102ab8 <xQueueGenericSend+0x48>
 8102ab6:	2300      	movs	r3, #0
 8102ab8:	2b00      	cmp	r3, #0
 8102aba:	d10b      	bne.n	8102ad4 <xQueueGenericSend+0x64>
	__asm volatile
 8102abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102ac0:	f383 8811 	msr	BASEPRI, r3
 8102ac4:	f3bf 8f6f 	isb	sy
 8102ac8:	f3bf 8f4f 	dsb	sy
 8102acc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8102ace:	bf00      	nop
 8102ad0:	bf00      	nop
 8102ad2:	e7fd      	b.n	8102ad0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8102ad4:	683b      	ldr	r3, [r7, #0]
 8102ad6:	2b02      	cmp	r3, #2
 8102ad8:	d103      	bne.n	8102ae2 <xQueueGenericSend+0x72>
 8102ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102ade:	2b01      	cmp	r3, #1
 8102ae0:	d101      	bne.n	8102ae6 <xQueueGenericSend+0x76>
 8102ae2:	2301      	movs	r3, #1
 8102ae4:	e000      	b.n	8102ae8 <xQueueGenericSend+0x78>
 8102ae6:	2300      	movs	r3, #0
 8102ae8:	2b00      	cmp	r3, #0
 8102aea:	d10b      	bne.n	8102b04 <xQueueGenericSend+0x94>
	__asm volatile
 8102aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102af0:	f383 8811 	msr	BASEPRI, r3
 8102af4:	f3bf 8f6f 	isb	sy
 8102af8:	f3bf 8f4f 	dsb	sy
 8102afc:	623b      	str	r3, [r7, #32]
}
 8102afe:	bf00      	nop
 8102b00:	bf00      	nop
 8102b02:	e7fd      	b.n	8102b00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8102b04:	f001 f9ce 	bl	8103ea4 <xTaskGetSchedulerState>
 8102b08:	4603      	mov	r3, r0
 8102b0a:	2b00      	cmp	r3, #0
 8102b0c:	d102      	bne.n	8102b14 <xQueueGenericSend+0xa4>
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	2b00      	cmp	r3, #0
 8102b12:	d101      	bne.n	8102b18 <xQueueGenericSend+0xa8>
 8102b14:	2301      	movs	r3, #1
 8102b16:	e000      	b.n	8102b1a <xQueueGenericSend+0xaa>
 8102b18:	2300      	movs	r3, #0
 8102b1a:	2b00      	cmp	r3, #0
 8102b1c:	d10b      	bne.n	8102b36 <xQueueGenericSend+0xc6>
	__asm volatile
 8102b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102b22:	f383 8811 	msr	BASEPRI, r3
 8102b26:	f3bf 8f6f 	isb	sy
 8102b2a:	f3bf 8f4f 	dsb	sy
 8102b2e:	61fb      	str	r3, [r7, #28]
}
 8102b30:	bf00      	nop
 8102b32:	bf00      	nop
 8102b34:	e7fd      	b.n	8102b32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102b36:	f7ff fd6f 	bl	8102618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8102b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102b42:	429a      	cmp	r2, r3
 8102b44:	d302      	bcc.n	8102b4c <xQueueGenericSend+0xdc>
 8102b46:	683b      	ldr	r3, [r7, #0]
 8102b48:	2b02      	cmp	r3, #2
 8102b4a:	d129      	bne.n	8102ba0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102b4c:	683a      	ldr	r2, [r7, #0]
 8102b4e:	68b9      	ldr	r1, [r7, #8]
 8102b50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102b52:	f000 fa0f 	bl	8102f74 <prvCopyDataToQueue>
 8102b56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102b5c:	2b00      	cmp	r3, #0
 8102b5e:	d010      	beq.n	8102b82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102b62:	3324      	adds	r3, #36	@ 0x24
 8102b64:	4618      	mov	r0, r3
 8102b66:	f000 ffdd 	bl	8103b24 <xTaskRemoveFromEventList>
 8102b6a:	4603      	mov	r3, r0
 8102b6c:	2b00      	cmp	r3, #0
 8102b6e:	d013      	beq.n	8102b98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8102b70:	4b3f      	ldr	r3, [pc, #252]	@ (8102c70 <xQueueGenericSend+0x200>)
 8102b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102b76:	601a      	str	r2, [r3, #0]
 8102b78:	f3bf 8f4f 	dsb	sy
 8102b7c:	f3bf 8f6f 	isb	sy
 8102b80:	e00a      	b.n	8102b98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8102b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102b84:	2b00      	cmp	r3, #0
 8102b86:	d007      	beq.n	8102b98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8102b88:	4b39      	ldr	r3, [pc, #228]	@ (8102c70 <xQueueGenericSend+0x200>)
 8102b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102b8e:	601a      	str	r2, [r3, #0]
 8102b90:	f3bf 8f4f 	dsb	sy
 8102b94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8102b98:	f7ff fd70 	bl	810267c <vPortExitCritical>
				return pdPASS;
 8102b9c:	2301      	movs	r3, #1
 8102b9e:	e063      	b.n	8102c68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	2b00      	cmp	r3, #0
 8102ba4:	d103      	bne.n	8102bae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102ba6:	f7ff fd69 	bl	810267c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8102baa:	2300      	movs	r3, #0
 8102bac:	e05c      	b.n	8102c68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102bb0:	2b00      	cmp	r3, #0
 8102bb2:	d106      	bne.n	8102bc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102bb4:	f107 0314 	add.w	r3, r7, #20
 8102bb8:	4618      	mov	r0, r3
 8102bba:	f001 f817 	bl	8103bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102bbe:	2301      	movs	r3, #1
 8102bc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102bc2:	f7ff fd5b 	bl	810267c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8102bc6:	f000 fd87 	bl	81036d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8102bca:	f7ff fd25 	bl	8102618 <vPortEnterCritical>
 8102bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8102bd4:	b25b      	sxtb	r3, r3
 8102bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102bda:	d103      	bne.n	8102be4 <xQueueGenericSend+0x174>
 8102bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bde:	2200      	movs	r2, #0
 8102be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8102be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8102bea:	b25b      	sxtb	r3, r3
 8102bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102bf0:	d103      	bne.n	8102bfa <xQueueGenericSend+0x18a>
 8102bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102bf4:	2200      	movs	r2, #0
 8102bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8102bfa:	f7ff fd3f 	bl	810267c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102bfe:	1d3a      	adds	r2, r7, #4
 8102c00:	f107 0314 	add.w	r3, r7, #20
 8102c04:	4611      	mov	r1, r2
 8102c06:	4618      	mov	r0, r3
 8102c08:	f001 f806 	bl	8103c18 <xTaskCheckForTimeOut>
 8102c0c:	4603      	mov	r3, r0
 8102c0e:	2b00      	cmp	r3, #0
 8102c10:	d124      	bne.n	8102c5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8102c12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102c14:	f000 faa6 	bl	8103164 <prvIsQueueFull>
 8102c18:	4603      	mov	r3, r0
 8102c1a:	2b00      	cmp	r3, #0
 8102c1c:	d018      	beq.n	8102c50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8102c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102c20:	3310      	adds	r3, #16
 8102c22:	687a      	ldr	r2, [r7, #4]
 8102c24:	4611      	mov	r1, r2
 8102c26:	4618      	mov	r0, r3
 8102c28:	f000 ff2a 	bl	8103a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8102c2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102c2e:	f000 fa31 	bl	8103094 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8102c32:	f000 fd5f 	bl	81036f4 <xTaskResumeAll>
 8102c36:	4603      	mov	r3, r0
 8102c38:	2b00      	cmp	r3, #0
 8102c3a:	f47f af7c 	bne.w	8102b36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8102c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8102c70 <xQueueGenericSend+0x200>)
 8102c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102c44:	601a      	str	r2, [r3, #0]
 8102c46:	f3bf 8f4f 	dsb	sy
 8102c4a:	f3bf 8f6f 	isb	sy
 8102c4e:	e772      	b.n	8102b36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8102c50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102c52:	f000 fa1f 	bl	8103094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102c56:	f000 fd4d 	bl	81036f4 <xTaskResumeAll>
 8102c5a:	e76c      	b.n	8102b36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8102c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102c5e:	f000 fa19 	bl	8103094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102c62:	f000 fd47 	bl	81036f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8102c66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8102c68:	4618      	mov	r0, r3
 8102c6a:	3738      	adds	r7, #56	@ 0x38
 8102c6c:	46bd      	mov	sp, r7
 8102c6e:	bd80      	pop	{r7, pc}
 8102c70:	e000ed04 	.word	0xe000ed04

08102c74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8102c74:	b580      	push	{r7, lr}
 8102c76:	b090      	sub	sp, #64	@ 0x40
 8102c78:	af00      	add	r7, sp, #0
 8102c7a:	60f8      	str	r0, [r7, #12]
 8102c7c:	60b9      	str	r1, [r7, #8]
 8102c7e:	607a      	str	r2, [r7, #4]
 8102c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8102c82:	68fb      	ldr	r3, [r7, #12]
 8102c84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8102c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102c88:	2b00      	cmp	r3, #0
 8102c8a:	d10b      	bne.n	8102ca4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8102c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102c90:	f383 8811 	msr	BASEPRI, r3
 8102c94:	f3bf 8f6f 	isb	sy
 8102c98:	f3bf 8f4f 	dsb	sy
 8102c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8102c9e:	bf00      	nop
 8102ca0:	bf00      	nop
 8102ca2:	e7fd      	b.n	8102ca0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102ca4:	68bb      	ldr	r3, [r7, #8]
 8102ca6:	2b00      	cmp	r3, #0
 8102ca8:	d103      	bne.n	8102cb2 <xQueueGenericSendFromISR+0x3e>
 8102caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102cae:	2b00      	cmp	r3, #0
 8102cb0:	d101      	bne.n	8102cb6 <xQueueGenericSendFromISR+0x42>
 8102cb2:	2301      	movs	r3, #1
 8102cb4:	e000      	b.n	8102cb8 <xQueueGenericSendFromISR+0x44>
 8102cb6:	2300      	movs	r3, #0
 8102cb8:	2b00      	cmp	r3, #0
 8102cba:	d10b      	bne.n	8102cd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8102cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102cc0:	f383 8811 	msr	BASEPRI, r3
 8102cc4:	f3bf 8f6f 	isb	sy
 8102cc8:	f3bf 8f4f 	dsb	sy
 8102ccc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8102cce:	bf00      	nop
 8102cd0:	bf00      	nop
 8102cd2:	e7fd      	b.n	8102cd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8102cd4:	683b      	ldr	r3, [r7, #0]
 8102cd6:	2b02      	cmp	r3, #2
 8102cd8:	d103      	bne.n	8102ce2 <xQueueGenericSendFromISR+0x6e>
 8102cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102cde:	2b01      	cmp	r3, #1
 8102ce0:	d101      	bne.n	8102ce6 <xQueueGenericSendFromISR+0x72>
 8102ce2:	2301      	movs	r3, #1
 8102ce4:	e000      	b.n	8102ce8 <xQueueGenericSendFromISR+0x74>
 8102ce6:	2300      	movs	r3, #0
 8102ce8:	2b00      	cmp	r3, #0
 8102cea:	d10b      	bne.n	8102d04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8102cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102cf0:	f383 8811 	msr	BASEPRI, r3
 8102cf4:	f3bf 8f6f 	isb	sy
 8102cf8:	f3bf 8f4f 	dsb	sy
 8102cfc:	623b      	str	r3, [r7, #32]
}
 8102cfe:	bf00      	nop
 8102d00:	bf00      	nop
 8102d02:	e7fd      	b.n	8102d00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8102d04:	f7ff fd68 	bl	81027d8 <vPortValidateInterruptPriority>
	__asm volatile
 8102d08:	f3ef 8211 	mrs	r2, BASEPRI
 8102d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102d10:	f383 8811 	msr	BASEPRI, r3
 8102d14:	f3bf 8f6f 	isb	sy
 8102d18:	f3bf 8f4f 	dsb	sy
 8102d1c:	61fa      	str	r2, [r7, #28]
 8102d1e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8102d20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8102d22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8102d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8102d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102d2c:	429a      	cmp	r2, r3
 8102d2e:	d302      	bcc.n	8102d36 <xQueueGenericSendFromISR+0xc2>
 8102d30:	683b      	ldr	r3, [r7, #0]
 8102d32:	2b02      	cmp	r3, #2
 8102d34:	d12f      	bne.n	8102d96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8102d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8102d3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8102d46:	683a      	ldr	r2, [r7, #0]
 8102d48:	68b9      	ldr	r1, [r7, #8]
 8102d4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8102d4c:	f000 f912 	bl	8102f74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8102d50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8102d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102d58:	d112      	bne.n	8102d80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8102d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102d5e:	2b00      	cmp	r3, #0
 8102d60:	d016      	beq.n	8102d90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8102d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d64:	3324      	adds	r3, #36	@ 0x24
 8102d66:	4618      	mov	r0, r3
 8102d68:	f000 fedc 	bl	8103b24 <xTaskRemoveFromEventList>
 8102d6c:	4603      	mov	r3, r0
 8102d6e:	2b00      	cmp	r3, #0
 8102d70:	d00e      	beq.n	8102d90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	2b00      	cmp	r3, #0
 8102d76:	d00b      	beq.n	8102d90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	2201      	movs	r2, #1
 8102d7c:	601a      	str	r2, [r3, #0]
 8102d7e:	e007      	b.n	8102d90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8102d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8102d84:	3301      	adds	r3, #1
 8102d86:	b2db      	uxtb	r3, r3
 8102d88:	b25a      	sxtb	r2, r3
 8102d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8102d90:	2301      	movs	r3, #1
 8102d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8102d94:	e001      	b.n	8102d9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8102d96:	2300      	movs	r3, #0
 8102d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102d9c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8102d9e:	697b      	ldr	r3, [r7, #20]
 8102da0:	f383 8811 	msr	BASEPRI, r3
}
 8102da4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8102da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8102da8:	4618      	mov	r0, r3
 8102daa:	3740      	adds	r7, #64	@ 0x40
 8102dac:	46bd      	mov	sp, r7
 8102dae:	bd80      	pop	{r7, pc}

08102db0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8102db0:	b580      	push	{r7, lr}
 8102db2:	b08c      	sub	sp, #48	@ 0x30
 8102db4:	af00      	add	r7, sp, #0
 8102db6:	60f8      	str	r0, [r7, #12]
 8102db8:	60b9      	str	r1, [r7, #8]
 8102dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8102dbc:	2300      	movs	r3, #0
 8102dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8102dc0:	68fb      	ldr	r3, [r7, #12]
 8102dc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8102dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102dc6:	2b00      	cmp	r3, #0
 8102dc8:	d10b      	bne.n	8102de2 <xQueueReceive+0x32>
	__asm volatile
 8102dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102dce:	f383 8811 	msr	BASEPRI, r3
 8102dd2:	f3bf 8f6f 	isb	sy
 8102dd6:	f3bf 8f4f 	dsb	sy
 8102dda:	623b      	str	r3, [r7, #32]
}
 8102ddc:	bf00      	nop
 8102dde:	bf00      	nop
 8102de0:	e7fd      	b.n	8102dde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8102de2:	68bb      	ldr	r3, [r7, #8]
 8102de4:	2b00      	cmp	r3, #0
 8102de6:	d103      	bne.n	8102df0 <xQueueReceive+0x40>
 8102de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102dec:	2b00      	cmp	r3, #0
 8102dee:	d101      	bne.n	8102df4 <xQueueReceive+0x44>
 8102df0:	2301      	movs	r3, #1
 8102df2:	e000      	b.n	8102df6 <xQueueReceive+0x46>
 8102df4:	2300      	movs	r3, #0
 8102df6:	2b00      	cmp	r3, #0
 8102df8:	d10b      	bne.n	8102e12 <xQueueReceive+0x62>
	__asm volatile
 8102dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102dfe:	f383 8811 	msr	BASEPRI, r3
 8102e02:	f3bf 8f6f 	isb	sy
 8102e06:	f3bf 8f4f 	dsb	sy
 8102e0a:	61fb      	str	r3, [r7, #28]
}
 8102e0c:	bf00      	nop
 8102e0e:	bf00      	nop
 8102e10:	e7fd      	b.n	8102e0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8102e12:	f001 f847 	bl	8103ea4 <xTaskGetSchedulerState>
 8102e16:	4603      	mov	r3, r0
 8102e18:	2b00      	cmp	r3, #0
 8102e1a:	d102      	bne.n	8102e22 <xQueueReceive+0x72>
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	2b00      	cmp	r3, #0
 8102e20:	d101      	bne.n	8102e26 <xQueueReceive+0x76>
 8102e22:	2301      	movs	r3, #1
 8102e24:	e000      	b.n	8102e28 <xQueueReceive+0x78>
 8102e26:	2300      	movs	r3, #0
 8102e28:	2b00      	cmp	r3, #0
 8102e2a:	d10b      	bne.n	8102e44 <xQueueReceive+0x94>
	__asm volatile
 8102e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102e30:	f383 8811 	msr	BASEPRI, r3
 8102e34:	f3bf 8f6f 	isb	sy
 8102e38:	f3bf 8f4f 	dsb	sy
 8102e3c:	61bb      	str	r3, [r7, #24]
}
 8102e3e:	bf00      	nop
 8102e40:	bf00      	nop
 8102e42:	e7fd      	b.n	8102e40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8102e44:	f7ff fbe8 	bl	8102618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102e4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8102e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e50:	2b00      	cmp	r3, #0
 8102e52:	d01f      	beq.n	8102e94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8102e54:	68b9      	ldr	r1, [r7, #8]
 8102e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102e58:	f000 f8f6 	bl	8103048 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8102e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e5e:	1e5a      	subs	r2, r3, #1
 8102e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102e62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102e66:	691b      	ldr	r3, [r3, #16]
 8102e68:	2b00      	cmp	r3, #0
 8102e6a:	d00f      	beq.n	8102e8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8102e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102e6e:	3310      	adds	r3, #16
 8102e70:	4618      	mov	r0, r3
 8102e72:	f000 fe57 	bl	8103b24 <xTaskRemoveFromEventList>
 8102e76:	4603      	mov	r3, r0
 8102e78:	2b00      	cmp	r3, #0
 8102e7a:	d007      	beq.n	8102e8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8102e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8102f70 <xQueueReceive+0x1c0>)
 8102e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102e82:	601a      	str	r2, [r3, #0]
 8102e84:	f3bf 8f4f 	dsb	sy
 8102e88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8102e8c:	f7ff fbf6 	bl	810267c <vPortExitCritical>
				return pdPASS;
 8102e90:	2301      	movs	r3, #1
 8102e92:	e069      	b.n	8102f68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	2b00      	cmp	r3, #0
 8102e98:	d103      	bne.n	8102ea2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8102e9a:	f7ff fbef 	bl	810267c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8102e9e:	2300      	movs	r3, #0
 8102ea0:	e062      	b.n	8102f68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8102ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102ea4:	2b00      	cmp	r3, #0
 8102ea6:	d106      	bne.n	8102eb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8102ea8:	f107 0310 	add.w	r3, r7, #16
 8102eac:	4618      	mov	r0, r3
 8102eae:	f000 fe9d 	bl	8103bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8102eb2:	2301      	movs	r3, #1
 8102eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8102eb6:	f7ff fbe1 	bl	810267c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8102eba:	f000 fc0d 	bl	81036d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8102ebe:	f7ff fbab 	bl	8102618 <vPortEnterCritical>
 8102ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8102ec8:	b25b      	sxtb	r3, r3
 8102eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ece:	d103      	bne.n	8102ed8 <xQueueReceive+0x128>
 8102ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102ed2:	2200      	movs	r2, #0
 8102ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8102ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8102ede:	b25b      	sxtb	r3, r3
 8102ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ee4:	d103      	bne.n	8102eee <xQueueReceive+0x13e>
 8102ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102ee8:	2200      	movs	r2, #0
 8102eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8102eee:	f7ff fbc5 	bl	810267c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102ef2:	1d3a      	adds	r2, r7, #4
 8102ef4:	f107 0310 	add.w	r3, r7, #16
 8102ef8:	4611      	mov	r1, r2
 8102efa:	4618      	mov	r0, r3
 8102efc:	f000 fe8c 	bl	8103c18 <xTaskCheckForTimeOut>
 8102f00:	4603      	mov	r3, r0
 8102f02:	2b00      	cmp	r3, #0
 8102f04:	d123      	bne.n	8102f4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102f08:	f000 f916 	bl	8103138 <prvIsQueueEmpty>
 8102f0c:	4603      	mov	r3, r0
 8102f0e:	2b00      	cmp	r3, #0
 8102f10:	d017      	beq.n	8102f42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8102f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102f14:	3324      	adds	r3, #36	@ 0x24
 8102f16:	687a      	ldr	r2, [r7, #4]
 8102f18:	4611      	mov	r1, r2
 8102f1a:	4618      	mov	r0, r3
 8102f1c:	f000 fdb0 	bl	8103a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8102f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102f22:	f000 f8b7 	bl	8103094 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8102f26:	f000 fbe5 	bl	81036f4 <xTaskResumeAll>
 8102f2a:	4603      	mov	r3, r0
 8102f2c:	2b00      	cmp	r3, #0
 8102f2e:	d189      	bne.n	8102e44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8102f30:	4b0f      	ldr	r3, [pc, #60]	@ (8102f70 <xQueueReceive+0x1c0>)
 8102f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102f36:	601a      	str	r2, [r3, #0]
 8102f38:	f3bf 8f4f 	dsb	sy
 8102f3c:	f3bf 8f6f 	isb	sy
 8102f40:	e780      	b.n	8102e44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8102f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102f44:	f000 f8a6 	bl	8103094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102f48:	f000 fbd4 	bl	81036f4 <xTaskResumeAll>
 8102f4c:	e77a      	b.n	8102e44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8102f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102f50:	f000 f8a0 	bl	8103094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102f54:	f000 fbce 	bl	81036f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102f5a:	f000 f8ed 	bl	8103138 <prvIsQueueEmpty>
 8102f5e:	4603      	mov	r3, r0
 8102f60:	2b00      	cmp	r3, #0
 8102f62:	f43f af6f 	beq.w	8102e44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8102f66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8102f68:	4618      	mov	r0, r3
 8102f6a:	3730      	adds	r7, #48	@ 0x30
 8102f6c:	46bd      	mov	sp, r7
 8102f6e:	bd80      	pop	{r7, pc}
 8102f70:	e000ed04 	.word	0xe000ed04

08102f74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8102f74:	b580      	push	{r7, lr}
 8102f76:	b086      	sub	sp, #24
 8102f78:	af00      	add	r7, sp, #0
 8102f7a:	60f8      	str	r0, [r7, #12]
 8102f7c:	60b9      	str	r1, [r7, #8]
 8102f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8102f80:	2300      	movs	r3, #0
 8102f82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8102f84:	68fb      	ldr	r3, [r7, #12]
 8102f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102f88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8102f8a:	68fb      	ldr	r3, [r7, #12]
 8102f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102f8e:	2b00      	cmp	r3, #0
 8102f90:	d10d      	bne.n	8102fae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8102f92:	68fb      	ldr	r3, [r7, #12]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	2b00      	cmp	r3, #0
 8102f98:	d14d      	bne.n	8103036 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8102f9a:	68fb      	ldr	r3, [r7, #12]
 8102f9c:	689b      	ldr	r3, [r3, #8]
 8102f9e:	4618      	mov	r0, r3
 8102fa0:	f000 ff9e 	bl	8103ee0 <xTaskPriorityDisinherit>
 8102fa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	2200      	movs	r2, #0
 8102faa:	609a      	str	r2, [r3, #8]
 8102fac:	e043      	b.n	8103036 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	2b00      	cmp	r3, #0
 8102fb2:	d119      	bne.n	8102fe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8102fb4:	68fb      	ldr	r3, [r7, #12]
 8102fb6:	6858      	ldr	r0, [r3, #4]
 8102fb8:	68fb      	ldr	r3, [r7, #12]
 8102fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102fbc:	461a      	mov	r2, r3
 8102fbe:	68b9      	ldr	r1, [r7, #8]
 8102fc0:	f001 fc00 	bl	81047c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8102fc4:	68fb      	ldr	r3, [r7, #12]
 8102fc6:	685a      	ldr	r2, [r3, #4]
 8102fc8:	68fb      	ldr	r3, [r7, #12]
 8102fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102fcc:	441a      	add	r2, r3
 8102fce:	68fb      	ldr	r3, [r7, #12]
 8102fd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102fd2:	68fb      	ldr	r3, [r7, #12]
 8102fd4:	685a      	ldr	r2, [r3, #4]
 8102fd6:	68fb      	ldr	r3, [r7, #12]
 8102fd8:	689b      	ldr	r3, [r3, #8]
 8102fda:	429a      	cmp	r2, r3
 8102fdc:	d32b      	bcc.n	8103036 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8102fde:	68fb      	ldr	r3, [r7, #12]
 8102fe0:	681a      	ldr	r2, [r3, #0]
 8102fe2:	68fb      	ldr	r3, [r7, #12]
 8102fe4:	605a      	str	r2, [r3, #4]
 8102fe6:	e026      	b.n	8103036 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8102fe8:	68fb      	ldr	r3, [r7, #12]
 8102fea:	68d8      	ldr	r0, [r3, #12]
 8102fec:	68fb      	ldr	r3, [r7, #12]
 8102fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102ff0:	461a      	mov	r2, r3
 8102ff2:	68b9      	ldr	r1, [r7, #8]
 8102ff4:	f001 fbe6 	bl	81047c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8102ff8:	68fb      	ldr	r3, [r7, #12]
 8102ffa:	68da      	ldr	r2, [r3, #12]
 8102ffc:	68fb      	ldr	r3, [r7, #12]
 8102ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103000:	425b      	negs	r3, r3
 8103002:	441a      	add	r2, r3
 8103004:	68fb      	ldr	r3, [r7, #12]
 8103006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8103008:	68fb      	ldr	r3, [r7, #12]
 810300a:	68da      	ldr	r2, [r3, #12]
 810300c:	68fb      	ldr	r3, [r7, #12]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	429a      	cmp	r2, r3
 8103012:	d207      	bcs.n	8103024 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8103014:	68fb      	ldr	r3, [r7, #12]
 8103016:	689a      	ldr	r2, [r3, #8]
 8103018:	68fb      	ldr	r3, [r7, #12]
 810301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810301c:	425b      	negs	r3, r3
 810301e:	441a      	add	r2, r3
 8103020:	68fb      	ldr	r3, [r7, #12]
 8103022:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	2b02      	cmp	r3, #2
 8103028:	d105      	bne.n	8103036 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810302a:	693b      	ldr	r3, [r7, #16]
 810302c:	2b00      	cmp	r3, #0
 810302e:	d002      	beq.n	8103036 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8103030:	693b      	ldr	r3, [r7, #16]
 8103032:	3b01      	subs	r3, #1
 8103034:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8103036:	693b      	ldr	r3, [r7, #16]
 8103038:	1c5a      	adds	r2, r3, #1
 810303a:	68fb      	ldr	r3, [r7, #12]
 810303c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810303e:	697b      	ldr	r3, [r7, #20]
}
 8103040:	4618      	mov	r0, r3
 8103042:	3718      	adds	r7, #24
 8103044:	46bd      	mov	sp, r7
 8103046:	bd80      	pop	{r7, pc}

08103048 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8103048:	b580      	push	{r7, lr}
 810304a:	b082      	sub	sp, #8
 810304c:	af00      	add	r7, sp, #0
 810304e:	6078      	str	r0, [r7, #4]
 8103050:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103056:	2b00      	cmp	r3, #0
 8103058:	d018      	beq.n	810308c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	68da      	ldr	r2, [r3, #12]
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103062:	441a      	add	r2, r3
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	68da      	ldr	r2, [r3, #12]
 810306c:	687b      	ldr	r3, [r7, #4]
 810306e:	689b      	ldr	r3, [r3, #8]
 8103070:	429a      	cmp	r2, r3
 8103072:	d303      	bcc.n	810307c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	681a      	ldr	r2, [r3, #0]
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	68d9      	ldr	r1, [r3, #12]
 8103080:	687b      	ldr	r3, [r7, #4]
 8103082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103084:	461a      	mov	r2, r3
 8103086:	6838      	ldr	r0, [r7, #0]
 8103088:	f001 fb9c 	bl	81047c4 <memcpy>
	}
}
 810308c:	bf00      	nop
 810308e:	3708      	adds	r7, #8
 8103090:	46bd      	mov	sp, r7
 8103092:	bd80      	pop	{r7, pc}

08103094 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8103094:	b580      	push	{r7, lr}
 8103096:	b084      	sub	sp, #16
 8103098:	af00      	add	r7, sp, #0
 810309a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810309c:	f7ff fabc 	bl	8102618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81030a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81030a8:	e011      	b.n	81030ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81030ae:	2b00      	cmp	r3, #0
 81030b0:	d012      	beq.n	81030d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	3324      	adds	r3, #36	@ 0x24
 81030b6:	4618      	mov	r0, r3
 81030b8:	f000 fd34 	bl	8103b24 <xTaskRemoveFromEventList>
 81030bc:	4603      	mov	r3, r0
 81030be:	2b00      	cmp	r3, #0
 81030c0:	d001      	beq.n	81030c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81030c2:	f000 fe0d 	bl	8103ce0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81030c6:	7bfb      	ldrb	r3, [r7, #15]
 81030c8:	3b01      	subs	r3, #1
 81030ca:	b2db      	uxtb	r3, r3
 81030cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81030d2:	2b00      	cmp	r3, #0
 81030d4:	dce9      	bgt.n	81030aa <prvUnlockQueue+0x16>
 81030d6:	e000      	b.n	81030da <prvUnlockQueue+0x46>
					break;
 81030d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	22ff      	movs	r2, #255	@ 0xff
 81030de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 81030e2:	f7ff facb 	bl	810267c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 81030e6:	f7ff fa97 	bl	8102618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81030f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81030f2:	e011      	b.n	8103118 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	691b      	ldr	r3, [r3, #16]
 81030f8:	2b00      	cmp	r3, #0
 81030fa:	d012      	beq.n	8103122 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	3310      	adds	r3, #16
 8103100:	4618      	mov	r0, r3
 8103102:	f000 fd0f 	bl	8103b24 <xTaskRemoveFromEventList>
 8103106:	4603      	mov	r3, r0
 8103108:	2b00      	cmp	r3, #0
 810310a:	d001      	beq.n	8103110 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810310c:	f000 fde8 	bl	8103ce0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8103110:	7bbb      	ldrb	r3, [r7, #14]
 8103112:	3b01      	subs	r3, #1
 8103114:	b2db      	uxtb	r3, r3
 8103116:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8103118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810311c:	2b00      	cmp	r3, #0
 810311e:	dce9      	bgt.n	81030f4 <prvUnlockQueue+0x60>
 8103120:	e000      	b.n	8103124 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8103122:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	22ff      	movs	r2, #255	@ 0xff
 8103128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810312c:	f7ff faa6 	bl	810267c <vPortExitCritical>
}
 8103130:	bf00      	nop
 8103132:	3710      	adds	r7, #16
 8103134:	46bd      	mov	sp, r7
 8103136:	bd80      	pop	{r7, pc}

08103138 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8103138:	b580      	push	{r7, lr}
 810313a:	b084      	sub	sp, #16
 810313c:	af00      	add	r7, sp, #0
 810313e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8103140:	f7ff fa6a 	bl	8102618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103148:	2b00      	cmp	r3, #0
 810314a:	d102      	bne.n	8103152 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810314c:	2301      	movs	r3, #1
 810314e:	60fb      	str	r3, [r7, #12]
 8103150:	e001      	b.n	8103156 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8103152:	2300      	movs	r3, #0
 8103154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8103156:	f7ff fa91 	bl	810267c <vPortExitCritical>

	return xReturn;
 810315a:	68fb      	ldr	r3, [r7, #12]
}
 810315c:	4618      	mov	r0, r3
 810315e:	3710      	adds	r7, #16
 8103160:	46bd      	mov	sp, r7
 8103162:	bd80      	pop	{r7, pc}

08103164 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8103164:	b580      	push	{r7, lr}
 8103166:	b084      	sub	sp, #16
 8103168:	af00      	add	r7, sp, #0
 810316a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810316c:	f7ff fa54 	bl	8102618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103178:	429a      	cmp	r2, r3
 810317a:	d102      	bne.n	8103182 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810317c:	2301      	movs	r3, #1
 810317e:	60fb      	str	r3, [r7, #12]
 8103180:	e001      	b.n	8103186 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8103182:	2300      	movs	r3, #0
 8103184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8103186:	f7ff fa79 	bl	810267c <vPortExitCritical>

	return xReturn;
 810318a:	68fb      	ldr	r3, [r7, #12]
}
 810318c:	4618      	mov	r0, r3
 810318e:	3710      	adds	r7, #16
 8103190:	46bd      	mov	sp, r7
 8103192:	bd80      	pop	{r7, pc}

08103194 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8103194:	b480      	push	{r7}
 8103196:	b085      	sub	sp, #20
 8103198:	af00      	add	r7, sp, #0
 810319a:	6078      	str	r0, [r7, #4]
 810319c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810319e:	2300      	movs	r3, #0
 81031a0:	60fb      	str	r3, [r7, #12]
 81031a2:	e014      	b.n	81031ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 81031a4:	4a0f      	ldr	r2, [pc, #60]	@ (81031e4 <vQueueAddToRegistry+0x50>)
 81031a6:	68fb      	ldr	r3, [r7, #12]
 81031a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81031ac:	2b00      	cmp	r3, #0
 81031ae:	d10b      	bne.n	81031c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81031b0:	490c      	ldr	r1, [pc, #48]	@ (81031e4 <vQueueAddToRegistry+0x50>)
 81031b2:	68fb      	ldr	r3, [r7, #12]
 81031b4:	683a      	ldr	r2, [r7, #0]
 81031b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81031ba:	4a0a      	ldr	r2, [pc, #40]	@ (81031e4 <vQueueAddToRegistry+0x50>)
 81031bc:	68fb      	ldr	r3, [r7, #12]
 81031be:	00db      	lsls	r3, r3, #3
 81031c0:	4413      	add	r3, r2
 81031c2:	687a      	ldr	r2, [r7, #4]
 81031c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81031c6:	e006      	b.n	81031d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81031c8:	68fb      	ldr	r3, [r7, #12]
 81031ca:	3301      	adds	r3, #1
 81031cc:	60fb      	str	r3, [r7, #12]
 81031ce:	68fb      	ldr	r3, [r7, #12]
 81031d0:	2b07      	cmp	r3, #7
 81031d2:	d9e7      	bls.n	81031a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81031d4:	bf00      	nop
 81031d6:	bf00      	nop
 81031d8:	3714      	adds	r7, #20
 81031da:	46bd      	mov	sp, r7
 81031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031e0:	4770      	bx	lr
 81031e2:	bf00      	nop
 81031e4:	10004450 	.word	0x10004450

081031e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81031e8:	b580      	push	{r7, lr}
 81031ea:	b086      	sub	sp, #24
 81031ec:	af00      	add	r7, sp, #0
 81031ee:	60f8      	str	r0, [r7, #12]
 81031f0:	60b9      	str	r1, [r7, #8]
 81031f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 81031f4:	68fb      	ldr	r3, [r7, #12]
 81031f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81031f8:	f7ff fa0e 	bl	8102618 <vPortEnterCritical>
 81031fc:	697b      	ldr	r3, [r7, #20]
 81031fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8103202:	b25b      	sxtb	r3, r3
 8103204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103208:	d103      	bne.n	8103212 <vQueueWaitForMessageRestricted+0x2a>
 810320a:	697b      	ldr	r3, [r7, #20]
 810320c:	2200      	movs	r2, #0
 810320e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8103212:	697b      	ldr	r3, [r7, #20]
 8103214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8103218:	b25b      	sxtb	r3, r3
 810321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810321e:	d103      	bne.n	8103228 <vQueueWaitForMessageRestricted+0x40>
 8103220:	697b      	ldr	r3, [r7, #20]
 8103222:	2200      	movs	r2, #0
 8103224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8103228:	f7ff fa28 	bl	810267c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810322c:	697b      	ldr	r3, [r7, #20]
 810322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103230:	2b00      	cmp	r3, #0
 8103232:	d106      	bne.n	8103242 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8103234:	697b      	ldr	r3, [r7, #20]
 8103236:	3324      	adds	r3, #36	@ 0x24
 8103238:	687a      	ldr	r2, [r7, #4]
 810323a:	68b9      	ldr	r1, [r7, #8]
 810323c:	4618      	mov	r0, r3
 810323e:	f000 fc45 	bl	8103acc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8103242:	6978      	ldr	r0, [r7, #20]
 8103244:	f7ff ff26 	bl	8103094 <prvUnlockQueue>
	}
 8103248:	bf00      	nop
 810324a:	3718      	adds	r7, #24
 810324c:	46bd      	mov	sp, r7
 810324e:	bd80      	pop	{r7, pc}

08103250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8103250:	b580      	push	{r7, lr}
 8103252:	b08e      	sub	sp, #56	@ 0x38
 8103254:	af04      	add	r7, sp, #16
 8103256:	60f8      	str	r0, [r7, #12]
 8103258:	60b9      	str	r1, [r7, #8]
 810325a:	607a      	str	r2, [r7, #4]
 810325c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103260:	2b00      	cmp	r3, #0
 8103262:	d10b      	bne.n	810327c <xTaskCreateStatic+0x2c>
	__asm volatile
 8103264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103268:	f383 8811 	msr	BASEPRI, r3
 810326c:	f3bf 8f6f 	isb	sy
 8103270:	f3bf 8f4f 	dsb	sy
 8103274:	623b      	str	r3, [r7, #32]
}
 8103276:	bf00      	nop
 8103278:	bf00      	nop
 810327a:	e7fd      	b.n	8103278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810327c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810327e:	2b00      	cmp	r3, #0
 8103280:	d10b      	bne.n	810329a <xTaskCreateStatic+0x4a>
	__asm volatile
 8103282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103286:	f383 8811 	msr	BASEPRI, r3
 810328a:	f3bf 8f6f 	isb	sy
 810328e:	f3bf 8f4f 	dsb	sy
 8103292:	61fb      	str	r3, [r7, #28]
}
 8103294:	bf00      	nop
 8103296:	bf00      	nop
 8103298:	e7fd      	b.n	8103296 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810329a:	235c      	movs	r3, #92	@ 0x5c
 810329c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810329e:	693b      	ldr	r3, [r7, #16]
 81032a0:	2b5c      	cmp	r3, #92	@ 0x5c
 81032a2:	d00b      	beq.n	81032bc <xTaskCreateStatic+0x6c>
	__asm volatile
 81032a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81032a8:	f383 8811 	msr	BASEPRI, r3
 81032ac:	f3bf 8f6f 	isb	sy
 81032b0:	f3bf 8f4f 	dsb	sy
 81032b4:	61bb      	str	r3, [r7, #24]
}
 81032b6:	bf00      	nop
 81032b8:	bf00      	nop
 81032ba:	e7fd      	b.n	81032b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81032bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81032be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81032c0:	2b00      	cmp	r3, #0
 81032c2:	d01e      	beq.n	8103302 <xTaskCreateStatic+0xb2>
 81032c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81032c6:	2b00      	cmp	r3, #0
 81032c8:	d01b      	beq.n	8103302 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81032ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81032cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81032d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81032d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81032d6:	2202      	movs	r2, #2
 81032d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81032dc:	2300      	movs	r3, #0
 81032de:	9303      	str	r3, [sp, #12]
 81032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81032e2:	9302      	str	r3, [sp, #8]
 81032e4:	f107 0314 	add.w	r3, r7, #20
 81032e8:	9301      	str	r3, [sp, #4]
 81032ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81032ec:	9300      	str	r3, [sp, #0]
 81032ee:	683b      	ldr	r3, [r7, #0]
 81032f0:	687a      	ldr	r2, [r7, #4]
 81032f2:	68b9      	ldr	r1, [r7, #8]
 81032f4:	68f8      	ldr	r0, [r7, #12]
 81032f6:	f000 f850 	bl	810339a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81032fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81032fc:	f000 f8de 	bl	81034bc <prvAddNewTaskToReadyList>
 8103300:	e001      	b.n	8103306 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8103302:	2300      	movs	r3, #0
 8103304:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8103306:	697b      	ldr	r3, [r7, #20]
	}
 8103308:	4618      	mov	r0, r3
 810330a:	3728      	adds	r7, #40	@ 0x28
 810330c:	46bd      	mov	sp, r7
 810330e:	bd80      	pop	{r7, pc}

08103310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8103310:	b580      	push	{r7, lr}
 8103312:	b08c      	sub	sp, #48	@ 0x30
 8103314:	af04      	add	r7, sp, #16
 8103316:	60f8      	str	r0, [r7, #12]
 8103318:	60b9      	str	r1, [r7, #8]
 810331a:	603b      	str	r3, [r7, #0]
 810331c:	4613      	mov	r3, r2
 810331e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8103320:	88fb      	ldrh	r3, [r7, #6]
 8103322:	009b      	lsls	r3, r3, #2
 8103324:	4618      	mov	r0, r3
 8103326:	f7fe fda3 	bl	8101e70 <pvPortMalloc>
 810332a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810332c:	697b      	ldr	r3, [r7, #20]
 810332e:	2b00      	cmp	r3, #0
 8103330:	d00e      	beq.n	8103350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8103332:	205c      	movs	r0, #92	@ 0x5c
 8103334:	f7fe fd9c 	bl	8101e70 <pvPortMalloc>
 8103338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810333a:	69fb      	ldr	r3, [r7, #28]
 810333c:	2b00      	cmp	r3, #0
 810333e:	d003      	beq.n	8103348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8103340:	69fb      	ldr	r3, [r7, #28]
 8103342:	697a      	ldr	r2, [r7, #20]
 8103344:	631a      	str	r2, [r3, #48]	@ 0x30
 8103346:	e005      	b.n	8103354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8103348:	6978      	ldr	r0, [r7, #20]
 810334a:	f7fe fe5f 	bl	810200c <vPortFree>
 810334e:	e001      	b.n	8103354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8103350:	2300      	movs	r3, #0
 8103352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8103354:	69fb      	ldr	r3, [r7, #28]
 8103356:	2b00      	cmp	r3, #0
 8103358:	d017      	beq.n	810338a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810335a:	69fb      	ldr	r3, [r7, #28]
 810335c:	2200      	movs	r2, #0
 810335e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8103362:	88fa      	ldrh	r2, [r7, #6]
 8103364:	2300      	movs	r3, #0
 8103366:	9303      	str	r3, [sp, #12]
 8103368:	69fb      	ldr	r3, [r7, #28]
 810336a:	9302      	str	r3, [sp, #8]
 810336c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810336e:	9301      	str	r3, [sp, #4]
 8103370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103372:	9300      	str	r3, [sp, #0]
 8103374:	683b      	ldr	r3, [r7, #0]
 8103376:	68b9      	ldr	r1, [r7, #8]
 8103378:	68f8      	ldr	r0, [r7, #12]
 810337a:	f000 f80e 	bl	810339a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810337e:	69f8      	ldr	r0, [r7, #28]
 8103380:	f000 f89c 	bl	81034bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8103384:	2301      	movs	r3, #1
 8103386:	61bb      	str	r3, [r7, #24]
 8103388:	e002      	b.n	8103390 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810338a:	f04f 33ff 	mov.w	r3, #4294967295
 810338e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8103390:	69bb      	ldr	r3, [r7, #24]
	}
 8103392:	4618      	mov	r0, r3
 8103394:	3720      	adds	r7, #32
 8103396:	46bd      	mov	sp, r7
 8103398:	bd80      	pop	{r7, pc}

0810339a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810339a:	b580      	push	{r7, lr}
 810339c:	b088      	sub	sp, #32
 810339e:	af00      	add	r7, sp, #0
 81033a0:	60f8      	str	r0, [r7, #12]
 81033a2:	60b9      	str	r1, [r7, #8]
 81033a4:	607a      	str	r2, [r7, #4]
 81033a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81033a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81033aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	009b      	lsls	r3, r3, #2
 81033b0:	461a      	mov	r2, r3
 81033b2:	21a5      	movs	r1, #165	@ 0xa5
 81033b4:	f001 f9d2 	bl	810475c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81033ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81033c2:	3b01      	subs	r3, #1
 81033c4:	009b      	lsls	r3, r3, #2
 81033c6:	4413      	add	r3, r2
 81033c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81033ca:	69bb      	ldr	r3, [r7, #24]
 81033cc:	f023 0307 	bic.w	r3, r3, #7
 81033d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81033d2:	69bb      	ldr	r3, [r7, #24]
 81033d4:	f003 0307 	and.w	r3, r3, #7
 81033d8:	2b00      	cmp	r3, #0
 81033da:	d00b      	beq.n	81033f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 81033dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81033e0:	f383 8811 	msr	BASEPRI, r3
 81033e4:	f3bf 8f6f 	isb	sy
 81033e8:	f3bf 8f4f 	dsb	sy
 81033ec:	617b      	str	r3, [r7, #20]
}
 81033ee:	bf00      	nop
 81033f0:	bf00      	nop
 81033f2:	e7fd      	b.n	81033f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81033f4:	68bb      	ldr	r3, [r7, #8]
 81033f6:	2b00      	cmp	r3, #0
 81033f8:	d01f      	beq.n	810343a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81033fa:	2300      	movs	r3, #0
 81033fc:	61fb      	str	r3, [r7, #28]
 81033fe:	e012      	b.n	8103426 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8103400:	68ba      	ldr	r2, [r7, #8]
 8103402:	69fb      	ldr	r3, [r7, #28]
 8103404:	4413      	add	r3, r2
 8103406:	7819      	ldrb	r1, [r3, #0]
 8103408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810340a:	69fb      	ldr	r3, [r7, #28]
 810340c:	4413      	add	r3, r2
 810340e:	3334      	adds	r3, #52	@ 0x34
 8103410:	460a      	mov	r2, r1
 8103412:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8103414:	68ba      	ldr	r2, [r7, #8]
 8103416:	69fb      	ldr	r3, [r7, #28]
 8103418:	4413      	add	r3, r2
 810341a:	781b      	ldrb	r3, [r3, #0]
 810341c:	2b00      	cmp	r3, #0
 810341e:	d006      	beq.n	810342e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8103420:	69fb      	ldr	r3, [r7, #28]
 8103422:	3301      	adds	r3, #1
 8103424:	61fb      	str	r3, [r7, #28]
 8103426:	69fb      	ldr	r3, [r7, #28]
 8103428:	2b0f      	cmp	r3, #15
 810342a:	d9e9      	bls.n	8103400 <prvInitialiseNewTask+0x66>
 810342c:	e000      	b.n	8103430 <prvInitialiseNewTask+0x96>
			{
				break;
 810342e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8103430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103432:	2200      	movs	r2, #0
 8103434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8103438:	e003      	b.n	8103442 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810343a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810343c:	2200      	movs	r2, #0
 810343e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8103442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103444:	2b37      	cmp	r3, #55	@ 0x37
 8103446:	d901      	bls.n	810344c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8103448:	2337      	movs	r3, #55	@ 0x37
 810344a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810344e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8103450:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8103452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8103456:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8103458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810345a:	2200      	movs	r2, #0
 810345c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103460:	3304      	adds	r3, #4
 8103462:	4618      	mov	r0, r3
 8103464:	f7fe ff12 	bl	810228c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8103468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810346a:	3318      	adds	r3, #24
 810346c:	4618      	mov	r0, r3
 810346e:	f7fe ff0d 	bl	810228c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8103472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103476:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810347a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103480:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8103482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103486:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8103488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810348a:	2200      	movs	r2, #0
 810348c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103490:	2200      	movs	r2, #0
 8103492:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8103496:	683a      	ldr	r2, [r7, #0]
 8103498:	68f9      	ldr	r1, [r7, #12]
 810349a:	69b8      	ldr	r0, [r7, #24]
 810349c:	f7fe ff8a 	bl	81023b4 <pxPortInitialiseStack>
 81034a0:	4602      	mov	r2, r0
 81034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81034a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81034a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81034a8:	2b00      	cmp	r3, #0
 81034aa:	d002      	beq.n	81034b2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81034ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81034ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81034b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81034b2:	bf00      	nop
 81034b4:	3720      	adds	r7, #32
 81034b6:	46bd      	mov	sp, r7
 81034b8:	bd80      	pop	{r7, pc}
	...

081034bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81034bc:	b580      	push	{r7, lr}
 81034be:	b082      	sub	sp, #8
 81034c0:	af00      	add	r7, sp, #0
 81034c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81034c4:	f7ff f8a8 	bl	8102618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81034c8:	4b2d      	ldr	r3, [pc, #180]	@ (8103580 <prvAddNewTaskToReadyList+0xc4>)
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	3301      	adds	r3, #1
 81034ce:	4a2c      	ldr	r2, [pc, #176]	@ (8103580 <prvAddNewTaskToReadyList+0xc4>)
 81034d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81034d2:	4b2c      	ldr	r3, [pc, #176]	@ (8103584 <prvAddNewTaskToReadyList+0xc8>)
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	2b00      	cmp	r3, #0
 81034d8:	d109      	bne.n	81034ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81034da:	4a2a      	ldr	r2, [pc, #168]	@ (8103584 <prvAddNewTaskToReadyList+0xc8>)
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81034e0:	4b27      	ldr	r3, [pc, #156]	@ (8103580 <prvAddNewTaskToReadyList+0xc4>)
 81034e2:	681b      	ldr	r3, [r3, #0]
 81034e4:	2b01      	cmp	r3, #1
 81034e6:	d110      	bne.n	810350a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 81034e8:	f000 fc1e 	bl	8103d28 <prvInitialiseTaskLists>
 81034ec:	e00d      	b.n	810350a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 81034ee:	4b26      	ldr	r3, [pc, #152]	@ (8103588 <prvAddNewTaskToReadyList+0xcc>)
 81034f0:	681b      	ldr	r3, [r3, #0]
 81034f2:	2b00      	cmp	r3, #0
 81034f4:	d109      	bne.n	810350a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81034f6:	4b23      	ldr	r3, [pc, #140]	@ (8103584 <prvAddNewTaskToReadyList+0xc8>)
 81034f8:	681b      	ldr	r3, [r3, #0]
 81034fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103500:	429a      	cmp	r2, r3
 8103502:	d802      	bhi.n	810350a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8103504:	4a1f      	ldr	r2, [pc, #124]	@ (8103584 <prvAddNewTaskToReadyList+0xc8>)
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810350a:	4b20      	ldr	r3, [pc, #128]	@ (810358c <prvAddNewTaskToReadyList+0xd0>)
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	3301      	adds	r3, #1
 8103510:	4a1e      	ldr	r2, [pc, #120]	@ (810358c <prvAddNewTaskToReadyList+0xd0>)
 8103512:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8103514:	4b1d      	ldr	r3, [pc, #116]	@ (810358c <prvAddNewTaskToReadyList+0xd0>)
 8103516:	681a      	ldr	r2, [r3, #0]
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103520:	4b1b      	ldr	r3, [pc, #108]	@ (8103590 <prvAddNewTaskToReadyList+0xd4>)
 8103522:	681b      	ldr	r3, [r3, #0]
 8103524:	429a      	cmp	r2, r3
 8103526:	d903      	bls.n	8103530 <prvAddNewTaskToReadyList+0x74>
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810352c:	4a18      	ldr	r2, [pc, #96]	@ (8103590 <prvAddNewTaskToReadyList+0xd4>)
 810352e:	6013      	str	r3, [r2, #0]
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103534:	4613      	mov	r3, r2
 8103536:	009b      	lsls	r3, r3, #2
 8103538:	4413      	add	r3, r2
 810353a:	009b      	lsls	r3, r3, #2
 810353c:	4a15      	ldr	r2, [pc, #84]	@ (8103594 <prvAddNewTaskToReadyList+0xd8>)
 810353e:	441a      	add	r2, r3
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	3304      	adds	r3, #4
 8103544:	4619      	mov	r1, r3
 8103546:	4610      	mov	r0, r2
 8103548:	f7fe fead 	bl	81022a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810354c:	f7ff f896 	bl	810267c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8103550:	4b0d      	ldr	r3, [pc, #52]	@ (8103588 <prvAddNewTaskToReadyList+0xcc>)
 8103552:	681b      	ldr	r3, [r3, #0]
 8103554:	2b00      	cmp	r3, #0
 8103556:	d00e      	beq.n	8103576 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8103558:	4b0a      	ldr	r3, [pc, #40]	@ (8103584 <prvAddNewTaskToReadyList+0xc8>)
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103562:	429a      	cmp	r2, r3
 8103564:	d207      	bcs.n	8103576 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8103566:	4b0c      	ldr	r3, [pc, #48]	@ (8103598 <prvAddNewTaskToReadyList+0xdc>)
 8103568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810356c:	601a      	str	r2, [r3, #0]
 810356e:	f3bf 8f4f 	dsb	sy
 8103572:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8103576:	bf00      	nop
 8103578:	3708      	adds	r7, #8
 810357a:	46bd      	mov	sp, r7
 810357c:	bd80      	pop	{r7, pc}
 810357e:	bf00      	nop
 8103580:	10004964 	.word	0x10004964
 8103584:	10004490 	.word	0x10004490
 8103588:	10004970 	.word	0x10004970
 810358c:	10004980 	.word	0x10004980
 8103590:	1000496c 	.word	0x1000496c
 8103594:	10004494 	.word	0x10004494
 8103598:	e000ed04 	.word	0xe000ed04

0810359c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810359c:	b580      	push	{r7, lr}
 810359e:	b084      	sub	sp, #16
 81035a0:	af00      	add	r7, sp, #0
 81035a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81035a4:	2300      	movs	r3, #0
 81035a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	2b00      	cmp	r3, #0
 81035ac:	d018      	beq.n	81035e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81035ae:	4b14      	ldr	r3, [pc, #80]	@ (8103600 <vTaskDelay+0x64>)
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	2b00      	cmp	r3, #0
 81035b4:	d00b      	beq.n	81035ce <vTaskDelay+0x32>
	__asm volatile
 81035b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81035ba:	f383 8811 	msr	BASEPRI, r3
 81035be:	f3bf 8f6f 	isb	sy
 81035c2:	f3bf 8f4f 	dsb	sy
 81035c6:	60bb      	str	r3, [r7, #8]
}
 81035c8:	bf00      	nop
 81035ca:	bf00      	nop
 81035cc:	e7fd      	b.n	81035ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81035ce:	f000 f883 	bl	81036d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81035d2:	2100      	movs	r1, #0
 81035d4:	6878      	ldr	r0, [r7, #4]
 81035d6:	f000 fcf3 	bl	8103fc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81035da:	f000 f88b 	bl	81036f4 <xTaskResumeAll>
 81035de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81035e0:	68fb      	ldr	r3, [r7, #12]
 81035e2:	2b00      	cmp	r3, #0
 81035e4:	d107      	bne.n	81035f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 81035e6:	4b07      	ldr	r3, [pc, #28]	@ (8103604 <vTaskDelay+0x68>)
 81035e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81035ec:	601a      	str	r2, [r3, #0]
 81035ee:	f3bf 8f4f 	dsb	sy
 81035f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81035f6:	bf00      	nop
 81035f8:	3710      	adds	r7, #16
 81035fa:	46bd      	mov	sp, r7
 81035fc:	bd80      	pop	{r7, pc}
 81035fe:	bf00      	nop
 8103600:	1000498c 	.word	0x1000498c
 8103604:	e000ed04 	.word	0xe000ed04

08103608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8103608:	b580      	push	{r7, lr}
 810360a:	b08a      	sub	sp, #40	@ 0x28
 810360c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810360e:	2300      	movs	r3, #0
 8103610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8103612:	2300      	movs	r3, #0
 8103614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8103616:	463a      	mov	r2, r7
 8103618:	1d39      	adds	r1, r7, #4
 810361a:	f107 0308 	add.w	r3, r7, #8
 810361e:	4618      	mov	r0, r3
 8103620:	f7fe fbf2 	bl	8101e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8103624:	6839      	ldr	r1, [r7, #0]
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	68ba      	ldr	r2, [r7, #8]
 810362a:	9202      	str	r2, [sp, #8]
 810362c:	9301      	str	r3, [sp, #4]
 810362e:	2300      	movs	r3, #0
 8103630:	9300      	str	r3, [sp, #0]
 8103632:	2300      	movs	r3, #0
 8103634:	460a      	mov	r2, r1
 8103636:	4922      	ldr	r1, [pc, #136]	@ (81036c0 <vTaskStartScheduler+0xb8>)
 8103638:	4822      	ldr	r0, [pc, #136]	@ (81036c4 <vTaskStartScheduler+0xbc>)
 810363a:	f7ff fe09 	bl	8103250 <xTaskCreateStatic>
 810363e:	4603      	mov	r3, r0
 8103640:	4a21      	ldr	r2, [pc, #132]	@ (81036c8 <vTaskStartScheduler+0xc0>)
 8103642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8103644:	4b20      	ldr	r3, [pc, #128]	@ (81036c8 <vTaskStartScheduler+0xc0>)
 8103646:	681b      	ldr	r3, [r3, #0]
 8103648:	2b00      	cmp	r3, #0
 810364a:	d002      	beq.n	8103652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810364c:	2301      	movs	r3, #1
 810364e:	617b      	str	r3, [r7, #20]
 8103650:	e001      	b.n	8103656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8103652:	2300      	movs	r3, #0
 8103654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8103656:	697b      	ldr	r3, [r7, #20]
 8103658:	2b01      	cmp	r3, #1
 810365a:	d102      	bne.n	8103662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810365c:	f000 fd04 	bl	8104068 <xTimerCreateTimerTask>
 8103660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8103662:	697b      	ldr	r3, [r7, #20]
 8103664:	2b01      	cmp	r3, #1
 8103666:	d116      	bne.n	8103696 <vTaskStartScheduler+0x8e>
	__asm volatile
 8103668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810366c:	f383 8811 	msr	BASEPRI, r3
 8103670:	f3bf 8f6f 	isb	sy
 8103674:	f3bf 8f4f 	dsb	sy
 8103678:	613b      	str	r3, [r7, #16]
}
 810367a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810367c:	4b13      	ldr	r3, [pc, #76]	@ (81036cc <vTaskStartScheduler+0xc4>)
 810367e:	f04f 32ff 	mov.w	r2, #4294967295
 8103682:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8103684:	4b12      	ldr	r3, [pc, #72]	@ (81036d0 <vTaskStartScheduler+0xc8>)
 8103686:	2201      	movs	r2, #1
 8103688:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810368a:	4b12      	ldr	r3, [pc, #72]	@ (81036d4 <vTaskStartScheduler+0xcc>)
 810368c:	2200      	movs	r2, #0
 810368e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8103690:	f7fe ff1e 	bl	81024d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8103694:	e00f      	b.n	81036b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8103696:	697b      	ldr	r3, [r7, #20]
 8103698:	f1b3 3fff 	cmp.w	r3, #4294967295
 810369c:	d10b      	bne.n	81036b6 <vTaskStartScheduler+0xae>
	__asm volatile
 810369e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81036a2:	f383 8811 	msr	BASEPRI, r3
 81036a6:	f3bf 8f6f 	isb	sy
 81036aa:	f3bf 8f4f 	dsb	sy
 81036ae:	60fb      	str	r3, [r7, #12]
}
 81036b0:	bf00      	nop
 81036b2:	bf00      	nop
 81036b4:	e7fd      	b.n	81036b2 <vTaskStartScheduler+0xaa>
}
 81036b6:	bf00      	nop
 81036b8:	3718      	adds	r7, #24
 81036ba:	46bd      	mov	sp, r7
 81036bc:	bd80      	pop	{r7, pc}
 81036be:	bf00      	nop
 81036c0:	08105090 	.word	0x08105090
 81036c4:	08103cf9 	.word	0x08103cf9
 81036c8:	10004988 	.word	0x10004988
 81036cc:	10004984 	.word	0x10004984
 81036d0:	10004970 	.word	0x10004970
 81036d4:	10004968 	.word	0x10004968

081036d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81036d8:	b480      	push	{r7}
 81036da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 81036dc:	4b04      	ldr	r3, [pc, #16]	@ (81036f0 <vTaskSuspendAll+0x18>)
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	3301      	adds	r3, #1
 81036e2:	4a03      	ldr	r2, [pc, #12]	@ (81036f0 <vTaskSuspendAll+0x18>)
 81036e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 81036e6:	bf00      	nop
 81036e8:	46bd      	mov	sp, r7
 81036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036ee:	4770      	bx	lr
 81036f0:	1000498c 	.word	0x1000498c

081036f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81036f4:	b580      	push	{r7, lr}
 81036f6:	b084      	sub	sp, #16
 81036f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81036fa:	2300      	movs	r3, #0
 81036fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81036fe:	2300      	movs	r3, #0
 8103700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8103702:	4b42      	ldr	r3, [pc, #264]	@ (810380c <xTaskResumeAll+0x118>)
 8103704:	681b      	ldr	r3, [r3, #0]
 8103706:	2b00      	cmp	r3, #0
 8103708:	d10b      	bne.n	8103722 <xTaskResumeAll+0x2e>
	__asm volatile
 810370a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810370e:	f383 8811 	msr	BASEPRI, r3
 8103712:	f3bf 8f6f 	isb	sy
 8103716:	f3bf 8f4f 	dsb	sy
 810371a:	603b      	str	r3, [r7, #0]
}
 810371c:	bf00      	nop
 810371e:	bf00      	nop
 8103720:	e7fd      	b.n	810371e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8103722:	f7fe ff79 	bl	8102618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8103726:	4b39      	ldr	r3, [pc, #228]	@ (810380c <xTaskResumeAll+0x118>)
 8103728:	681b      	ldr	r3, [r3, #0]
 810372a:	3b01      	subs	r3, #1
 810372c:	4a37      	ldr	r2, [pc, #220]	@ (810380c <xTaskResumeAll+0x118>)
 810372e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103730:	4b36      	ldr	r3, [pc, #216]	@ (810380c <xTaskResumeAll+0x118>)
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	2b00      	cmp	r3, #0
 8103736:	d162      	bne.n	81037fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8103738:	4b35      	ldr	r3, [pc, #212]	@ (8103810 <xTaskResumeAll+0x11c>)
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	2b00      	cmp	r3, #0
 810373e:	d05e      	beq.n	81037fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8103740:	e02f      	b.n	81037a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103742:	4b34      	ldr	r3, [pc, #208]	@ (8103814 <xTaskResumeAll+0x120>)
 8103744:	68db      	ldr	r3, [r3, #12]
 8103746:	68db      	ldr	r3, [r3, #12]
 8103748:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810374a:	68fb      	ldr	r3, [r7, #12]
 810374c:	3318      	adds	r3, #24
 810374e:	4618      	mov	r0, r3
 8103750:	f7fe fe06 	bl	8102360 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103754:	68fb      	ldr	r3, [r7, #12]
 8103756:	3304      	adds	r3, #4
 8103758:	4618      	mov	r0, r3
 810375a:	f7fe fe01 	bl	8102360 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810375e:	68fb      	ldr	r3, [r7, #12]
 8103760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103762:	4b2d      	ldr	r3, [pc, #180]	@ (8103818 <xTaskResumeAll+0x124>)
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	429a      	cmp	r2, r3
 8103768:	d903      	bls.n	8103772 <xTaskResumeAll+0x7e>
 810376a:	68fb      	ldr	r3, [r7, #12]
 810376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810376e:	4a2a      	ldr	r2, [pc, #168]	@ (8103818 <xTaskResumeAll+0x124>)
 8103770:	6013      	str	r3, [r2, #0]
 8103772:	68fb      	ldr	r3, [r7, #12]
 8103774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103776:	4613      	mov	r3, r2
 8103778:	009b      	lsls	r3, r3, #2
 810377a:	4413      	add	r3, r2
 810377c:	009b      	lsls	r3, r3, #2
 810377e:	4a27      	ldr	r2, [pc, #156]	@ (810381c <xTaskResumeAll+0x128>)
 8103780:	441a      	add	r2, r3
 8103782:	68fb      	ldr	r3, [r7, #12]
 8103784:	3304      	adds	r3, #4
 8103786:	4619      	mov	r1, r3
 8103788:	4610      	mov	r0, r2
 810378a:	f7fe fd8c 	bl	81022a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810378e:	68fb      	ldr	r3, [r7, #12]
 8103790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103792:	4b23      	ldr	r3, [pc, #140]	@ (8103820 <xTaskResumeAll+0x12c>)
 8103794:	681b      	ldr	r3, [r3, #0]
 8103796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103798:	429a      	cmp	r2, r3
 810379a:	d302      	bcc.n	81037a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810379c:	4b21      	ldr	r3, [pc, #132]	@ (8103824 <xTaskResumeAll+0x130>)
 810379e:	2201      	movs	r2, #1
 81037a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81037a2:	4b1c      	ldr	r3, [pc, #112]	@ (8103814 <xTaskResumeAll+0x120>)
 81037a4:	681b      	ldr	r3, [r3, #0]
 81037a6:	2b00      	cmp	r3, #0
 81037a8:	d1cb      	bne.n	8103742 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81037aa:	68fb      	ldr	r3, [r7, #12]
 81037ac:	2b00      	cmp	r3, #0
 81037ae:	d001      	beq.n	81037b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81037b0:	f000 fb58 	bl	8103e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 81037b4:	4b1c      	ldr	r3, [pc, #112]	@ (8103828 <xTaskResumeAll+0x134>)
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	2b00      	cmp	r3, #0
 81037be:	d010      	beq.n	81037e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81037c0:	f000 f846 	bl	8103850 <xTaskIncrementTick>
 81037c4:	4603      	mov	r3, r0
 81037c6:	2b00      	cmp	r3, #0
 81037c8:	d002      	beq.n	81037d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 81037ca:	4b16      	ldr	r3, [pc, #88]	@ (8103824 <xTaskResumeAll+0x130>)
 81037cc:	2201      	movs	r2, #1
 81037ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	3b01      	subs	r3, #1
 81037d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	2b00      	cmp	r3, #0
 81037da:	d1f1      	bne.n	81037c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 81037dc:	4b12      	ldr	r3, [pc, #72]	@ (8103828 <xTaskResumeAll+0x134>)
 81037de:	2200      	movs	r2, #0
 81037e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81037e2:	4b10      	ldr	r3, [pc, #64]	@ (8103824 <xTaskResumeAll+0x130>)
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	2b00      	cmp	r3, #0
 81037e8:	d009      	beq.n	81037fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81037ea:	2301      	movs	r3, #1
 81037ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81037ee:	4b0f      	ldr	r3, [pc, #60]	@ (810382c <xTaskResumeAll+0x138>)
 81037f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81037f4:	601a      	str	r2, [r3, #0]
 81037f6:	f3bf 8f4f 	dsb	sy
 81037fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81037fe:	f7fe ff3d 	bl	810267c <vPortExitCritical>

	return xAlreadyYielded;
 8103802:	68bb      	ldr	r3, [r7, #8]
}
 8103804:	4618      	mov	r0, r3
 8103806:	3710      	adds	r7, #16
 8103808:	46bd      	mov	sp, r7
 810380a:	bd80      	pop	{r7, pc}
 810380c:	1000498c 	.word	0x1000498c
 8103810:	10004964 	.word	0x10004964
 8103814:	10004924 	.word	0x10004924
 8103818:	1000496c 	.word	0x1000496c
 810381c:	10004494 	.word	0x10004494
 8103820:	10004490 	.word	0x10004490
 8103824:	10004978 	.word	0x10004978
 8103828:	10004974 	.word	0x10004974
 810382c:	e000ed04 	.word	0xe000ed04

08103830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8103830:	b480      	push	{r7}
 8103832:	b083      	sub	sp, #12
 8103834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8103836:	4b05      	ldr	r3, [pc, #20]	@ (810384c <xTaskGetTickCount+0x1c>)
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810383c:	687b      	ldr	r3, [r7, #4]
}
 810383e:	4618      	mov	r0, r3
 8103840:	370c      	adds	r7, #12
 8103842:	46bd      	mov	sp, r7
 8103844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103848:	4770      	bx	lr
 810384a:	bf00      	nop
 810384c:	10004968 	.word	0x10004968

08103850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8103850:	b580      	push	{r7, lr}
 8103852:	b086      	sub	sp, #24
 8103854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8103856:	2300      	movs	r3, #0
 8103858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810385a:	4b4f      	ldr	r3, [pc, #316]	@ (8103998 <xTaskIncrementTick+0x148>)
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	2b00      	cmp	r3, #0
 8103860:	f040 8090 	bne.w	8103984 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8103864:	4b4d      	ldr	r3, [pc, #308]	@ (810399c <xTaskIncrementTick+0x14c>)
 8103866:	681b      	ldr	r3, [r3, #0]
 8103868:	3301      	adds	r3, #1
 810386a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810386c:	4a4b      	ldr	r2, [pc, #300]	@ (810399c <xTaskIncrementTick+0x14c>)
 810386e:	693b      	ldr	r3, [r7, #16]
 8103870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8103872:	693b      	ldr	r3, [r7, #16]
 8103874:	2b00      	cmp	r3, #0
 8103876:	d121      	bne.n	81038bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8103878:	4b49      	ldr	r3, [pc, #292]	@ (81039a0 <xTaskIncrementTick+0x150>)
 810387a:	681b      	ldr	r3, [r3, #0]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	2b00      	cmp	r3, #0
 8103880:	d00b      	beq.n	810389a <xTaskIncrementTick+0x4a>
	__asm volatile
 8103882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103886:	f383 8811 	msr	BASEPRI, r3
 810388a:	f3bf 8f6f 	isb	sy
 810388e:	f3bf 8f4f 	dsb	sy
 8103892:	603b      	str	r3, [r7, #0]
}
 8103894:	bf00      	nop
 8103896:	bf00      	nop
 8103898:	e7fd      	b.n	8103896 <xTaskIncrementTick+0x46>
 810389a:	4b41      	ldr	r3, [pc, #260]	@ (81039a0 <xTaskIncrementTick+0x150>)
 810389c:	681b      	ldr	r3, [r3, #0]
 810389e:	60fb      	str	r3, [r7, #12]
 81038a0:	4b40      	ldr	r3, [pc, #256]	@ (81039a4 <xTaskIncrementTick+0x154>)
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	4a3e      	ldr	r2, [pc, #248]	@ (81039a0 <xTaskIncrementTick+0x150>)
 81038a6:	6013      	str	r3, [r2, #0]
 81038a8:	4a3e      	ldr	r2, [pc, #248]	@ (81039a4 <xTaskIncrementTick+0x154>)
 81038aa:	68fb      	ldr	r3, [r7, #12]
 81038ac:	6013      	str	r3, [r2, #0]
 81038ae:	4b3e      	ldr	r3, [pc, #248]	@ (81039a8 <xTaskIncrementTick+0x158>)
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	3301      	adds	r3, #1
 81038b4:	4a3c      	ldr	r2, [pc, #240]	@ (81039a8 <xTaskIncrementTick+0x158>)
 81038b6:	6013      	str	r3, [r2, #0]
 81038b8:	f000 fad4 	bl	8103e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81038bc:	4b3b      	ldr	r3, [pc, #236]	@ (81039ac <xTaskIncrementTick+0x15c>)
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	693a      	ldr	r2, [r7, #16]
 81038c2:	429a      	cmp	r2, r3
 81038c4:	d349      	bcc.n	810395a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81038c6:	4b36      	ldr	r3, [pc, #216]	@ (81039a0 <xTaskIncrementTick+0x150>)
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	681b      	ldr	r3, [r3, #0]
 81038cc:	2b00      	cmp	r3, #0
 81038ce:	d104      	bne.n	81038da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81038d0:	4b36      	ldr	r3, [pc, #216]	@ (81039ac <xTaskIncrementTick+0x15c>)
 81038d2:	f04f 32ff 	mov.w	r2, #4294967295
 81038d6:	601a      	str	r2, [r3, #0]
					break;
 81038d8:	e03f      	b.n	810395a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81038da:	4b31      	ldr	r3, [pc, #196]	@ (81039a0 <xTaskIncrementTick+0x150>)
 81038dc:	681b      	ldr	r3, [r3, #0]
 81038de:	68db      	ldr	r3, [r3, #12]
 81038e0:	68db      	ldr	r3, [r3, #12]
 81038e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 81038e4:	68bb      	ldr	r3, [r7, #8]
 81038e6:	685b      	ldr	r3, [r3, #4]
 81038e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81038ea:	693a      	ldr	r2, [r7, #16]
 81038ec:	687b      	ldr	r3, [r7, #4]
 81038ee:	429a      	cmp	r2, r3
 81038f0:	d203      	bcs.n	81038fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81038f2:	4a2e      	ldr	r2, [pc, #184]	@ (81039ac <xTaskIncrementTick+0x15c>)
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81038f8:	e02f      	b.n	810395a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81038fa:	68bb      	ldr	r3, [r7, #8]
 81038fc:	3304      	adds	r3, #4
 81038fe:	4618      	mov	r0, r3
 8103900:	f7fe fd2e 	bl	8102360 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8103904:	68bb      	ldr	r3, [r7, #8]
 8103906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103908:	2b00      	cmp	r3, #0
 810390a:	d004      	beq.n	8103916 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810390c:	68bb      	ldr	r3, [r7, #8]
 810390e:	3318      	adds	r3, #24
 8103910:	4618      	mov	r0, r3
 8103912:	f7fe fd25 	bl	8102360 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8103916:	68bb      	ldr	r3, [r7, #8]
 8103918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810391a:	4b25      	ldr	r3, [pc, #148]	@ (81039b0 <xTaskIncrementTick+0x160>)
 810391c:	681b      	ldr	r3, [r3, #0]
 810391e:	429a      	cmp	r2, r3
 8103920:	d903      	bls.n	810392a <xTaskIncrementTick+0xda>
 8103922:	68bb      	ldr	r3, [r7, #8]
 8103924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103926:	4a22      	ldr	r2, [pc, #136]	@ (81039b0 <xTaskIncrementTick+0x160>)
 8103928:	6013      	str	r3, [r2, #0]
 810392a:	68bb      	ldr	r3, [r7, #8]
 810392c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810392e:	4613      	mov	r3, r2
 8103930:	009b      	lsls	r3, r3, #2
 8103932:	4413      	add	r3, r2
 8103934:	009b      	lsls	r3, r3, #2
 8103936:	4a1f      	ldr	r2, [pc, #124]	@ (81039b4 <xTaskIncrementTick+0x164>)
 8103938:	441a      	add	r2, r3
 810393a:	68bb      	ldr	r3, [r7, #8]
 810393c:	3304      	adds	r3, #4
 810393e:	4619      	mov	r1, r3
 8103940:	4610      	mov	r0, r2
 8103942:	f7fe fcb0 	bl	81022a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8103946:	68bb      	ldr	r3, [r7, #8]
 8103948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810394a:	4b1b      	ldr	r3, [pc, #108]	@ (81039b8 <xTaskIncrementTick+0x168>)
 810394c:	681b      	ldr	r3, [r3, #0]
 810394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103950:	429a      	cmp	r2, r3
 8103952:	d3b8      	bcc.n	81038c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8103954:	2301      	movs	r3, #1
 8103956:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103958:	e7b5      	b.n	81038c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810395a:	4b17      	ldr	r3, [pc, #92]	@ (81039b8 <xTaskIncrementTick+0x168>)
 810395c:	681b      	ldr	r3, [r3, #0]
 810395e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103960:	4914      	ldr	r1, [pc, #80]	@ (81039b4 <xTaskIncrementTick+0x164>)
 8103962:	4613      	mov	r3, r2
 8103964:	009b      	lsls	r3, r3, #2
 8103966:	4413      	add	r3, r2
 8103968:	009b      	lsls	r3, r3, #2
 810396a:	440b      	add	r3, r1
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	2b01      	cmp	r3, #1
 8103970:	d901      	bls.n	8103976 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8103972:	2301      	movs	r3, #1
 8103974:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8103976:	4b11      	ldr	r3, [pc, #68]	@ (81039bc <xTaskIncrementTick+0x16c>)
 8103978:	681b      	ldr	r3, [r3, #0]
 810397a:	2b00      	cmp	r3, #0
 810397c:	d007      	beq.n	810398e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810397e:	2301      	movs	r3, #1
 8103980:	617b      	str	r3, [r7, #20]
 8103982:	e004      	b.n	810398e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8103984:	4b0e      	ldr	r3, [pc, #56]	@ (81039c0 <xTaskIncrementTick+0x170>)
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	3301      	adds	r3, #1
 810398a:	4a0d      	ldr	r2, [pc, #52]	@ (81039c0 <xTaskIncrementTick+0x170>)
 810398c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810398e:	697b      	ldr	r3, [r7, #20]
}
 8103990:	4618      	mov	r0, r3
 8103992:	3718      	adds	r7, #24
 8103994:	46bd      	mov	sp, r7
 8103996:	bd80      	pop	{r7, pc}
 8103998:	1000498c 	.word	0x1000498c
 810399c:	10004968 	.word	0x10004968
 81039a0:	1000491c 	.word	0x1000491c
 81039a4:	10004920 	.word	0x10004920
 81039a8:	1000497c 	.word	0x1000497c
 81039ac:	10004984 	.word	0x10004984
 81039b0:	1000496c 	.word	0x1000496c
 81039b4:	10004494 	.word	0x10004494
 81039b8:	10004490 	.word	0x10004490
 81039bc:	10004978 	.word	0x10004978
 81039c0:	10004974 	.word	0x10004974

081039c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81039c4:	b480      	push	{r7}
 81039c6:	b085      	sub	sp, #20
 81039c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81039ca:	4b28      	ldr	r3, [pc, #160]	@ (8103a6c <vTaskSwitchContext+0xa8>)
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	2b00      	cmp	r3, #0
 81039d0:	d003      	beq.n	81039da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81039d2:	4b27      	ldr	r3, [pc, #156]	@ (8103a70 <vTaskSwitchContext+0xac>)
 81039d4:	2201      	movs	r2, #1
 81039d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81039d8:	e042      	b.n	8103a60 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 81039da:	4b25      	ldr	r3, [pc, #148]	@ (8103a70 <vTaskSwitchContext+0xac>)
 81039dc:	2200      	movs	r2, #0
 81039de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81039e0:	4b24      	ldr	r3, [pc, #144]	@ (8103a74 <vTaskSwitchContext+0xb0>)
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	60fb      	str	r3, [r7, #12]
 81039e6:	e011      	b.n	8103a0c <vTaskSwitchContext+0x48>
 81039e8:	68fb      	ldr	r3, [r7, #12]
 81039ea:	2b00      	cmp	r3, #0
 81039ec:	d10b      	bne.n	8103a06 <vTaskSwitchContext+0x42>
	__asm volatile
 81039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81039f2:	f383 8811 	msr	BASEPRI, r3
 81039f6:	f3bf 8f6f 	isb	sy
 81039fa:	f3bf 8f4f 	dsb	sy
 81039fe:	607b      	str	r3, [r7, #4]
}
 8103a00:	bf00      	nop
 8103a02:	bf00      	nop
 8103a04:	e7fd      	b.n	8103a02 <vTaskSwitchContext+0x3e>
 8103a06:	68fb      	ldr	r3, [r7, #12]
 8103a08:	3b01      	subs	r3, #1
 8103a0a:	60fb      	str	r3, [r7, #12]
 8103a0c:	491a      	ldr	r1, [pc, #104]	@ (8103a78 <vTaskSwitchContext+0xb4>)
 8103a0e:	68fa      	ldr	r2, [r7, #12]
 8103a10:	4613      	mov	r3, r2
 8103a12:	009b      	lsls	r3, r3, #2
 8103a14:	4413      	add	r3, r2
 8103a16:	009b      	lsls	r3, r3, #2
 8103a18:	440b      	add	r3, r1
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	2b00      	cmp	r3, #0
 8103a1e:	d0e3      	beq.n	81039e8 <vTaskSwitchContext+0x24>
 8103a20:	68fa      	ldr	r2, [r7, #12]
 8103a22:	4613      	mov	r3, r2
 8103a24:	009b      	lsls	r3, r3, #2
 8103a26:	4413      	add	r3, r2
 8103a28:	009b      	lsls	r3, r3, #2
 8103a2a:	4a13      	ldr	r2, [pc, #76]	@ (8103a78 <vTaskSwitchContext+0xb4>)
 8103a2c:	4413      	add	r3, r2
 8103a2e:	60bb      	str	r3, [r7, #8]
 8103a30:	68bb      	ldr	r3, [r7, #8]
 8103a32:	685b      	ldr	r3, [r3, #4]
 8103a34:	685a      	ldr	r2, [r3, #4]
 8103a36:	68bb      	ldr	r3, [r7, #8]
 8103a38:	605a      	str	r2, [r3, #4]
 8103a3a:	68bb      	ldr	r3, [r7, #8]
 8103a3c:	685a      	ldr	r2, [r3, #4]
 8103a3e:	68bb      	ldr	r3, [r7, #8]
 8103a40:	3308      	adds	r3, #8
 8103a42:	429a      	cmp	r2, r3
 8103a44:	d104      	bne.n	8103a50 <vTaskSwitchContext+0x8c>
 8103a46:	68bb      	ldr	r3, [r7, #8]
 8103a48:	685b      	ldr	r3, [r3, #4]
 8103a4a:	685a      	ldr	r2, [r3, #4]
 8103a4c:	68bb      	ldr	r3, [r7, #8]
 8103a4e:	605a      	str	r2, [r3, #4]
 8103a50:	68bb      	ldr	r3, [r7, #8]
 8103a52:	685b      	ldr	r3, [r3, #4]
 8103a54:	68db      	ldr	r3, [r3, #12]
 8103a56:	4a09      	ldr	r2, [pc, #36]	@ (8103a7c <vTaskSwitchContext+0xb8>)
 8103a58:	6013      	str	r3, [r2, #0]
 8103a5a:	4a06      	ldr	r2, [pc, #24]	@ (8103a74 <vTaskSwitchContext+0xb0>)
 8103a5c:	68fb      	ldr	r3, [r7, #12]
 8103a5e:	6013      	str	r3, [r2, #0]
}
 8103a60:	bf00      	nop
 8103a62:	3714      	adds	r7, #20
 8103a64:	46bd      	mov	sp, r7
 8103a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a6a:	4770      	bx	lr
 8103a6c:	1000498c 	.word	0x1000498c
 8103a70:	10004978 	.word	0x10004978
 8103a74:	1000496c 	.word	0x1000496c
 8103a78:	10004494 	.word	0x10004494
 8103a7c:	10004490 	.word	0x10004490

08103a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8103a80:	b580      	push	{r7, lr}
 8103a82:	b084      	sub	sp, #16
 8103a84:	af00      	add	r7, sp, #0
 8103a86:	6078      	str	r0, [r7, #4]
 8103a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8103a8a:	687b      	ldr	r3, [r7, #4]
 8103a8c:	2b00      	cmp	r3, #0
 8103a8e:	d10b      	bne.n	8103aa8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8103a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103a94:	f383 8811 	msr	BASEPRI, r3
 8103a98:	f3bf 8f6f 	isb	sy
 8103a9c:	f3bf 8f4f 	dsb	sy
 8103aa0:	60fb      	str	r3, [r7, #12]
}
 8103aa2:	bf00      	nop
 8103aa4:	bf00      	nop
 8103aa6:	e7fd      	b.n	8103aa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8103aa8:	4b07      	ldr	r3, [pc, #28]	@ (8103ac8 <vTaskPlaceOnEventList+0x48>)
 8103aaa:	681b      	ldr	r3, [r3, #0]
 8103aac:	3318      	adds	r3, #24
 8103aae:	4619      	mov	r1, r3
 8103ab0:	6878      	ldr	r0, [r7, #4]
 8103ab2:	f7fe fc1c 	bl	81022ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8103ab6:	2101      	movs	r1, #1
 8103ab8:	6838      	ldr	r0, [r7, #0]
 8103aba:	f000 fa81 	bl	8103fc0 <prvAddCurrentTaskToDelayedList>
}
 8103abe:	bf00      	nop
 8103ac0:	3710      	adds	r7, #16
 8103ac2:	46bd      	mov	sp, r7
 8103ac4:	bd80      	pop	{r7, pc}
 8103ac6:	bf00      	nop
 8103ac8:	10004490 	.word	0x10004490

08103acc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8103acc:	b580      	push	{r7, lr}
 8103ace:	b086      	sub	sp, #24
 8103ad0:	af00      	add	r7, sp, #0
 8103ad2:	60f8      	str	r0, [r7, #12]
 8103ad4:	60b9      	str	r1, [r7, #8]
 8103ad6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8103ad8:	68fb      	ldr	r3, [r7, #12]
 8103ada:	2b00      	cmp	r3, #0
 8103adc:	d10b      	bne.n	8103af6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8103ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103ae2:	f383 8811 	msr	BASEPRI, r3
 8103ae6:	f3bf 8f6f 	isb	sy
 8103aea:	f3bf 8f4f 	dsb	sy
 8103aee:	617b      	str	r3, [r7, #20]
}
 8103af0:	bf00      	nop
 8103af2:	bf00      	nop
 8103af4:	e7fd      	b.n	8103af2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8103af6:	4b0a      	ldr	r3, [pc, #40]	@ (8103b20 <vTaskPlaceOnEventListRestricted+0x54>)
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	3318      	adds	r3, #24
 8103afc:	4619      	mov	r1, r3
 8103afe:	68f8      	ldr	r0, [r7, #12]
 8103b00:	f7fe fbd1 	bl	81022a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	2b00      	cmp	r3, #0
 8103b08:	d002      	beq.n	8103b10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8103b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8103b0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8103b10:	6879      	ldr	r1, [r7, #4]
 8103b12:	68b8      	ldr	r0, [r7, #8]
 8103b14:	f000 fa54 	bl	8103fc0 <prvAddCurrentTaskToDelayedList>
	}
 8103b18:	bf00      	nop
 8103b1a:	3718      	adds	r7, #24
 8103b1c:	46bd      	mov	sp, r7
 8103b1e:	bd80      	pop	{r7, pc}
 8103b20:	10004490 	.word	0x10004490

08103b24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8103b24:	b580      	push	{r7, lr}
 8103b26:	b086      	sub	sp, #24
 8103b28:	af00      	add	r7, sp, #0
 8103b2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	68db      	ldr	r3, [r3, #12]
 8103b30:	68db      	ldr	r3, [r3, #12]
 8103b32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8103b34:	693b      	ldr	r3, [r7, #16]
 8103b36:	2b00      	cmp	r3, #0
 8103b38:	d10b      	bne.n	8103b52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8103b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103b3e:	f383 8811 	msr	BASEPRI, r3
 8103b42:	f3bf 8f6f 	isb	sy
 8103b46:	f3bf 8f4f 	dsb	sy
 8103b4a:	60fb      	str	r3, [r7, #12]
}
 8103b4c:	bf00      	nop
 8103b4e:	bf00      	nop
 8103b50:	e7fd      	b.n	8103b4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8103b52:	693b      	ldr	r3, [r7, #16]
 8103b54:	3318      	adds	r3, #24
 8103b56:	4618      	mov	r0, r3
 8103b58:	f7fe fc02 	bl	8102360 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8103bd4 <xTaskRemoveFromEventList+0xb0>)
 8103b5e:	681b      	ldr	r3, [r3, #0]
 8103b60:	2b00      	cmp	r3, #0
 8103b62:	d11d      	bne.n	8103ba0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8103b64:	693b      	ldr	r3, [r7, #16]
 8103b66:	3304      	adds	r3, #4
 8103b68:	4618      	mov	r0, r3
 8103b6a:	f7fe fbf9 	bl	8102360 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8103b6e:	693b      	ldr	r3, [r7, #16]
 8103b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103b72:	4b19      	ldr	r3, [pc, #100]	@ (8103bd8 <xTaskRemoveFromEventList+0xb4>)
 8103b74:	681b      	ldr	r3, [r3, #0]
 8103b76:	429a      	cmp	r2, r3
 8103b78:	d903      	bls.n	8103b82 <xTaskRemoveFromEventList+0x5e>
 8103b7a:	693b      	ldr	r3, [r7, #16]
 8103b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103b7e:	4a16      	ldr	r2, [pc, #88]	@ (8103bd8 <xTaskRemoveFromEventList+0xb4>)
 8103b80:	6013      	str	r3, [r2, #0]
 8103b82:	693b      	ldr	r3, [r7, #16]
 8103b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103b86:	4613      	mov	r3, r2
 8103b88:	009b      	lsls	r3, r3, #2
 8103b8a:	4413      	add	r3, r2
 8103b8c:	009b      	lsls	r3, r3, #2
 8103b8e:	4a13      	ldr	r2, [pc, #76]	@ (8103bdc <xTaskRemoveFromEventList+0xb8>)
 8103b90:	441a      	add	r2, r3
 8103b92:	693b      	ldr	r3, [r7, #16]
 8103b94:	3304      	adds	r3, #4
 8103b96:	4619      	mov	r1, r3
 8103b98:	4610      	mov	r0, r2
 8103b9a:	f7fe fb84 	bl	81022a6 <vListInsertEnd>
 8103b9e:	e005      	b.n	8103bac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8103ba0:	693b      	ldr	r3, [r7, #16]
 8103ba2:	3318      	adds	r3, #24
 8103ba4:	4619      	mov	r1, r3
 8103ba6:	480e      	ldr	r0, [pc, #56]	@ (8103be0 <xTaskRemoveFromEventList+0xbc>)
 8103ba8:	f7fe fb7d 	bl	81022a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8103bac:	693b      	ldr	r3, [r7, #16]
 8103bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8103be4 <xTaskRemoveFromEventList+0xc0>)
 8103bb2:	681b      	ldr	r3, [r3, #0]
 8103bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103bb6:	429a      	cmp	r2, r3
 8103bb8:	d905      	bls.n	8103bc6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8103bba:	2301      	movs	r3, #1
 8103bbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8103bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8103be8 <xTaskRemoveFromEventList+0xc4>)
 8103bc0:	2201      	movs	r2, #1
 8103bc2:	601a      	str	r2, [r3, #0]
 8103bc4:	e001      	b.n	8103bca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8103bc6:	2300      	movs	r3, #0
 8103bc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8103bca:	697b      	ldr	r3, [r7, #20]
}
 8103bcc:	4618      	mov	r0, r3
 8103bce:	3718      	adds	r7, #24
 8103bd0:	46bd      	mov	sp, r7
 8103bd2:	bd80      	pop	{r7, pc}
 8103bd4:	1000498c 	.word	0x1000498c
 8103bd8:	1000496c 	.word	0x1000496c
 8103bdc:	10004494 	.word	0x10004494
 8103be0:	10004924 	.word	0x10004924
 8103be4:	10004490 	.word	0x10004490
 8103be8:	10004978 	.word	0x10004978

08103bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8103bec:	b480      	push	{r7}
 8103bee:	b083      	sub	sp, #12
 8103bf0:	af00      	add	r7, sp, #0
 8103bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8103bf4:	4b06      	ldr	r3, [pc, #24]	@ (8103c10 <vTaskInternalSetTimeOutState+0x24>)
 8103bf6:	681a      	ldr	r2, [r3, #0]
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8103bfc:	4b05      	ldr	r3, [pc, #20]	@ (8103c14 <vTaskInternalSetTimeOutState+0x28>)
 8103bfe:	681a      	ldr	r2, [r3, #0]
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	605a      	str	r2, [r3, #4]
}
 8103c04:	bf00      	nop
 8103c06:	370c      	adds	r7, #12
 8103c08:	46bd      	mov	sp, r7
 8103c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c0e:	4770      	bx	lr
 8103c10:	1000497c 	.word	0x1000497c
 8103c14:	10004968 	.word	0x10004968

08103c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8103c18:	b580      	push	{r7, lr}
 8103c1a:	b088      	sub	sp, #32
 8103c1c:	af00      	add	r7, sp, #0
 8103c1e:	6078      	str	r0, [r7, #4]
 8103c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	2b00      	cmp	r3, #0
 8103c26:	d10b      	bne.n	8103c40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8103c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103c2c:	f383 8811 	msr	BASEPRI, r3
 8103c30:	f3bf 8f6f 	isb	sy
 8103c34:	f3bf 8f4f 	dsb	sy
 8103c38:	613b      	str	r3, [r7, #16]
}
 8103c3a:	bf00      	nop
 8103c3c:	bf00      	nop
 8103c3e:	e7fd      	b.n	8103c3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8103c40:	683b      	ldr	r3, [r7, #0]
 8103c42:	2b00      	cmp	r3, #0
 8103c44:	d10b      	bne.n	8103c5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8103c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103c4a:	f383 8811 	msr	BASEPRI, r3
 8103c4e:	f3bf 8f6f 	isb	sy
 8103c52:	f3bf 8f4f 	dsb	sy
 8103c56:	60fb      	str	r3, [r7, #12]
}
 8103c58:	bf00      	nop
 8103c5a:	bf00      	nop
 8103c5c:	e7fd      	b.n	8103c5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8103c5e:	f7fe fcdb 	bl	8102618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8103c62:	4b1d      	ldr	r3, [pc, #116]	@ (8103cd8 <xTaskCheckForTimeOut+0xc0>)
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	685b      	ldr	r3, [r3, #4]
 8103c6c:	69ba      	ldr	r2, [r7, #24]
 8103c6e:	1ad3      	subs	r3, r2, r3
 8103c70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8103c72:	683b      	ldr	r3, [r7, #0]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c7a:	d102      	bne.n	8103c82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8103c7c:	2300      	movs	r3, #0
 8103c7e:	61fb      	str	r3, [r7, #28]
 8103c80:	e023      	b.n	8103cca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681a      	ldr	r2, [r3, #0]
 8103c86:	4b15      	ldr	r3, [pc, #84]	@ (8103cdc <xTaskCheckForTimeOut+0xc4>)
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	429a      	cmp	r2, r3
 8103c8c:	d007      	beq.n	8103c9e <xTaskCheckForTimeOut+0x86>
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	685b      	ldr	r3, [r3, #4]
 8103c92:	69ba      	ldr	r2, [r7, #24]
 8103c94:	429a      	cmp	r2, r3
 8103c96:	d302      	bcc.n	8103c9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8103c98:	2301      	movs	r3, #1
 8103c9a:	61fb      	str	r3, [r7, #28]
 8103c9c:	e015      	b.n	8103cca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8103c9e:	683b      	ldr	r3, [r7, #0]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	697a      	ldr	r2, [r7, #20]
 8103ca4:	429a      	cmp	r2, r3
 8103ca6:	d20b      	bcs.n	8103cc0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8103ca8:	683b      	ldr	r3, [r7, #0]
 8103caa:	681a      	ldr	r2, [r3, #0]
 8103cac:	697b      	ldr	r3, [r7, #20]
 8103cae:	1ad2      	subs	r2, r2, r3
 8103cb0:	683b      	ldr	r3, [r7, #0]
 8103cb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8103cb4:	6878      	ldr	r0, [r7, #4]
 8103cb6:	f7ff ff99 	bl	8103bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8103cba:	2300      	movs	r3, #0
 8103cbc:	61fb      	str	r3, [r7, #28]
 8103cbe:	e004      	b.n	8103cca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8103cc0:	683b      	ldr	r3, [r7, #0]
 8103cc2:	2200      	movs	r2, #0
 8103cc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8103cc6:	2301      	movs	r3, #1
 8103cc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8103cca:	f7fe fcd7 	bl	810267c <vPortExitCritical>

	return xReturn;
 8103cce:	69fb      	ldr	r3, [r7, #28]
}
 8103cd0:	4618      	mov	r0, r3
 8103cd2:	3720      	adds	r7, #32
 8103cd4:	46bd      	mov	sp, r7
 8103cd6:	bd80      	pop	{r7, pc}
 8103cd8:	10004968 	.word	0x10004968
 8103cdc:	1000497c 	.word	0x1000497c

08103ce0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8103ce0:	b480      	push	{r7}
 8103ce2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8103ce4:	4b03      	ldr	r3, [pc, #12]	@ (8103cf4 <vTaskMissedYield+0x14>)
 8103ce6:	2201      	movs	r2, #1
 8103ce8:	601a      	str	r2, [r3, #0]
}
 8103cea:	bf00      	nop
 8103cec:	46bd      	mov	sp, r7
 8103cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf2:	4770      	bx	lr
 8103cf4:	10004978 	.word	0x10004978

08103cf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8103cf8:	b580      	push	{r7, lr}
 8103cfa:	b082      	sub	sp, #8
 8103cfc:	af00      	add	r7, sp, #0
 8103cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8103d00:	f000 f852 	bl	8103da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8103d04:	4b06      	ldr	r3, [pc, #24]	@ (8103d20 <prvIdleTask+0x28>)
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	2b01      	cmp	r3, #1
 8103d0a:	d9f9      	bls.n	8103d00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8103d0c:	4b05      	ldr	r3, [pc, #20]	@ (8103d24 <prvIdleTask+0x2c>)
 8103d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8103d12:	601a      	str	r2, [r3, #0]
 8103d14:	f3bf 8f4f 	dsb	sy
 8103d18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8103d1c:	e7f0      	b.n	8103d00 <prvIdleTask+0x8>
 8103d1e:	bf00      	nop
 8103d20:	10004494 	.word	0x10004494
 8103d24:	e000ed04 	.word	0xe000ed04

08103d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8103d28:	b580      	push	{r7, lr}
 8103d2a:	b082      	sub	sp, #8
 8103d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8103d2e:	2300      	movs	r3, #0
 8103d30:	607b      	str	r3, [r7, #4]
 8103d32:	e00c      	b.n	8103d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8103d34:	687a      	ldr	r2, [r7, #4]
 8103d36:	4613      	mov	r3, r2
 8103d38:	009b      	lsls	r3, r3, #2
 8103d3a:	4413      	add	r3, r2
 8103d3c:	009b      	lsls	r3, r3, #2
 8103d3e:	4a12      	ldr	r2, [pc, #72]	@ (8103d88 <prvInitialiseTaskLists+0x60>)
 8103d40:	4413      	add	r3, r2
 8103d42:	4618      	mov	r0, r3
 8103d44:	f7fe fa82 	bl	810224c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	3301      	adds	r3, #1
 8103d4c:	607b      	str	r3, [r7, #4]
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	2b37      	cmp	r3, #55	@ 0x37
 8103d52:	d9ef      	bls.n	8103d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8103d54:	480d      	ldr	r0, [pc, #52]	@ (8103d8c <prvInitialiseTaskLists+0x64>)
 8103d56:	f7fe fa79 	bl	810224c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8103d5a:	480d      	ldr	r0, [pc, #52]	@ (8103d90 <prvInitialiseTaskLists+0x68>)
 8103d5c:	f7fe fa76 	bl	810224c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8103d60:	480c      	ldr	r0, [pc, #48]	@ (8103d94 <prvInitialiseTaskLists+0x6c>)
 8103d62:	f7fe fa73 	bl	810224c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8103d66:	480c      	ldr	r0, [pc, #48]	@ (8103d98 <prvInitialiseTaskLists+0x70>)
 8103d68:	f7fe fa70 	bl	810224c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8103d6c:	480b      	ldr	r0, [pc, #44]	@ (8103d9c <prvInitialiseTaskLists+0x74>)
 8103d6e:	f7fe fa6d 	bl	810224c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8103d72:	4b0b      	ldr	r3, [pc, #44]	@ (8103da0 <prvInitialiseTaskLists+0x78>)
 8103d74:	4a05      	ldr	r2, [pc, #20]	@ (8103d8c <prvInitialiseTaskLists+0x64>)
 8103d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8103d78:	4b0a      	ldr	r3, [pc, #40]	@ (8103da4 <prvInitialiseTaskLists+0x7c>)
 8103d7a:	4a05      	ldr	r2, [pc, #20]	@ (8103d90 <prvInitialiseTaskLists+0x68>)
 8103d7c:	601a      	str	r2, [r3, #0]
}
 8103d7e:	bf00      	nop
 8103d80:	3708      	adds	r7, #8
 8103d82:	46bd      	mov	sp, r7
 8103d84:	bd80      	pop	{r7, pc}
 8103d86:	bf00      	nop
 8103d88:	10004494 	.word	0x10004494
 8103d8c:	100048f4 	.word	0x100048f4
 8103d90:	10004908 	.word	0x10004908
 8103d94:	10004924 	.word	0x10004924
 8103d98:	10004938 	.word	0x10004938
 8103d9c:	10004950 	.word	0x10004950
 8103da0:	1000491c 	.word	0x1000491c
 8103da4:	10004920 	.word	0x10004920

08103da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8103da8:	b580      	push	{r7, lr}
 8103daa:	b082      	sub	sp, #8
 8103dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8103dae:	e019      	b.n	8103de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8103db0:	f7fe fc32 	bl	8102618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103db4:	4b10      	ldr	r3, [pc, #64]	@ (8103df8 <prvCheckTasksWaitingTermination+0x50>)
 8103db6:	68db      	ldr	r3, [r3, #12]
 8103db8:	68db      	ldr	r3, [r3, #12]
 8103dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	3304      	adds	r3, #4
 8103dc0:	4618      	mov	r0, r3
 8103dc2:	f7fe facd 	bl	8102360 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8103dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8103dfc <prvCheckTasksWaitingTermination+0x54>)
 8103dc8:	681b      	ldr	r3, [r3, #0]
 8103dca:	3b01      	subs	r3, #1
 8103dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8103dfc <prvCheckTasksWaitingTermination+0x54>)
 8103dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8103dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8103e00 <prvCheckTasksWaitingTermination+0x58>)
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	3b01      	subs	r3, #1
 8103dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8103e00 <prvCheckTasksWaitingTermination+0x58>)
 8103dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8103dda:	f7fe fc4f 	bl	810267c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8103dde:	6878      	ldr	r0, [r7, #4]
 8103de0:	f000 f810 	bl	8103e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8103de4:	4b06      	ldr	r3, [pc, #24]	@ (8103e00 <prvCheckTasksWaitingTermination+0x58>)
 8103de6:	681b      	ldr	r3, [r3, #0]
 8103de8:	2b00      	cmp	r3, #0
 8103dea:	d1e1      	bne.n	8103db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8103dec:	bf00      	nop
 8103dee:	bf00      	nop
 8103df0:	3708      	adds	r7, #8
 8103df2:	46bd      	mov	sp, r7
 8103df4:	bd80      	pop	{r7, pc}
 8103df6:	bf00      	nop
 8103df8:	10004938 	.word	0x10004938
 8103dfc:	10004964 	.word	0x10004964
 8103e00:	1000494c 	.word	0x1000494c

08103e04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8103e04:	b580      	push	{r7, lr}
 8103e06:	b084      	sub	sp, #16
 8103e08:	af00      	add	r7, sp, #0
 8103e0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8103e12:	2b00      	cmp	r3, #0
 8103e14:	d108      	bne.n	8103e28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8103e16:	687b      	ldr	r3, [r7, #4]
 8103e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103e1a:	4618      	mov	r0, r3
 8103e1c:	f7fe f8f6 	bl	810200c <vPortFree>
				vPortFree( pxTCB );
 8103e20:	6878      	ldr	r0, [r7, #4]
 8103e22:	f7fe f8f3 	bl	810200c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8103e26:	e019      	b.n	8103e5c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8103e2e:	2b01      	cmp	r3, #1
 8103e30:	d103      	bne.n	8103e3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8103e32:	6878      	ldr	r0, [r7, #4]
 8103e34:	f7fe f8ea 	bl	810200c <vPortFree>
	}
 8103e38:	e010      	b.n	8103e5c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8103e40:	2b02      	cmp	r3, #2
 8103e42:	d00b      	beq.n	8103e5c <prvDeleteTCB+0x58>
	__asm volatile
 8103e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103e48:	f383 8811 	msr	BASEPRI, r3
 8103e4c:	f3bf 8f6f 	isb	sy
 8103e50:	f3bf 8f4f 	dsb	sy
 8103e54:	60fb      	str	r3, [r7, #12]
}
 8103e56:	bf00      	nop
 8103e58:	bf00      	nop
 8103e5a:	e7fd      	b.n	8103e58 <prvDeleteTCB+0x54>
	}
 8103e5c:	bf00      	nop
 8103e5e:	3710      	adds	r7, #16
 8103e60:	46bd      	mov	sp, r7
 8103e62:	bd80      	pop	{r7, pc}

08103e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8103e64:	b480      	push	{r7}
 8103e66:	b083      	sub	sp, #12
 8103e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8103e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8103e9c <prvResetNextTaskUnblockTime+0x38>)
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	2b00      	cmp	r3, #0
 8103e72:	d104      	bne.n	8103e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8103e74:	4b0a      	ldr	r3, [pc, #40]	@ (8103ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8103e76:	f04f 32ff 	mov.w	r2, #4294967295
 8103e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8103e7c:	e008      	b.n	8103e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103e7e:	4b07      	ldr	r3, [pc, #28]	@ (8103e9c <prvResetNextTaskUnblockTime+0x38>)
 8103e80:	681b      	ldr	r3, [r3, #0]
 8103e82:	68db      	ldr	r3, [r3, #12]
 8103e84:	68db      	ldr	r3, [r3, #12]
 8103e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	685b      	ldr	r3, [r3, #4]
 8103e8c:	4a04      	ldr	r2, [pc, #16]	@ (8103ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8103e8e:	6013      	str	r3, [r2, #0]
}
 8103e90:	bf00      	nop
 8103e92:	370c      	adds	r7, #12
 8103e94:	46bd      	mov	sp, r7
 8103e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e9a:	4770      	bx	lr
 8103e9c:	1000491c 	.word	0x1000491c
 8103ea0:	10004984 	.word	0x10004984

08103ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8103ea4:	b480      	push	{r7}
 8103ea6:	b083      	sub	sp, #12
 8103ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8103eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8103ed8 <xTaskGetSchedulerState+0x34>)
 8103eac:	681b      	ldr	r3, [r3, #0]
 8103eae:	2b00      	cmp	r3, #0
 8103eb0:	d102      	bne.n	8103eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8103eb2:	2301      	movs	r3, #1
 8103eb4:	607b      	str	r3, [r7, #4]
 8103eb6:	e008      	b.n	8103eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8103eb8:	4b08      	ldr	r3, [pc, #32]	@ (8103edc <xTaskGetSchedulerState+0x38>)
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d102      	bne.n	8103ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8103ec0:	2302      	movs	r3, #2
 8103ec2:	607b      	str	r3, [r7, #4]
 8103ec4:	e001      	b.n	8103eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8103ec6:	2300      	movs	r3, #0
 8103ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8103eca:	687b      	ldr	r3, [r7, #4]
	}
 8103ecc:	4618      	mov	r0, r3
 8103ece:	370c      	adds	r7, #12
 8103ed0:	46bd      	mov	sp, r7
 8103ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ed6:	4770      	bx	lr
 8103ed8:	10004970 	.word	0x10004970
 8103edc:	1000498c 	.word	0x1000498c

08103ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8103ee0:	b580      	push	{r7, lr}
 8103ee2:	b086      	sub	sp, #24
 8103ee4:	af00      	add	r7, sp, #0
 8103ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8103ee8:	687b      	ldr	r3, [r7, #4]
 8103eea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8103eec:	2300      	movs	r3, #0
 8103eee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	2b00      	cmp	r3, #0
 8103ef4:	d058      	beq.n	8103fa8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8103ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8103fb4 <xTaskPriorityDisinherit+0xd4>)
 8103ef8:	681b      	ldr	r3, [r3, #0]
 8103efa:	693a      	ldr	r2, [r7, #16]
 8103efc:	429a      	cmp	r2, r3
 8103efe:	d00b      	beq.n	8103f18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8103f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103f04:	f383 8811 	msr	BASEPRI, r3
 8103f08:	f3bf 8f6f 	isb	sy
 8103f0c:	f3bf 8f4f 	dsb	sy
 8103f10:	60fb      	str	r3, [r7, #12]
}
 8103f12:	bf00      	nop
 8103f14:	bf00      	nop
 8103f16:	e7fd      	b.n	8103f14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8103f18:	693b      	ldr	r3, [r7, #16]
 8103f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f1c:	2b00      	cmp	r3, #0
 8103f1e:	d10b      	bne.n	8103f38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8103f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103f24:	f383 8811 	msr	BASEPRI, r3
 8103f28:	f3bf 8f6f 	isb	sy
 8103f2c:	f3bf 8f4f 	dsb	sy
 8103f30:	60bb      	str	r3, [r7, #8]
}
 8103f32:	bf00      	nop
 8103f34:	bf00      	nop
 8103f36:	e7fd      	b.n	8103f34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8103f38:	693b      	ldr	r3, [r7, #16]
 8103f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f3c:	1e5a      	subs	r2, r3, #1
 8103f3e:	693b      	ldr	r3, [r7, #16]
 8103f40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8103f42:	693b      	ldr	r3, [r7, #16]
 8103f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103f46:	693b      	ldr	r3, [r7, #16]
 8103f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103f4a:	429a      	cmp	r2, r3
 8103f4c:	d02c      	beq.n	8103fa8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8103f4e:	693b      	ldr	r3, [r7, #16]
 8103f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d128      	bne.n	8103fa8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103f56:	693b      	ldr	r3, [r7, #16]
 8103f58:	3304      	adds	r3, #4
 8103f5a:	4618      	mov	r0, r3
 8103f5c:	f7fe fa00 	bl	8102360 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8103f60:	693b      	ldr	r3, [r7, #16]
 8103f62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8103f64:	693b      	ldr	r3, [r7, #16]
 8103f66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103f68:	693b      	ldr	r3, [r7, #16]
 8103f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8103f70:	693b      	ldr	r3, [r7, #16]
 8103f72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8103f74:	693b      	ldr	r3, [r7, #16]
 8103f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103f78:	4b0f      	ldr	r3, [pc, #60]	@ (8103fb8 <xTaskPriorityDisinherit+0xd8>)
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	429a      	cmp	r2, r3
 8103f7e:	d903      	bls.n	8103f88 <xTaskPriorityDisinherit+0xa8>
 8103f80:	693b      	ldr	r3, [r7, #16]
 8103f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f84:	4a0c      	ldr	r2, [pc, #48]	@ (8103fb8 <xTaskPriorityDisinherit+0xd8>)
 8103f86:	6013      	str	r3, [r2, #0]
 8103f88:	693b      	ldr	r3, [r7, #16]
 8103f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103f8c:	4613      	mov	r3, r2
 8103f8e:	009b      	lsls	r3, r3, #2
 8103f90:	4413      	add	r3, r2
 8103f92:	009b      	lsls	r3, r3, #2
 8103f94:	4a09      	ldr	r2, [pc, #36]	@ (8103fbc <xTaskPriorityDisinherit+0xdc>)
 8103f96:	441a      	add	r2, r3
 8103f98:	693b      	ldr	r3, [r7, #16]
 8103f9a:	3304      	adds	r3, #4
 8103f9c:	4619      	mov	r1, r3
 8103f9e:	4610      	mov	r0, r2
 8103fa0:	f7fe f981 	bl	81022a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8103fa4:	2301      	movs	r3, #1
 8103fa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8103fa8:	697b      	ldr	r3, [r7, #20]
	}
 8103faa:	4618      	mov	r0, r3
 8103fac:	3718      	adds	r7, #24
 8103fae:	46bd      	mov	sp, r7
 8103fb0:	bd80      	pop	{r7, pc}
 8103fb2:	bf00      	nop
 8103fb4:	10004490 	.word	0x10004490
 8103fb8:	1000496c 	.word	0x1000496c
 8103fbc:	10004494 	.word	0x10004494

08103fc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8103fc0:	b580      	push	{r7, lr}
 8103fc2:	b084      	sub	sp, #16
 8103fc4:	af00      	add	r7, sp, #0
 8103fc6:	6078      	str	r0, [r7, #4]
 8103fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8103fca:	4b21      	ldr	r3, [pc, #132]	@ (8104050 <prvAddCurrentTaskToDelayedList+0x90>)
 8103fcc:	681b      	ldr	r3, [r3, #0]
 8103fce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103fd0:	4b20      	ldr	r3, [pc, #128]	@ (8104054 <prvAddCurrentTaskToDelayedList+0x94>)
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	3304      	adds	r3, #4
 8103fd6:	4618      	mov	r0, r3
 8103fd8:	f7fe f9c2 	bl	8102360 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103fe2:	d10a      	bne.n	8103ffa <prvAddCurrentTaskToDelayedList+0x3a>
 8103fe4:	683b      	ldr	r3, [r7, #0]
 8103fe6:	2b00      	cmp	r3, #0
 8103fe8:	d007      	beq.n	8103ffa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103fea:	4b1a      	ldr	r3, [pc, #104]	@ (8104054 <prvAddCurrentTaskToDelayedList+0x94>)
 8103fec:	681b      	ldr	r3, [r3, #0]
 8103fee:	3304      	adds	r3, #4
 8103ff0:	4619      	mov	r1, r3
 8103ff2:	4819      	ldr	r0, [pc, #100]	@ (8104058 <prvAddCurrentTaskToDelayedList+0x98>)
 8103ff4:	f7fe f957 	bl	81022a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8103ff8:	e026      	b.n	8104048 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8103ffa:	68fa      	ldr	r2, [r7, #12]
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	4413      	add	r3, r2
 8104000:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8104002:	4b14      	ldr	r3, [pc, #80]	@ (8104054 <prvAddCurrentTaskToDelayedList+0x94>)
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	68ba      	ldr	r2, [r7, #8]
 8104008:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810400a:	68ba      	ldr	r2, [r7, #8]
 810400c:	68fb      	ldr	r3, [r7, #12]
 810400e:	429a      	cmp	r2, r3
 8104010:	d209      	bcs.n	8104026 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8104012:	4b12      	ldr	r3, [pc, #72]	@ (810405c <prvAddCurrentTaskToDelayedList+0x9c>)
 8104014:	681a      	ldr	r2, [r3, #0]
 8104016:	4b0f      	ldr	r3, [pc, #60]	@ (8104054 <prvAddCurrentTaskToDelayedList+0x94>)
 8104018:	681b      	ldr	r3, [r3, #0]
 810401a:	3304      	adds	r3, #4
 810401c:	4619      	mov	r1, r3
 810401e:	4610      	mov	r0, r2
 8104020:	f7fe f965 	bl	81022ee <vListInsert>
}
 8104024:	e010      	b.n	8104048 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8104026:	4b0e      	ldr	r3, [pc, #56]	@ (8104060 <prvAddCurrentTaskToDelayedList+0xa0>)
 8104028:	681a      	ldr	r2, [r3, #0]
 810402a:	4b0a      	ldr	r3, [pc, #40]	@ (8104054 <prvAddCurrentTaskToDelayedList+0x94>)
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	3304      	adds	r3, #4
 8104030:	4619      	mov	r1, r3
 8104032:	4610      	mov	r0, r2
 8104034:	f7fe f95b 	bl	81022ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8104038:	4b0a      	ldr	r3, [pc, #40]	@ (8104064 <prvAddCurrentTaskToDelayedList+0xa4>)
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	68ba      	ldr	r2, [r7, #8]
 810403e:	429a      	cmp	r2, r3
 8104040:	d202      	bcs.n	8104048 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8104042:	4a08      	ldr	r2, [pc, #32]	@ (8104064 <prvAddCurrentTaskToDelayedList+0xa4>)
 8104044:	68bb      	ldr	r3, [r7, #8]
 8104046:	6013      	str	r3, [r2, #0]
}
 8104048:	bf00      	nop
 810404a:	3710      	adds	r7, #16
 810404c:	46bd      	mov	sp, r7
 810404e:	bd80      	pop	{r7, pc}
 8104050:	10004968 	.word	0x10004968
 8104054:	10004490 	.word	0x10004490
 8104058:	10004950 	.word	0x10004950
 810405c:	10004920 	.word	0x10004920
 8104060:	1000491c 	.word	0x1000491c
 8104064:	10004984 	.word	0x10004984

08104068 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8104068:	b580      	push	{r7, lr}
 810406a:	b08a      	sub	sp, #40	@ 0x28
 810406c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810406e:	2300      	movs	r3, #0
 8104070:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8104072:	f000 fb13 	bl	810469c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8104076:	4b1d      	ldr	r3, [pc, #116]	@ (81040ec <xTimerCreateTimerTask+0x84>)
 8104078:	681b      	ldr	r3, [r3, #0]
 810407a:	2b00      	cmp	r3, #0
 810407c:	d021      	beq.n	81040c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810407e:	2300      	movs	r3, #0
 8104080:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8104082:	2300      	movs	r3, #0
 8104084:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8104086:	1d3a      	adds	r2, r7, #4
 8104088:	f107 0108 	add.w	r1, r7, #8
 810408c:	f107 030c 	add.w	r3, r7, #12
 8104090:	4618      	mov	r0, r3
 8104092:	f7fd fed3 	bl	8101e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8104096:	6879      	ldr	r1, [r7, #4]
 8104098:	68bb      	ldr	r3, [r7, #8]
 810409a:	68fa      	ldr	r2, [r7, #12]
 810409c:	9202      	str	r2, [sp, #8]
 810409e:	9301      	str	r3, [sp, #4]
 81040a0:	2302      	movs	r3, #2
 81040a2:	9300      	str	r3, [sp, #0]
 81040a4:	2300      	movs	r3, #0
 81040a6:	460a      	mov	r2, r1
 81040a8:	4911      	ldr	r1, [pc, #68]	@ (81040f0 <xTimerCreateTimerTask+0x88>)
 81040aa:	4812      	ldr	r0, [pc, #72]	@ (81040f4 <xTimerCreateTimerTask+0x8c>)
 81040ac:	f7ff f8d0 	bl	8103250 <xTaskCreateStatic>
 81040b0:	4603      	mov	r3, r0
 81040b2:	4a11      	ldr	r2, [pc, #68]	@ (81040f8 <xTimerCreateTimerTask+0x90>)
 81040b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81040b6:	4b10      	ldr	r3, [pc, #64]	@ (81040f8 <xTimerCreateTimerTask+0x90>)
 81040b8:	681b      	ldr	r3, [r3, #0]
 81040ba:	2b00      	cmp	r3, #0
 81040bc:	d001      	beq.n	81040c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81040be:	2301      	movs	r3, #1
 81040c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81040c2:	697b      	ldr	r3, [r7, #20]
 81040c4:	2b00      	cmp	r3, #0
 81040c6:	d10b      	bne.n	81040e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 81040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81040cc:	f383 8811 	msr	BASEPRI, r3
 81040d0:	f3bf 8f6f 	isb	sy
 81040d4:	f3bf 8f4f 	dsb	sy
 81040d8:	613b      	str	r3, [r7, #16]
}
 81040da:	bf00      	nop
 81040dc:	bf00      	nop
 81040de:	e7fd      	b.n	81040dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 81040e0:	697b      	ldr	r3, [r7, #20]
}
 81040e2:	4618      	mov	r0, r3
 81040e4:	3718      	adds	r7, #24
 81040e6:	46bd      	mov	sp, r7
 81040e8:	bd80      	pop	{r7, pc}
 81040ea:	bf00      	nop
 81040ec:	100049c0 	.word	0x100049c0
 81040f0:	08105098 	.word	0x08105098
 81040f4:	08104235 	.word	0x08104235
 81040f8:	100049c4 	.word	0x100049c4

081040fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81040fc:	b580      	push	{r7, lr}
 81040fe:	b08a      	sub	sp, #40	@ 0x28
 8104100:	af00      	add	r7, sp, #0
 8104102:	60f8      	str	r0, [r7, #12]
 8104104:	60b9      	str	r1, [r7, #8]
 8104106:	607a      	str	r2, [r7, #4]
 8104108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810410a:	2300      	movs	r3, #0
 810410c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810410e:	68fb      	ldr	r3, [r7, #12]
 8104110:	2b00      	cmp	r3, #0
 8104112:	d10b      	bne.n	810412c <xTimerGenericCommand+0x30>
	__asm volatile
 8104114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104118:	f383 8811 	msr	BASEPRI, r3
 810411c:	f3bf 8f6f 	isb	sy
 8104120:	f3bf 8f4f 	dsb	sy
 8104124:	623b      	str	r3, [r7, #32]
}
 8104126:	bf00      	nop
 8104128:	bf00      	nop
 810412a:	e7fd      	b.n	8104128 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810412c:	4b19      	ldr	r3, [pc, #100]	@ (8104194 <xTimerGenericCommand+0x98>)
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	2b00      	cmp	r3, #0
 8104132:	d02a      	beq.n	810418a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8104134:	68bb      	ldr	r3, [r7, #8]
 8104136:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8104140:	68bb      	ldr	r3, [r7, #8]
 8104142:	2b05      	cmp	r3, #5
 8104144:	dc18      	bgt.n	8104178 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8104146:	f7ff fead 	bl	8103ea4 <xTaskGetSchedulerState>
 810414a:	4603      	mov	r3, r0
 810414c:	2b02      	cmp	r3, #2
 810414e:	d109      	bne.n	8104164 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8104150:	4b10      	ldr	r3, [pc, #64]	@ (8104194 <xTimerGenericCommand+0x98>)
 8104152:	6818      	ldr	r0, [r3, #0]
 8104154:	f107 0110 	add.w	r1, r7, #16
 8104158:	2300      	movs	r3, #0
 810415a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810415c:	f7fe fc88 	bl	8102a70 <xQueueGenericSend>
 8104160:	6278      	str	r0, [r7, #36]	@ 0x24
 8104162:	e012      	b.n	810418a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8104164:	4b0b      	ldr	r3, [pc, #44]	@ (8104194 <xTimerGenericCommand+0x98>)
 8104166:	6818      	ldr	r0, [r3, #0]
 8104168:	f107 0110 	add.w	r1, r7, #16
 810416c:	2300      	movs	r3, #0
 810416e:	2200      	movs	r2, #0
 8104170:	f7fe fc7e 	bl	8102a70 <xQueueGenericSend>
 8104174:	6278      	str	r0, [r7, #36]	@ 0x24
 8104176:	e008      	b.n	810418a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8104178:	4b06      	ldr	r3, [pc, #24]	@ (8104194 <xTimerGenericCommand+0x98>)
 810417a:	6818      	ldr	r0, [r3, #0]
 810417c:	f107 0110 	add.w	r1, r7, #16
 8104180:	2300      	movs	r3, #0
 8104182:	683a      	ldr	r2, [r7, #0]
 8104184:	f7fe fd76 	bl	8102c74 <xQueueGenericSendFromISR>
 8104188:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810418c:	4618      	mov	r0, r3
 810418e:	3728      	adds	r7, #40	@ 0x28
 8104190:	46bd      	mov	sp, r7
 8104192:	bd80      	pop	{r7, pc}
 8104194:	100049c0 	.word	0x100049c0

08104198 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8104198:	b580      	push	{r7, lr}
 810419a:	b088      	sub	sp, #32
 810419c:	af02      	add	r7, sp, #8
 810419e:	6078      	str	r0, [r7, #4]
 81041a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81041a2:	4b23      	ldr	r3, [pc, #140]	@ (8104230 <prvProcessExpiredTimer+0x98>)
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	68db      	ldr	r3, [r3, #12]
 81041a8:	68db      	ldr	r3, [r3, #12]
 81041aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81041ac:	697b      	ldr	r3, [r7, #20]
 81041ae:	3304      	adds	r3, #4
 81041b0:	4618      	mov	r0, r3
 81041b2:	f7fe f8d5 	bl	8102360 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81041b6:	697b      	ldr	r3, [r7, #20]
 81041b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81041bc:	f003 0304 	and.w	r3, r3, #4
 81041c0:	2b00      	cmp	r3, #0
 81041c2:	d023      	beq.n	810420c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81041c4:	697b      	ldr	r3, [r7, #20]
 81041c6:	699a      	ldr	r2, [r3, #24]
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	18d1      	adds	r1, r2, r3
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	683a      	ldr	r2, [r7, #0]
 81041d0:	6978      	ldr	r0, [r7, #20]
 81041d2:	f000 f8d5 	bl	8104380 <prvInsertTimerInActiveList>
 81041d6:	4603      	mov	r3, r0
 81041d8:	2b00      	cmp	r3, #0
 81041da:	d020      	beq.n	810421e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81041dc:	2300      	movs	r3, #0
 81041de:	9300      	str	r3, [sp, #0]
 81041e0:	2300      	movs	r3, #0
 81041e2:	687a      	ldr	r2, [r7, #4]
 81041e4:	2100      	movs	r1, #0
 81041e6:	6978      	ldr	r0, [r7, #20]
 81041e8:	f7ff ff88 	bl	81040fc <xTimerGenericCommand>
 81041ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81041ee:	693b      	ldr	r3, [r7, #16]
 81041f0:	2b00      	cmp	r3, #0
 81041f2:	d114      	bne.n	810421e <prvProcessExpiredTimer+0x86>
	__asm volatile
 81041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81041f8:	f383 8811 	msr	BASEPRI, r3
 81041fc:	f3bf 8f6f 	isb	sy
 8104200:	f3bf 8f4f 	dsb	sy
 8104204:	60fb      	str	r3, [r7, #12]
}
 8104206:	bf00      	nop
 8104208:	bf00      	nop
 810420a:	e7fd      	b.n	8104208 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810420c:	697b      	ldr	r3, [r7, #20]
 810420e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8104212:	f023 0301 	bic.w	r3, r3, #1
 8104216:	b2da      	uxtb	r2, r3
 8104218:	697b      	ldr	r3, [r7, #20]
 810421a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810421e:	697b      	ldr	r3, [r7, #20]
 8104220:	6a1b      	ldr	r3, [r3, #32]
 8104222:	6978      	ldr	r0, [r7, #20]
 8104224:	4798      	blx	r3
}
 8104226:	bf00      	nop
 8104228:	3718      	adds	r7, #24
 810422a:	46bd      	mov	sp, r7
 810422c:	bd80      	pop	{r7, pc}
 810422e:	bf00      	nop
 8104230:	100049b8 	.word	0x100049b8

08104234 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8104234:	b580      	push	{r7, lr}
 8104236:	b084      	sub	sp, #16
 8104238:	af00      	add	r7, sp, #0
 810423a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810423c:	f107 0308 	add.w	r3, r7, #8
 8104240:	4618      	mov	r0, r3
 8104242:	f000 f859 	bl	81042f8 <prvGetNextExpireTime>
 8104246:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8104248:	68bb      	ldr	r3, [r7, #8]
 810424a:	4619      	mov	r1, r3
 810424c:	68f8      	ldr	r0, [r7, #12]
 810424e:	f000 f805 	bl	810425c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8104252:	f000 f8d7 	bl	8104404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8104256:	bf00      	nop
 8104258:	e7f0      	b.n	810423c <prvTimerTask+0x8>
	...

0810425c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810425c:	b580      	push	{r7, lr}
 810425e:	b084      	sub	sp, #16
 8104260:	af00      	add	r7, sp, #0
 8104262:	6078      	str	r0, [r7, #4]
 8104264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8104266:	f7ff fa37 	bl	81036d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810426a:	f107 0308 	add.w	r3, r7, #8
 810426e:	4618      	mov	r0, r3
 8104270:	f000 f866 	bl	8104340 <prvSampleTimeNow>
 8104274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8104276:	68bb      	ldr	r3, [r7, #8]
 8104278:	2b00      	cmp	r3, #0
 810427a:	d130      	bne.n	81042de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810427c:	683b      	ldr	r3, [r7, #0]
 810427e:	2b00      	cmp	r3, #0
 8104280:	d10a      	bne.n	8104298 <prvProcessTimerOrBlockTask+0x3c>
 8104282:	687a      	ldr	r2, [r7, #4]
 8104284:	68fb      	ldr	r3, [r7, #12]
 8104286:	429a      	cmp	r2, r3
 8104288:	d806      	bhi.n	8104298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810428a:	f7ff fa33 	bl	81036f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810428e:	68f9      	ldr	r1, [r7, #12]
 8104290:	6878      	ldr	r0, [r7, #4]
 8104292:	f7ff ff81 	bl	8104198 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8104296:	e024      	b.n	81042e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8104298:	683b      	ldr	r3, [r7, #0]
 810429a:	2b00      	cmp	r3, #0
 810429c:	d008      	beq.n	81042b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810429e:	4b13      	ldr	r3, [pc, #76]	@ (81042ec <prvProcessTimerOrBlockTask+0x90>)
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	2b00      	cmp	r3, #0
 81042a6:	d101      	bne.n	81042ac <prvProcessTimerOrBlockTask+0x50>
 81042a8:	2301      	movs	r3, #1
 81042aa:	e000      	b.n	81042ae <prvProcessTimerOrBlockTask+0x52>
 81042ac:	2300      	movs	r3, #0
 81042ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81042b0:	4b0f      	ldr	r3, [pc, #60]	@ (81042f0 <prvProcessTimerOrBlockTask+0x94>)
 81042b2:	6818      	ldr	r0, [r3, #0]
 81042b4:	687a      	ldr	r2, [r7, #4]
 81042b6:	68fb      	ldr	r3, [r7, #12]
 81042b8:	1ad3      	subs	r3, r2, r3
 81042ba:	683a      	ldr	r2, [r7, #0]
 81042bc:	4619      	mov	r1, r3
 81042be:	f7fe ff93 	bl	81031e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81042c2:	f7ff fa17 	bl	81036f4 <xTaskResumeAll>
 81042c6:	4603      	mov	r3, r0
 81042c8:	2b00      	cmp	r3, #0
 81042ca:	d10a      	bne.n	81042e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81042cc:	4b09      	ldr	r3, [pc, #36]	@ (81042f4 <prvProcessTimerOrBlockTask+0x98>)
 81042ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81042d2:	601a      	str	r2, [r3, #0]
 81042d4:	f3bf 8f4f 	dsb	sy
 81042d8:	f3bf 8f6f 	isb	sy
}
 81042dc:	e001      	b.n	81042e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81042de:	f7ff fa09 	bl	81036f4 <xTaskResumeAll>
}
 81042e2:	bf00      	nop
 81042e4:	3710      	adds	r7, #16
 81042e6:	46bd      	mov	sp, r7
 81042e8:	bd80      	pop	{r7, pc}
 81042ea:	bf00      	nop
 81042ec:	100049bc 	.word	0x100049bc
 81042f0:	100049c0 	.word	0x100049c0
 81042f4:	e000ed04 	.word	0xe000ed04

081042f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81042f8:	b480      	push	{r7}
 81042fa:	b085      	sub	sp, #20
 81042fc:	af00      	add	r7, sp, #0
 81042fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8104300:	4b0e      	ldr	r3, [pc, #56]	@ (810433c <prvGetNextExpireTime+0x44>)
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	681b      	ldr	r3, [r3, #0]
 8104306:	2b00      	cmp	r3, #0
 8104308:	d101      	bne.n	810430e <prvGetNextExpireTime+0x16>
 810430a:	2201      	movs	r2, #1
 810430c:	e000      	b.n	8104310 <prvGetNextExpireTime+0x18>
 810430e:	2200      	movs	r2, #0
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	2b00      	cmp	r3, #0
 810431a:	d105      	bne.n	8104328 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810431c:	4b07      	ldr	r3, [pc, #28]	@ (810433c <prvGetNextExpireTime+0x44>)
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	68db      	ldr	r3, [r3, #12]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	60fb      	str	r3, [r7, #12]
 8104326:	e001      	b.n	810432c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8104328:	2300      	movs	r3, #0
 810432a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810432c:	68fb      	ldr	r3, [r7, #12]
}
 810432e:	4618      	mov	r0, r3
 8104330:	3714      	adds	r7, #20
 8104332:	46bd      	mov	sp, r7
 8104334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104338:	4770      	bx	lr
 810433a:	bf00      	nop
 810433c:	100049b8 	.word	0x100049b8

08104340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8104340:	b580      	push	{r7, lr}
 8104342:	b084      	sub	sp, #16
 8104344:	af00      	add	r7, sp, #0
 8104346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8104348:	f7ff fa72 	bl	8103830 <xTaskGetTickCount>
 810434c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810434e:	4b0b      	ldr	r3, [pc, #44]	@ (810437c <prvSampleTimeNow+0x3c>)
 8104350:	681b      	ldr	r3, [r3, #0]
 8104352:	68fa      	ldr	r2, [r7, #12]
 8104354:	429a      	cmp	r2, r3
 8104356:	d205      	bcs.n	8104364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8104358:	f000 f93a 	bl	81045d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	2201      	movs	r2, #1
 8104360:	601a      	str	r2, [r3, #0]
 8104362:	e002      	b.n	810436a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	2200      	movs	r2, #0
 8104368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810436a:	4a04      	ldr	r2, [pc, #16]	@ (810437c <prvSampleTimeNow+0x3c>)
 810436c:	68fb      	ldr	r3, [r7, #12]
 810436e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8104370:	68fb      	ldr	r3, [r7, #12]
}
 8104372:	4618      	mov	r0, r3
 8104374:	3710      	adds	r7, #16
 8104376:	46bd      	mov	sp, r7
 8104378:	bd80      	pop	{r7, pc}
 810437a:	bf00      	nop
 810437c:	100049c8 	.word	0x100049c8

08104380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8104380:	b580      	push	{r7, lr}
 8104382:	b086      	sub	sp, #24
 8104384:	af00      	add	r7, sp, #0
 8104386:	60f8      	str	r0, [r7, #12]
 8104388:	60b9      	str	r1, [r7, #8]
 810438a:	607a      	str	r2, [r7, #4]
 810438c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810438e:	2300      	movs	r3, #0
 8104390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8104392:	68fb      	ldr	r3, [r7, #12]
 8104394:	68ba      	ldr	r2, [r7, #8]
 8104396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8104398:	68fb      	ldr	r3, [r7, #12]
 810439a:	68fa      	ldr	r2, [r7, #12]
 810439c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810439e:	68ba      	ldr	r2, [r7, #8]
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	429a      	cmp	r2, r3
 81043a4:	d812      	bhi.n	81043cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81043a6:	687a      	ldr	r2, [r7, #4]
 81043a8:	683b      	ldr	r3, [r7, #0]
 81043aa:	1ad2      	subs	r2, r2, r3
 81043ac:	68fb      	ldr	r3, [r7, #12]
 81043ae:	699b      	ldr	r3, [r3, #24]
 81043b0:	429a      	cmp	r2, r3
 81043b2:	d302      	bcc.n	81043ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 81043b4:	2301      	movs	r3, #1
 81043b6:	617b      	str	r3, [r7, #20]
 81043b8:	e01b      	b.n	81043f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 81043ba:	4b10      	ldr	r3, [pc, #64]	@ (81043fc <prvInsertTimerInActiveList+0x7c>)
 81043bc:	681a      	ldr	r2, [r3, #0]
 81043be:	68fb      	ldr	r3, [r7, #12]
 81043c0:	3304      	adds	r3, #4
 81043c2:	4619      	mov	r1, r3
 81043c4:	4610      	mov	r0, r2
 81043c6:	f7fd ff92 	bl	81022ee <vListInsert>
 81043ca:	e012      	b.n	81043f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81043cc:	687a      	ldr	r2, [r7, #4]
 81043ce:	683b      	ldr	r3, [r7, #0]
 81043d0:	429a      	cmp	r2, r3
 81043d2:	d206      	bcs.n	81043e2 <prvInsertTimerInActiveList+0x62>
 81043d4:	68ba      	ldr	r2, [r7, #8]
 81043d6:	683b      	ldr	r3, [r7, #0]
 81043d8:	429a      	cmp	r2, r3
 81043da:	d302      	bcc.n	81043e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81043dc:	2301      	movs	r3, #1
 81043de:	617b      	str	r3, [r7, #20]
 81043e0:	e007      	b.n	81043f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81043e2:	4b07      	ldr	r3, [pc, #28]	@ (8104400 <prvInsertTimerInActiveList+0x80>)
 81043e4:	681a      	ldr	r2, [r3, #0]
 81043e6:	68fb      	ldr	r3, [r7, #12]
 81043e8:	3304      	adds	r3, #4
 81043ea:	4619      	mov	r1, r3
 81043ec:	4610      	mov	r0, r2
 81043ee:	f7fd ff7e 	bl	81022ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 81043f2:	697b      	ldr	r3, [r7, #20]
}
 81043f4:	4618      	mov	r0, r3
 81043f6:	3718      	adds	r7, #24
 81043f8:	46bd      	mov	sp, r7
 81043fa:	bd80      	pop	{r7, pc}
 81043fc:	100049bc 	.word	0x100049bc
 8104400:	100049b8 	.word	0x100049b8

08104404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8104404:	b580      	push	{r7, lr}
 8104406:	b08e      	sub	sp, #56	@ 0x38
 8104408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810440a:	e0ce      	b.n	81045aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	2b00      	cmp	r3, #0
 8104410:	da19      	bge.n	8104446 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8104412:	1d3b      	adds	r3, r7, #4
 8104414:	3304      	adds	r3, #4
 8104416:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8104418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810441a:	2b00      	cmp	r3, #0
 810441c:	d10b      	bne.n	8104436 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104422:	f383 8811 	msr	BASEPRI, r3
 8104426:	f3bf 8f6f 	isb	sy
 810442a:	f3bf 8f4f 	dsb	sy
 810442e:	61fb      	str	r3, [r7, #28]
}
 8104430:	bf00      	nop
 8104432:	bf00      	nop
 8104434:	e7fd      	b.n	8104432 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8104436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104438:	681b      	ldr	r3, [r3, #0]
 810443a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810443c:	6850      	ldr	r0, [r2, #4]
 810443e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104440:	6892      	ldr	r2, [r2, #8]
 8104442:	4611      	mov	r1, r2
 8104444:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8104446:	687b      	ldr	r3, [r7, #4]
 8104448:	2b00      	cmp	r3, #0
 810444a:	f2c0 80ae 	blt.w	81045aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8104452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104454:	695b      	ldr	r3, [r3, #20]
 8104456:	2b00      	cmp	r3, #0
 8104458:	d004      	beq.n	8104464 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810445c:	3304      	adds	r3, #4
 810445e:	4618      	mov	r0, r3
 8104460:	f7fd ff7e 	bl	8102360 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8104464:	463b      	mov	r3, r7
 8104466:	4618      	mov	r0, r3
 8104468:	f7ff ff6a 	bl	8104340 <prvSampleTimeNow>
 810446c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	2b09      	cmp	r3, #9
 8104472:	f200 8097 	bhi.w	81045a4 <prvProcessReceivedCommands+0x1a0>
 8104476:	a201      	add	r2, pc, #4	@ (adr r2, 810447c <prvProcessReceivedCommands+0x78>)
 8104478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810447c:	081044a5 	.word	0x081044a5
 8104480:	081044a5 	.word	0x081044a5
 8104484:	081044a5 	.word	0x081044a5
 8104488:	0810451b 	.word	0x0810451b
 810448c:	0810452f 	.word	0x0810452f
 8104490:	0810457b 	.word	0x0810457b
 8104494:	081044a5 	.word	0x081044a5
 8104498:	081044a5 	.word	0x081044a5
 810449c:	0810451b 	.word	0x0810451b
 81044a0:	0810452f 	.word	0x0810452f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81044a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81044a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81044aa:	f043 0301 	orr.w	r3, r3, #1
 81044ae:	b2da      	uxtb	r2, r3
 81044b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81044b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81044b6:	68ba      	ldr	r2, [r7, #8]
 81044b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81044ba:	699b      	ldr	r3, [r3, #24]
 81044bc:	18d1      	adds	r1, r2, r3
 81044be:	68bb      	ldr	r3, [r7, #8]
 81044c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81044c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81044c4:	f7ff ff5c 	bl	8104380 <prvInsertTimerInActiveList>
 81044c8:	4603      	mov	r3, r0
 81044ca:	2b00      	cmp	r3, #0
 81044cc:	d06c      	beq.n	81045a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81044d0:	6a1b      	ldr	r3, [r3, #32]
 81044d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81044d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81044d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81044d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81044dc:	f003 0304 	and.w	r3, r3, #4
 81044e0:	2b00      	cmp	r3, #0
 81044e2:	d061      	beq.n	81045a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81044e4:	68ba      	ldr	r2, [r7, #8]
 81044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81044e8:	699b      	ldr	r3, [r3, #24]
 81044ea:	441a      	add	r2, r3
 81044ec:	2300      	movs	r3, #0
 81044ee:	9300      	str	r3, [sp, #0]
 81044f0:	2300      	movs	r3, #0
 81044f2:	2100      	movs	r1, #0
 81044f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81044f6:	f7ff fe01 	bl	81040fc <xTimerGenericCommand>
 81044fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81044fc:	6a3b      	ldr	r3, [r7, #32]
 81044fe:	2b00      	cmp	r3, #0
 8104500:	d152      	bne.n	81045a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8104502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104506:	f383 8811 	msr	BASEPRI, r3
 810450a:	f3bf 8f6f 	isb	sy
 810450e:	f3bf 8f4f 	dsb	sy
 8104512:	61bb      	str	r3, [r7, #24]
}
 8104514:	bf00      	nop
 8104516:	bf00      	nop
 8104518:	e7fd      	b.n	8104516 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810451c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8104520:	f023 0301 	bic.w	r3, r3, #1
 8104524:	b2da      	uxtb	r2, r3
 8104526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104528:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810452c:	e03d      	b.n	81045aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8104534:	f043 0301 	orr.w	r3, r3, #1
 8104538:	b2da      	uxtb	r2, r3
 810453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810453c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8104540:	68ba      	ldr	r2, [r7, #8]
 8104542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104544:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8104546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104548:	699b      	ldr	r3, [r3, #24]
 810454a:	2b00      	cmp	r3, #0
 810454c:	d10b      	bne.n	8104566 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104552:	f383 8811 	msr	BASEPRI, r3
 8104556:	f3bf 8f6f 	isb	sy
 810455a:	f3bf 8f4f 	dsb	sy
 810455e:	617b      	str	r3, [r7, #20]
}
 8104560:	bf00      	nop
 8104562:	bf00      	nop
 8104564:	e7fd      	b.n	8104562 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8104566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104568:	699a      	ldr	r2, [r3, #24]
 810456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810456c:	18d1      	adds	r1, r2, r3
 810456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8104574:	f7ff ff04 	bl	8104380 <prvInsertTimerInActiveList>
					break;
 8104578:	e017      	b.n	81045aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810457c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8104580:	f003 0302 	and.w	r3, r3, #2
 8104584:	2b00      	cmp	r3, #0
 8104586:	d103      	bne.n	8104590 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8104588:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810458a:	f7fd fd3f 	bl	810200c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810458e:	e00c      	b.n	81045aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8104590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104592:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8104596:	f023 0301 	bic.w	r3, r3, #1
 810459a:	b2da      	uxtb	r2, r3
 810459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810459e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81045a2:	e002      	b.n	81045aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 81045a4:	bf00      	nop
 81045a6:	e000      	b.n	81045aa <prvProcessReceivedCommands+0x1a6>
					break;
 81045a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81045aa:	4b08      	ldr	r3, [pc, #32]	@ (81045cc <prvProcessReceivedCommands+0x1c8>)
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	1d39      	adds	r1, r7, #4
 81045b0:	2200      	movs	r2, #0
 81045b2:	4618      	mov	r0, r3
 81045b4:	f7fe fbfc 	bl	8102db0 <xQueueReceive>
 81045b8:	4603      	mov	r3, r0
 81045ba:	2b00      	cmp	r3, #0
 81045bc:	f47f af26 	bne.w	810440c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 81045c0:	bf00      	nop
 81045c2:	bf00      	nop
 81045c4:	3730      	adds	r7, #48	@ 0x30
 81045c6:	46bd      	mov	sp, r7
 81045c8:	bd80      	pop	{r7, pc}
 81045ca:	bf00      	nop
 81045cc:	100049c0 	.word	0x100049c0

081045d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81045d0:	b580      	push	{r7, lr}
 81045d2:	b088      	sub	sp, #32
 81045d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81045d6:	e049      	b.n	810466c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81045d8:	4b2e      	ldr	r3, [pc, #184]	@ (8104694 <prvSwitchTimerLists+0xc4>)
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	68db      	ldr	r3, [r3, #12]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81045e2:	4b2c      	ldr	r3, [pc, #176]	@ (8104694 <prvSwitchTimerLists+0xc4>)
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	68db      	ldr	r3, [r3, #12]
 81045e8:	68db      	ldr	r3, [r3, #12]
 81045ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81045ec:	68fb      	ldr	r3, [r7, #12]
 81045ee:	3304      	adds	r3, #4
 81045f0:	4618      	mov	r0, r3
 81045f2:	f7fd feb5 	bl	8102360 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81045f6:	68fb      	ldr	r3, [r7, #12]
 81045f8:	6a1b      	ldr	r3, [r3, #32]
 81045fa:	68f8      	ldr	r0, [r7, #12]
 81045fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81045fe:	68fb      	ldr	r3, [r7, #12]
 8104600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8104604:	f003 0304 	and.w	r3, r3, #4
 8104608:	2b00      	cmp	r3, #0
 810460a:	d02f      	beq.n	810466c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810460c:	68fb      	ldr	r3, [r7, #12]
 810460e:	699b      	ldr	r3, [r3, #24]
 8104610:	693a      	ldr	r2, [r7, #16]
 8104612:	4413      	add	r3, r2
 8104614:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8104616:	68ba      	ldr	r2, [r7, #8]
 8104618:	693b      	ldr	r3, [r7, #16]
 810461a:	429a      	cmp	r2, r3
 810461c:	d90e      	bls.n	810463c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810461e:	68fb      	ldr	r3, [r7, #12]
 8104620:	68ba      	ldr	r2, [r7, #8]
 8104622:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8104624:	68fb      	ldr	r3, [r7, #12]
 8104626:	68fa      	ldr	r2, [r7, #12]
 8104628:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810462a:	4b1a      	ldr	r3, [pc, #104]	@ (8104694 <prvSwitchTimerLists+0xc4>)
 810462c:	681a      	ldr	r2, [r3, #0]
 810462e:	68fb      	ldr	r3, [r7, #12]
 8104630:	3304      	adds	r3, #4
 8104632:	4619      	mov	r1, r3
 8104634:	4610      	mov	r0, r2
 8104636:	f7fd fe5a 	bl	81022ee <vListInsert>
 810463a:	e017      	b.n	810466c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810463c:	2300      	movs	r3, #0
 810463e:	9300      	str	r3, [sp, #0]
 8104640:	2300      	movs	r3, #0
 8104642:	693a      	ldr	r2, [r7, #16]
 8104644:	2100      	movs	r1, #0
 8104646:	68f8      	ldr	r0, [r7, #12]
 8104648:	f7ff fd58 	bl	81040fc <xTimerGenericCommand>
 810464c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	2b00      	cmp	r3, #0
 8104652:	d10b      	bne.n	810466c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8104654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104658:	f383 8811 	msr	BASEPRI, r3
 810465c:	f3bf 8f6f 	isb	sy
 8104660:	f3bf 8f4f 	dsb	sy
 8104664:	603b      	str	r3, [r7, #0]
}
 8104666:	bf00      	nop
 8104668:	bf00      	nop
 810466a:	e7fd      	b.n	8104668 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810466c:	4b09      	ldr	r3, [pc, #36]	@ (8104694 <prvSwitchTimerLists+0xc4>)
 810466e:	681b      	ldr	r3, [r3, #0]
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	2b00      	cmp	r3, #0
 8104674:	d1b0      	bne.n	81045d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8104676:	4b07      	ldr	r3, [pc, #28]	@ (8104694 <prvSwitchTimerLists+0xc4>)
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810467c:	4b06      	ldr	r3, [pc, #24]	@ (8104698 <prvSwitchTimerLists+0xc8>)
 810467e:	681b      	ldr	r3, [r3, #0]
 8104680:	4a04      	ldr	r2, [pc, #16]	@ (8104694 <prvSwitchTimerLists+0xc4>)
 8104682:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8104684:	4a04      	ldr	r2, [pc, #16]	@ (8104698 <prvSwitchTimerLists+0xc8>)
 8104686:	697b      	ldr	r3, [r7, #20]
 8104688:	6013      	str	r3, [r2, #0]
}
 810468a:	bf00      	nop
 810468c:	3718      	adds	r7, #24
 810468e:	46bd      	mov	sp, r7
 8104690:	bd80      	pop	{r7, pc}
 8104692:	bf00      	nop
 8104694:	100049b8 	.word	0x100049b8
 8104698:	100049bc 	.word	0x100049bc

0810469c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810469c:	b580      	push	{r7, lr}
 810469e:	b082      	sub	sp, #8
 81046a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 81046a2:	f7fd ffb9 	bl	8102618 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 81046a6:	4b15      	ldr	r3, [pc, #84]	@ (81046fc <prvCheckForValidListAndQueue+0x60>)
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	2b00      	cmp	r3, #0
 81046ac:	d120      	bne.n	81046f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 81046ae:	4814      	ldr	r0, [pc, #80]	@ (8104700 <prvCheckForValidListAndQueue+0x64>)
 81046b0:	f7fd fdcc 	bl	810224c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 81046b4:	4813      	ldr	r0, [pc, #76]	@ (8104704 <prvCheckForValidListAndQueue+0x68>)
 81046b6:	f7fd fdc9 	bl	810224c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 81046ba:	4b13      	ldr	r3, [pc, #76]	@ (8104708 <prvCheckForValidListAndQueue+0x6c>)
 81046bc:	4a10      	ldr	r2, [pc, #64]	@ (8104700 <prvCheckForValidListAndQueue+0x64>)
 81046be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 81046c0:	4b12      	ldr	r3, [pc, #72]	@ (810470c <prvCheckForValidListAndQueue+0x70>)
 81046c2:	4a10      	ldr	r2, [pc, #64]	@ (8104704 <prvCheckForValidListAndQueue+0x68>)
 81046c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 81046c6:	2300      	movs	r3, #0
 81046c8:	9300      	str	r3, [sp, #0]
 81046ca:	4b11      	ldr	r3, [pc, #68]	@ (8104710 <prvCheckForValidListAndQueue+0x74>)
 81046cc:	4a11      	ldr	r2, [pc, #68]	@ (8104714 <prvCheckForValidListAndQueue+0x78>)
 81046ce:	2110      	movs	r1, #16
 81046d0:	200a      	movs	r0, #10
 81046d2:	f7fe f92d 	bl	8102930 <xQueueGenericCreateStatic>
 81046d6:	4603      	mov	r3, r0
 81046d8:	4a08      	ldr	r2, [pc, #32]	@ (81046fc <prvCheckForValidListAndQueue+0x60>)
 81046da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81046dc:	4b07      	ldr	r3, [pc, #28]	@ (81046fc <prvCheckForValidListAndQueue+0x60>)
 81046de:	681b      	ldr	r3, [r3, #0]
 81046e0:	2b00      	cmp	r3, #0
 81046e2:	d005      	beq.n	81046f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81046e4:	4b05      	ldr	r3, [pc, #20]	@ (81046fc <prvCheckForValidListAndQueue+0x60>)
 81046e6:	681b      	ldr	r3, [r3, #0]
 81046e8:	490b      	ldr	r1, [pc, #44]	@ (8104718 <prvCheckForValidListAndQueue+0x7c>)
 81046ea:	4618      	mov	r0, r3
 81046ec:	f7fe fd52 	bl	8103194 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81046f0:	f7fd ffc4 	bl	810267c <vPortExitCritical>
}
 81046f4:	bf00      	nop
 81046f6:	46bd      	mov	sp, r7
 81046f8:	bd80      	pop	{r7, pc}
 81046fa:	bf00      	nop
 81046fc:	100049c0 	.word	0x100049c0
 8104700:	10004990 	.word	0x10004990
 8104704:	100049a4 	.word	0x100049a4
 8104708:	100049b8 	.word	0x100049b8
 810470c:	100049bc 	.word	0x100049bc
 8104710:	10004a6c 	.word	0x10004a6c
 8104714:	100049cc 	.word	0x100049cc
 8104718:	081050a0 	.word	0x081050a0

0810471c <siprintf>:
 810471c:	b40e      	push	{r1, r2, r3}
 810471e:	b500      	push	{lr}
 8104720:	b09c      	sub	sp, #112	@ 0x70
 8104722:	ab1d      	add	r3, sp, #116	@ 0x74
 8104724:	9002      	str	r0, [sp, #8]
 8104726:	9006      	str	r0, [sp, #24]
 8104728:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810472c:	4809      	ldr	r0, [pc, #36]	@ (8104754 <siprintf+0x38>)
 810472e:	9107      	str	r1, [sp, #28]
 8104730:	9104      	str	r1, [sp, #16]
 8104732:	4909      	ldr	r1, [pc, #36]	@ (8104758 <siprintf+0x3c>)
 8104734:	f853 2b04 	ldr.w	r2, [r3], #4
 8104738:	9105      	str	r1, [sp, #20]
 810473a:	6800      	ldr	r0, [r0, #0]
 810473c:	9301      	str	r3, [sp, #4]
 810473e:	a902      	add	r1, sp, #8
 8104740:	f000 f9a2 	bl	8104a88 <_svfiprintf_r>
 8104744:	9b02      	ldr	r3, [sp, #8]
 8104746:	2200      	movs	r2, #0
 8104748:	701a      	strb	r2, [r3, #0]
 810474a:	b01c      	add	sp, #112	@ 0x70
 810474c:	f85d eb04 	ldr.w	lr, [sp], #4
 8104750:	b003      	add	sp, #12
 8104752:	4770      	bx	lr
 8104754:	10000014 	.word	0x10000014
 8104758:	ffff0208 	.word	0xffff0208

0810475c <memset>:
 810475c:	4402      	add	r2, r0
 810475e:	4603      	mov	r3, r0
 8104760:	4293      	cmp	r3, r2
 8104762:	d100      	bne.n	8104766 <memset+0xa>
 8104764:	4770      	bx	lr
 8104766:	f803 1b01 	strb.w	r1, [r3], #1
 810476a:	e7f9      	b.n	8104760 <memset+0x4>

0810476c <__errno>:
 810476c:	4b01      	ldr	r3, [pc, #4]	@ (8104774 <__errno+0x8>)
 810476e:	6818      	ldr	r0, [r3, #0]
 8104770:	4770      	bx	lr
 8104772:	bf00      	nop
 8104774:	10000014 	.word	0x10000014

08104778 <__libc_init_array>:
 8104778:	b570      	push	{r4, r5, r6, lr}
 810477a:	4d0d      	ldr	r5, [pc, #52]	@ (81047b0 <__libc_init_array+0x38>)
 810477c:	4c0d      	ldr	r4, [pc, #52]	@ (81047b4 <__libc_init_array+0x3c>)
 810477e:	1b64      	subs	r4, r4, r5
 8104780:	10a4      	asrs	r4, r4, #2
 8104782:	2600      	movs	r6, #0
 8104784:	42a6      	cmp	r6, r4
 8104786:	d109      	bne.n	810479c <__libc_init_array+0x24>
 8104788:	4d0b      	ldr	r5, [pc, #44]	@ (81047b8 <__libc_init_array+0x40>)
 810478a:	4c0c      	ldr	r4, [pc, #48]	@ (81047bc <__libc_init_array+0x44>)
 810478c:	f000 fc66 	bl	810505c <_init>
 8104790:	1b64      	subs	r4, r4, r5
 8104792:	10a4      	asrs	r4, r4, #2
 8104794:	2600      	movs	r6, #0
 8104796:	42a6      	cmp	r6, r4
 8104798:	d105      	bne.n	81047a6 <__libc_init_array+0x2e>
 810479a:	bd70      	pop	{r4, r5, r6, pc}
 810479c:	f855 3b04 	ldr.w	r3, [r5], #4
 81047a0:	4798      	blx	r3
 81047a2:	3601      	adds	r6, #1
 81047a4:	e7ee      	b.n	8104784 <__libc_init_array+0xc>
 81047a6:	f855 3b04 	ldr.w	r3, [r5], #4
 81047aa:	4798      	blx	r3
 81047ac:	3601      	adds	r6, #1
 81047ae:	e7f2      	b.n	8104796 <__libc_init_array+0x1e>
 81047b0:	08105118 	.word	0x08105118
 81047b4:	08105118 	.word	0x08105118
 81047b8:	08105118 	.word	0x08105118
 81047bc:	0810511c 	.word	0x0810511c

081047c0 <__retarget_lock_acquire_recursive>:
 81047c0:	4770      	bx	lr

081047c2 <__retarget_lock_release_recursive>:
 81047c2:	4770      	bx	lr

081047c4 <memcpy>:
 81047c4:	440a      	add	r2, r1
 81047c6:	4291      	cmp	r1, r2
 81047c8:	f100 33ff 	add.w	r3, r0, #4294967295
 81047cc:	d100      	bne.n	81047d0 <memcpy+0xc>
 81047ce:	4770      	bx	lr
 81047d0:	b510      	push	{r4, lr}
 81047d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 81047d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 81047da:	4291      	cmp	r1, r2
 81047dc:	d1f9      	bne.n	81047d2 <memcpy+0xe>
 81047de:	bd10      	pop	{r4, pc}

081047e0 <_free_r>:
 81047e0:	b538      	push	{r3, r4, r5, lr}
 81047e2:	4605      	mov	r5, r0
 81047e4:	2900      	cmp	r1, #0
 81047e6:	d041      	beq.n	810486c <_free_r+0x8c>
 81047e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81047ec:	1f0c      	subs	r4, r1, #4
 81047ee:	2b00      	cmp	r3, #0
 81047f0:	bfb8      	it	lt
 81047f2:	18e4      	addlt	r4, r4, r3
 81047f4:	f000 f8e0 	bl	81049b8 <__malloc_lock>
 81047f8:	4a1d      	ldr	r2, [pc, #116]	@ (8104870 <_free_r+0x90>)
 81047fa:	6813      	ldr	r3, [r2, #0]
 81047fc:	b933      	cbnz	r3, 810480c <_free_r+0x2c>
 81047fe:	6063      	str	r3, [r4, #4]
 8104800:	6014      	str	r4, [r2, #0]
 8104802:	4628      	mov	r0, r5
 8104804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8104808:	f000 b8dc 	b.w	81049c4 <__malloc_unlock>
 810480c:	42a3      	cmp	r3, r4
 810480e:	d908      	bls.n	8104822 <_free_r+0x42>
 8104810:	6820      	ldr	r0, [r4, #0]
 8104812:	1821      	adds	r1, r4, r0
 8104814:	428b      	cmp	r3, r1
 8104816:	bf01      	itttt	eq
 8104818:	6819      	ldreq	r1, [r3, #0]
 810481a:	685b      	ldreq	r3, [r3, #4]
 810481c:	1809      	addeq	r1, r1, r0
 810481e:	6021      	streq	r1, [r4, #0]
 8104820:	e7ed      	b.n	81047fe <_free_r+0x1e>
 8104822:	461a      	mov	r2, r3
 8104824:	685b      	ldr	r3, [r3, #4]
 8104826:	b10b      	cbz	r3, 810482c <_free_r+0x4c>
 8104828:	42a3      	cmp	r3, r4
 810482a:	d9fa      	bls.n	8104822 <_free_r+0x42>
 810482c:	6811      	ldr	r1, [r2, #0]
 810482e:	1850      	adds	r0, r2, r1
 8104830:	42a0      	cmp	r0, r4
 8104832:	d10b      	bne.n	810484c <_free_r+0x6c>
 8104834:	6820      	ldr	r0, [r4, #0]
 8104836:	4401      	add	r1, r0
 8104838:	1850      	adds	r0, r2, r1
 810483a:	4283      	cmp	r3, r0
 810483c:	6011      	str	r1, [r2, #0]
 810483e:	d1e0      	bne.n	8104802 <_free_r+0x22>
 8104840:	6818      	ldr	r0, [r3, #0]
 8104842:	685b      	ldr	r3, [r3, #4]
 8104844:	6053      	str	r3, [r2, #4]
 8104846:	4408      	add	r0, r1
 8104848:	6010      	str	r0, [r2, #0]
 810484a:	e7da      	b.n	8104802 <_free_r+0x22>
 810484c:	d902      	bls.n	8104854 <_free_r+0x74>
 810484e:	230c      	movs	r3, #12
 8104850:	602b      	str	r3, [r5, #0]
 8104852:	e7d6      	b.n	8104802 <_free_r+0x22>
 8104854:	6820      	ldr	r0, [r4, #0]
 8104856:	1821      	adds	r1, r4, r0
 8104858:	428b      	cmp	r3, r1
 810485a:	bf04      	itt	eq
 810485c:	6819      	ldreq	r1, [r3, #0]
 810485e:	685b      	ldreq	r3, [r3, #4]
 8104860:	6063      	str	r3, [r4, #4]
 8104862:	bf04      	itt	eq
 8104864:	1809      	addeq	r1, r1, r0
 8104866:	6021      	streq	r1, [r4, #0]
 8104868:	6054      	str	r4, [r2, #4]
 810486a:	e7ca      	b.n	8104802 <_free_r+0x22>
 810486c:	bd38      	pop	{r3, r4, r5, pc}
 810486e:	bf00      	nop
 8104870:	10004c00 	.word	0x10004c00

08104874 <sbrk_aligned>:
 8104874:	b570      	push	{r4, r5, r6, lr}
 8104876:	4e0f      	ldr	r6, [pc, #60]	@ (81048b4 <sbrk_aligned+0x40>)
 8104878:	460c      	mov	r4, r1
 810487a:	6831      	ldr	r1, [r6, #0]
 810487c:	4605      	mov	r5, r0
 810487e:	b911      	cbnz	r1, 8104886 <sbrk_aligned+0x12>
 8104880:	f000 fba6 	bl	8104fd0 <_sbrk_r>
 8104884:	6030      	str	r0, [r6, #0]
 8104886:	4621      	mov	r1, r4
 8104888:	4628      	mov	r0, r5
 810488a:	f000 fba1 	bl	8104fd0 <_sbrk_r>
 810488e:	1c43      	adds	r3, r0, #1
 8104890:	d103      	bne.n	810489a <sbrk_aligned+0x26>
 8104892:	f04f 34ff 	mov.w	r4, #4294967295
 8104896:	4620      	mov	r0, r4
 8104898:	bd70      	pop	{r4, r5, r6, pc}
 810489a:	1cc4      	adds	r4, r0, #3
 810489c:	f024 0403 	bic.w	r4, r4, #3
 81048a0:	42a0      	cmp	r0, r4
 81048a2:	d0f8      	beq.n	8104896 <sbrk_aligned+0x22>
 81048a4:	1a21      	subs	r1, r4, r0
 81048a6:	4628      	mov	r0, r5
 81048a8:	f000 fb92 	bl	8104fd0 <_sbrk_r>
 81048ac:	3001      	adds	r0, #1
 81048ae:	d1f2      	bne.n	8104896 <sbrk_aligned+0x22>
 81048b0:	e7ef      	b.n	8104892 <sbrk_aligned+0x1e>
 81048b2:	bf00      	nop
 81048b4:	10004bfc 	.word	0x10004bfc

081048b8 <_malloc_r>:
 81048b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81048bc:	1ccd      	adds	r5, r1, #3
 81048be:	f025 0503 	bic.w	r5, r5, #3
 81048c2:	3508      	adds	r5, #8
 81048c4:	2d0c      	cmp	r5, #12
 81048c6:	bf38      	it	cc
 81048c8:	250c      	movcc	r5, #12
 81048ca:	2d00      	cmp	r5, #0
 81048cc:	4606      	mov	r6, r0
 81048ce:	db01      	blt.n	81048d4 <_malloc_r+0x1c>
 81048d0:	42a9      	cmp	r1, r5
 81048d2:	d904      	bls.n	81048de <_malloc_r+0x26>
 81048d4:	230c      	movs	r3, #12
 81048d6:	6033      	str	r3, [r6, #0]
 81048d8:	2000      	movs	r0, #0
 81048da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81048de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 81049b4 <_malloc_r+0xfc>
 81048e2:	f000 f869 	bl	81049b8 <__malloc_lock>
 81048e6:	f8d8 3000 	ldr.w	r3, [r8]
 81048ea:	461c      	mov	r4, r3
 81048ec:	bb44      	cbnz	r4, 8104940 <_malloc_r+0x88>
 81048ee:	4629      	mov	r1, r5
 81048f0:	4630      	mov	r0, r6
 81048f2:	f7ff ffbf 	bl	8104874 <sbrk_aligned>
 81048f6:	1c43      	adds	r3, r0, #1
 81048f8:	4604      	mov	r4, r0
 81048fa:	d158      	bne.n	81049ae <_malloc_r+0xf6>
 81048fc:	f8d8 4000 	ldr.w	r4, [r8]
 8104900:	4627      	mov	r7, r4
 8104902:	2f00      	cmp	r7, #0
 8104904:	d143      	bne.n	810498e <_malloc_r+0xd6>
 8104906:	2c00      	cmp	r4, #0
 8104908:	d04b      	beq.n	81049a2 <_malloc_r+0xea>
 810490a:	6823      	ldr	r3, [r4, #0]
 810490c:	4639      	mov	r1, r7
 810490e:	4630      	mov	r0, r6
 8104910:	eb04 0903 	add.w	r9, r4, r3
 8104914:	f000 fb5c 	bl	8104fd0 <_sbrk_r>
 8104918:	4581      	cmp	r9, r0
 810491a:	d142      	bne.n	81049a2 <_malloc_r+0xea>
 810491c:	6821      	ldr	r1, [r4, #0]
 810491e:	1a6d      	subs	r5, r5, r1
 8104920:	4629      	mov	r1, r5
 8104922:	4630      	mov	r0, r6
 8104924:	f7ff ffa6 	bl	8104874 <sbrk_aligned>
 8104928:	3001      	adds	r0, #1
 810492a:	d03a      	beq.n	81049a2 <_malloc_r+0xea>
 810492c:	6823      	ldr	r3, [r4, #0]
 810492e:	442b      	add	r3, r5
 8104930:	6023      	str	r3, [r4, #0]
 8104932:	f8d8 3000 	ldr.w	r3, [r8]
 8104936:	685a      	ldr	r2, [r3, #4]
 8104938:	bb62      	cbnz	r2, 8104994 <_malloc_r+0xdc>
 810493a:	f8c8 7000 	str.w	r7, [r8]
 810493e:	e00f      	b.n	8104960 <_malloc_r+0xa8>
 8104940:	6822      	ldr	r2, [r4, #0]
 8104942:	1b52      	subs	r2, r2, r5
 8104944:	d420      	bmi.n	8104988 <_malloc_r+0xd0>
 8104946:	2a0b      	cmp	r2, #11
 8104948:	d917      	bls.n	810497a <_malloc_r+0xc2>
 810494a:	1961      	adds	r1, r4, r5
 810494c:	42a3      	cmp	r3, r4
 810494e:	6025      	str	r5, [r4, #0]
 8104950:	bf18      	it	ne
 8104952:	6059      	strne	r1, [r3, #4]
 8104954:	6863      	ldr	r3, [r4, #4]
 8104956:	bf08      	it	eq
 8104958:	f8c8 1000 	streq.w	r1, [r8]
 810495c:	5162      	str	r2, [r4, r5]
 810495e:	604b      	str	r3, [r1, #4]
 8104960:	4630      	mov	r0, r6
 8104962:	f000 f82f 	bl	81049c4 <__malloc_unlock>
 8104966:	f104 000b 	add.w	r0, r4, #11
 810496a:	1d23      	adds	r3, r4, #4
 810496c:	f020 0007 	bic.w	r0, r0, #7
 8104970:	1ac2      	subs	r2, r0, r3
 8104972:	bf1c      	itt	ne
 8104974:	1a1b      	subne	r3, r3, r0
 8104976:	50a3      	strne	r3, [r4, r2]
 8104978:	e7af      	b.n	81048da <_malloc_r+0x22>
 810497a:	6862      	ldr	r2, [r4, #4]
 810497c:	42a3      	cmp	r3, r4
 810497e:	bf0c      	ite	eq
 8104980:	f8c8 2000 	streq.w	r2, [r8]
 8104984:	605a      	strne	r2, [r3, #4]
 8104986:	e7eb      	b.n	8104960 <_malloc_r+0xa8>
 8104988:	4623      	mov	r3, r4
 810498a:	6864      	ldr	r4, [r4, #4]
 810498c:	e7ae      	b.n	81048ec <_malloc_r+0x34>
 810498e:	463c      	mov	r4, r7
 8104990:	687f      	ldr	r7, [r7, #4]
 8104992:	e7b6      	b.n	8104902 <_malloc_r+0x4a>
 8104994:	461a      	mov	r2, r3
 8104996:	685b      	ldr	r3, [r3, #4]
 8104998:	42a3      	cmp	r3, r4
 810499a:	d1fb      	bne.n	8104994 <_malloc_r+0xdc>
 810499c:	2300      	movs	r3, #0
 810499e:	6053      	str	r3, [r2, #4]
 81049a0:	e7de      	b.n	8104960 <_malloc_r+0xa8>
 81049a2:	230c      	movs	r3, #12
 81049a4:	6033      	str	r3, [r6, #0]
 81049a6:	4630      	mov	r0, r6
 81049a8:	f000 f80c 	bl	81049c4 <__malloc_unlock>
 81049ac:	e794      	b.n	81048d8 <_malloc_r+0x20>
 81049ae:	6005      	str	r5, [r0, #0]
 81049b0:	e7d6      	b.n	8104960 <_malloc_r+0xa8>
 81049b2:	bf00      	nop
 81049b4:	10004c00 	.word	0x10004c00

081049b8 <__malloc_lock>:
 81049b8:	4801      	ldr	r0, [pc, #4]	@ (81049c0 <__malloc_lock+0x8>)
 81049ba:	f7ff bf01 	b.w	81047c0 <__retarget_lock_acquire_recursive>
 81049be:	bf00      	nop
 81049c0:	10004bf8 	.word	0x10004bf8

081049c4 <__malloc_unlock>:
 81049c4:	4801      	ldr	r0, [pc, #4]	@ (81049cc <__malloc_unlock+0x8>)
 81049c6:	f7ff befc 	b.w	81047c2 <__retarget_lock_release_recursive>
 81049ca:	bf00      	nop
 81049cc:	10004bf8 	.word	0x10004bf8

081049d0 <__ssputs_r>:
 81049d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81049d4:	688e      	ldr	r6, [r1, #8]
 81049d6:	461f      	mov	r7, r3
 81049d8:	42be      	cmp	r6, r7
 81049da:	680b      	ldr	r3, [r1, #0]
 81049dc:	4682      	mov	sl, r0
 81049de:	460c      	mov	r4, r1
 81049e0:	4690      	mov	r8, r2
 81049e2:	d82d      	bhi.n	8104a40 <__ssputs_r+0x70>
 81049e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81049e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 81049ec:	d026      	beq.n	8104a3c <__ssputs_r+0x6c>
 81049ee:	6965      	ldr	r5, [r4, #20]
 81049f0:	6909      	ldr	r1, [r1, #16]
 81049f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81049f6:	eba3 0901 	sub.w	r9, r3, r1
 81049fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81049fe:	1c7b      	adds	r3, r7, #1
 8104a00:	444b      	add	r3, r9
 8104a02:	106d      	asrs	r5, r5, #1
 8104a04:	429d      	cmp	r5, r3
 8104a06:	bf38      	it	cc
 8104a08:	461d      	movcc	r5, r3
 8104a0a:	0553      	lsls	r3, r2, #21
 8104a0c:	d527      	bpl.n	8104a5e <__ssputs_r+0x8e>
 8104a0e:	4629      	mov	r1, r5
 8104a10:	f7ff ff52 	bl	81048b8 <_malloc_r>
 8104a14:	4606      	mov	r6, r0
 8104a16:	b360      	cbz	r0, 8104a72 <__ssputs_r+0xa2>
 8104a18:	6921      	ldr	r1, [r4, #16]
 8104a1a:	464a      	mov	r2, r9
 8104a1c:	f7ff fed2 	bl	81047c4 <memcpy>
 8104a20:	89a3      	ldrh	r3, [r4, #12]
 8104a22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8104a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8104a2a:	81a3      	strh	r3, [r4, #12]
 8104a2c:	6126      	str	r6, [r4, #16]
 8104a2e:	6165      	str	r5, [r4, #20]
 8104a30:	444e      	add	r6, r9
 8104a32:	eba5 0509 	sub.w	r5, r5, r9
 8104a36:	6026      	str	r6, [r4, #0]
 8104a38:	60a5      	str	r5, [r4, #8]
 8104a3a:	463e      	mov	r6, r7
 8104a3c:	42be      	cmp	r6, r7
 8104a3e:	d900      	bls.n	8104a42 <__ssputs_r+0x72>
 8104a40:	463e      	mov	r6, r7
 8104a42:	6820      	ldr	r0, [r4, #0]
 8104a44:	4632      	mov	r2, r6
 8104a46:	4641      	mov	r1, r8
 8104a48:	f000 faa8 	bl	8104f9c <memmove>
 8104a4c:	68a3      	ldr	r3, [r4, #8]
 8104a4e:	1b9b      	subs	r3, r3, r6
 8104a50:	60a3      	str	r3, [r4, #8]
 8104a52:	6823      	ldr	r3, [r4, #0]
 8104a54:	4433      	add	r3, r6
 8104a56:	6023      	str	r3, [r4, #0]
 8104a58:	2000      	movs	r0, #0
 8104a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104a5e:	462a      	mov	r2, r5
 8104a60:	f000 fac6 	bl	8104ff0 <_realloc_r>
 8104a64:	4606      	mov	r6, r0
 8104a66:	2800      	cmp	r0, #0
 8104a68:	d1e0      	bne.n	8104a2c <__ssputs_r+0x5c>
 8104a6a:	6921      	ldr	r1, [r4, #16]
 8104a6c:	4650      	mov	r0, sl
 8104a6e:	f7ff feb7 	bl	81047e0 <_free_r>
 8104a72:	230c      	movs	r3, #12
 8104a74:	f8ca 3000 	str.w	r3, [sl]
 8104a78:	89a3      	ldrh	r3, [r4, #12]
 8104a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8104a7e:	81a3      	strh	r3, [r4, #12]
 8104a80:	f04f 30ff 	mov.w	r0, #4294967295
 8104a84:	e7e9      	b.n	8104a5a <__ssputs_r+0x8a>
	...

08104a88 <_svfiprintf_r>:
 8104a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104a8c:	4698      	mov	r8, r3
 8104a8e:	898b      	ldrh	r3, [r1, #12]
 8104a90:	061b      	lsls	r3, r3, #24
 8104a92:	b09d      	sub	sp, #116	@ 0x74
 8104a94:	4607      	mov	r7, r0
 8104a96:	460d      	mov	r5, r1
 8104a98:	4614      	mov	r4, r2
 8104a9a:	d510      	bpl.n	8104abe <_svfiprintf_r+0x36>
 8104a9c:	690b      	ldr	r3, [r1, #16]
 8104a9e:	b973      	cbnz	r3, 8104abe <_svfiprintf_r+0x36>
 8104aa0:	2140      	movs	r1, #64	@ 0x40
 8104aa2:	f7ff ff09 	bl	81048b8 <_malloc_r>
 8104aa6:	6028      	str	r0, [r5, #0]
 8104aa8:	6128      	str	r0, [r5, #16]
 8104aaa:	b930      	cbnz	r0, 8104aba <_svfiprintf_r+0x32>
 8104aac:	230c      	movs	r3, #12
 8104aae:	603b      	str	r3, [r7, #0]
 8104ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8104ab4:	b01d      	add	sp, #116	@ 0x74
 8104ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104aba:	2340      	movs	r3, #64	@ 0x40
 8104abc:	616b      	str	r3, [r5, #20]
 8104abe:	2300      	movs	r3, #0
 8104ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8104ac2:	2320      	movs	r3, #32
 8104ac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8104ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8104acc:	2330      	movs	r3, #48	@ 0x30
 8104ace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8104c6c <_svfiprintf_r+0x1e4>
 8104ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8104ad6:	f04f 0901 	mov.w	r9, #1
 8104ada:	4623      	mov	r3, r4
 8104adc:	469a      	mov	sl, r3
 8104ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8104ae2:	b10a      	cbz	r2, 8104ae8 <_svfiprintf_r+0x60>
 8104ae4:	2a25      	cmp	r2, #37	@ 0x25
 8104ae6:	d1f9      	bne.n	8104adc <_svfiprintf_r+0x54>
 8104ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8104aec:	d00b      	beq.n	8104b06 <_svfiprintf_r+0x7e>
 8104aee:	465b      	mov	r3, fp
 8104af0:	4622      	mov	r2, r4
 8104af2:	4629      	mov	r1, r5
 8104af4:	4638      	mov	r0, r7
 8104af6:	f7ff ff6b 	bl	81049d0 <__ssputs_r>
 8104afa:	3001      	adds	r0, #1
 8104afc:	f000 80a7 	beq.w	8104c4e <_svfiprintf_r+0x1c6>
 8104b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8104b02:	445a      	add	r2, fp
 8104b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8104b06:	f89a 3000 	ldrb.w	r3, [sl]
 8104b0a:	2b00      	cmp	r3, #0
 8104b0c:	f000 809f 	beq.w	8104c4e <_svfiprintf_r+0x1c6>
 8104b10:	2300      	movs	r3, #0
 8104b12:	f04f 32ff 	mov.w	r2, #4294967295
 8104b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8104b1a:	f10a 0a01 	add.w	sl, sl, #1
 8104b1e:	9304      	str	r3, [sp, #16]
 8104b20:	9307      	str	r3, [sp, #28]
 8104b22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8104b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8104b28:	4654      	mov	r4, sl
 8104b2a:	2205      	movs	r2, #5
 8104b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8104b30:	484e      	ldr	r0, [pc, #312]	@ (8104c6c <_svfiprintf_r+0x1e4>)
 8104b32:	f7fb fbdd 	bl	81002f0 <memchr>
 8104b36:	9a04      	ldr	r2, [sp, #16]
 8104b38:	b9d8      	cbnz	r0, 8104b72 <_svfiprintf_r+0xea>
 8104b3a:	06d0      	lsls	r0, r2, #27
 8104b3c:	bf44      	itt	mi
 8104b3e:	2320      	movmi	r3, #32
 8104b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8104b44:	0711      	lsls	r1, r2, #28
 8104b46:	bf44      	itt	mi
 8104b48:	232b      	movmi	r3, #43	@ 0x2b
 8104b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8104b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8104b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8104b54:	d015      	beq.n	8104b82 <_svfiprintf_r+0xfa>
 8104b56:	9a07      	ldr	r2, [sp, #28]
 8104b58:	4654      	mov	r4, sl
 8104b5a:	2000      	movs	r0, #0
 8104b5c:	f04f 0c0a 	mov.w	ip, #10
 8104b60:	4621      	mov	r1, r4
 8104b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8104b66:	3b30      	subs	r3, #48	@ 0x30
 8104b68:	2b09      	cmp	r3, #9
 8104b6a:	d94b      	bls.n	8104c04 <_svfiprintf_r+0x17c>
 8104b6c:	b1b0      	cbz	r0, 8104b9c <_svfiprintf_r+0x114>
 8104b6e:	9207      	str	r2, [sp, #28]
 8104b70:	e014      	b.n	8104b9c <_svfiprintf_r+0x114>
 8104b72:	eba0 0308 	sub.w	r3, r0, r8
 8104b76:	fa09 f303 	lsl.w	r3, r9, r3
 8104b7a:	4313      	orrs	r3, r2
 8104b7c:	9304      	str	r3, [sp, #16]
 8104b7e:	46a2      	mov	sl, r4
 8104b80:	e7d2      	b.n	8104b28 <_svfiprintf_r+0xa0>
 8104b82:	9b03      	ldr	r3, [sp, #12]
 8104b84:	1d19      	adds	r1, r3, #4
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	9103      	str	r1, [sp, #12]
 8104b8a:	2b00      	cmp	r3, #0
 8104b8c:	bfbb      	ittet	lt
 8104b8e:	425b      	neglt	r3, r3
 8104b90:	f042 0202 	orrlt.w	r2, r2, #2
 8104b94:	9307      	strge	r3, [sp, #28]
 8104b96:	9307      	strlt	r3, [sp, #28]
 8104b98:	bfb8      	it	lt
 8104b9a:	9204      	strlt	r2, [sp, #16]
 8104b9c:	7823      	ldrb	r3, [r4, #0]
 8104b9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8104ba0:	d10a      	bne.n	8104bb8 <_svfiprintf_r+0x130>
 8104ba2:	7863      	ldrb	r3, [r4, #1]
 8104ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8104ba6:	d132      	bne.n	8104c0e <_svfiprintf_r+0x186>
 8104ba8:	9b03      	ldr	r3, [sp, #12]
 8104baa:	1d1a      	adds	r2, r3, #4
 8104bac:	681b      	ldr	r3, [r3, #0]
 8104bae:	9203      	str	r2, [sp, #12]
 8104bb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8104bb4:	3402      	adds	r4, #2
 8104bb6:	9305      	str	r3, [sp, #20]
 8104bb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8104c7c <_svfiprintf_r+0x1f4>
 8104bbc:	7821      	ldrb	r1, [r4, #0]
 8104bbe:	2203      	movs	r2, #3
 8104bc0:	4650      	mov	r0, sl
 8104bc2:	f7fb fb95 	bl	81002f0 <memchr>
 8104bc6:	b138      	cbz	r0, 8104bd8 <_svfiprintf_r+0x150>
 8104bc8:	9b04      	ldr	r3, [sp, #16]
 8104bca:	eba0 000a 	sub.w	r0, r0, sl
 8104bce:	2240      	movs	r2, #64	@ 0x40
 8104bd0:	4082      	lsls	r2, r0
 8104bd2:	4313      	orrs	r3, r2
 8104bd4:	3401      	adds	r4, #1
 8104bd6:	9304      	str	r3, [sp, #16]
 8104bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8104bdc:	4824      	ldr	r0, [pc, #144]	@ (8104c70 <_svfiprintf_r+0x1e8>)
 8104bde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8104be2:	2206      	movs	r2, #6
 8104be4:	f7fb fb84 	bl	81002f0 <memchr>
 8104be8:	2800      	cmp	r0, #0
 8104bea:	d036      	beq.n	8104c5a <_svfiprintf_r+0x1d2>
 8104bec:	4b21      	ldr	r3, [pc, #132]	@ (8104c74 <_svfiprintf_r+0x1ec>)
 8104bee:	bb1b      	cbnz	r3, 8104c38 <_svfiprintf_r+0x1b0>
 8104bf0:	9b03      	ldr	r3, [sp, #12]
 8104bf2:	3307      	adds	r3, #7
 8104bf4:	f023 0307 	bic.w	r3, r3, #7
 8104bf8:	3308      	adds	r3, #8
 8104bfa:	9303      	str	r3, [sp, #12]
 8104bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8104bfe:	4433      	add	r3, r6
 8104c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8104c02:	e76a      	b.n	8104ada <_svfiprintf_r+0x52>
 8104c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8104c08:	460c      	mov	r4, r1
 8104c0a:	2001      	movs	r0, #1
 8104c0c:	e7a8      	b.n	8104b60 <_svfiprintf_r+0xd8>
 8104c0e:	2300      	movs	r3, #0
 8104c10:	3401      	adds	r4, #1
 8104c12:	9305      	str	r3, [sp, #20]
 8104c14:	4619      	mov	r1, r3
 8104c16:	f04f 0c0a 	mov.w	ip, #10
 8104c1a:	4620      	mov	r0, r4
 8104c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8104c20:	3a30      	subs	r2, #48	@ 0x30
 8104c22:	2a09      	cmp	r2, #9
 8104c24:	d903      	bls.n	8104c2e <_svfiprintf_r+0x1a6>
 8104c26:	2b00      	cmp	r3, #0
 8104c28:	d0c6      	beq.n	8104bb8 <_svfiprintf_r+0x130>
 8104c2a:	9105      	str	r1, [sp, #20]
 8104c2c:	e7c4      	b.n	8104bb8 <_svfiprintf_r+0x130>
 8104c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8104c32:	4604      	mov	r4, r0
 8104c34:	2301      	movs	r3, #1
 8104c36:	e7f0      	b.n	8104c1a <_svfiprintf_r+0x192>
 8104c38:	ab03      	add	r3, sp, #12
 8104c3a:	9300      	str	r3, [sp, #0]
 8104c3c:	462a      	mov	r2, r5
 8104c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8104c78 <_svfiprintf_r+0x1f0>)
 8104c40:	a904      	add	r1, sp, #16
 8104c42:	4638      	mov	r0, r7
 8104c44:	f3af 8000 	nop.w
 8104c48:	1c42      	adds	r2, r0, #1
 8104c4a:	4606      	mov	r6, r0
 8104c4c:	d1d6      	bne.n	8104bfc <_svfiprintf_r+0x174>
 8104c4e:	89ab      	ldrh	r3, [r5, #12]
 8104c50:	065b      	lsls	r3, r3, #25
 8104c52:	f53f af2d 	bmi.w	8104ab0 <_svfiprintf_r+0x28>
 8104c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8104c58:	e72c      	b.n	8104ab4 <_svfiprintf_r+0x2c>
 8104c5a:	ab03      	add	r3, sp, #12
 8104c5c:	9300      	str	r3, [sp, #0]
 8104c5e:	462a      	mov	r2, r5
 8104c60:	4b05      	ldr	r3, [pc, #20]	@ (8104c78 <_svfiprintf_r+0x1f0>)
 8104c62:	a904      	add	r1, sp, #16
 8104c64:	4638      	mov	r0, r7
 8104c66:	f000 f879 	bl	8104d5c <_printf_i>
 8104c6a:	e7ed      	b.n	8104c48 <_svfiprintf_r+0x1c0>
 8104c6c:	081050dc 	.word	0x081050dc
 8104c70:	081050e6 	.word	0x081050e6
 8104c74:	00000000 	.word	0x00000000
 8104c78:	081049d1 	.word	0x081049d1
 8104c7c:	081050e2 	.word	0x081050e2

08104c80 <_printf_common>:
 8104c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8104c84:	4616      	mov	r6, r2
 8104c86:	4698      	mov	r8, r3
 8104c88:	688a      	ldr	r2, [r1, #8]
 8104c8a:	690b      	ldr	r3, [r1, #16]
 8104c8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8104c90:	4293      	cmp	r3, r2
 8104c92:	bfb8      	it	lt
 8104c94:	4613      	movlt	r3, r2
 8104c96:	6033      	str	r3, [r6, #0]
 8104c98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8104c9c:	4607      	mov	r7, r0
 8104c9e:	460c      	mov	r4, r1
 8104ca0:	b10a      	cbz	r2, 8104ca6 <_printf_common+0x26>
 8104ca2:	3301      	adds	r3, #1
 8104ca4:	6033      	str	r3, [r6, #0]
 8104ca6:	6823      	ldr	r3, [r4, #0]
 8104ca8:	0699      	lsls	r1, r3, #26
 8104caa:	bf42      	ittt	mi
 8104cac:	6833      	ldrmi	r3, [r6, #0]
 8104cae:	3302      	addmi	r3, #2
 8104cb0:	6033      	strmi	r3, [r6, #0]
 8104cb2:	6825      	ldr	r5, [r4, #0]
 8104cb4:	f015 0506 	ands.w	r5, r5, #6
 8104cb8:	d106      	bne.n	8104cc8 <_printf_common+0x48>
 8104cba:	f104 0a19 	add.w	sl, r4, #25
 8104cbe:	68e3      	ldr	r3, [r4, #12]
 8104cc0:	6832      	ldr	r2, [r6, #0]
 8104cc2:	1a9b      	subs	r3, r3, r2
 8104cc4:	42ab      	cmp	r3, r5
 8104cc6:	dc26      	bgt.n	8104d16 <_printf_common+0x96>
 8104cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8104ccc:	6822      	ldr	r2, [r4, #0]
 8104cce:	3b00      	subs	r3, #0
 8104cd0:	bf18      	it	ne
 8104cd2:	2301      	movne	r3, #1
 8104cd4:	0692      	lsls	r2, r2, #26
 8104cd6:	d42b      	bmi.n	8104d30 <_printf_common+0xb0>
 8104cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8104cdc:	4641      	mov	r1, r8
 8104cde:	4638      	mov	r0, r7
 8104ce0:	47c8      	blx	r9
 8104ce2:	3001      	adds	r0, #1
 8104ce4:	d01e      	beq.n	8104d24 <_printf_common+0xa4>
 8104ce6:	6823      	ldr	r3, [r4, #0]
 8104ce8:	6922      	ldr	r2, [r4, #16]
 8104cea:	f003 0306 	and.w	r3, r3, #6
 8104cee:	2b04      	cmp	r3, #4
 8104cf0:	bf02      	ittt	eq
 8104cf2:	68e5      	ldreq	r5, [r4, #12]
 8104cf4:	6833      	ldreq	r3, [r6, #0]
 8104cf6:	1aed      	subeq	r5, r5, r3
 8104cf8:	68a3      	ldr	r3, [r4, #8]
 8104cfa:	bf0c      	ite	eq
 8104cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8104d00:	2500      	movne	r5, #0
 8104d02:	4293      	cmp	r3, r2
 8104d04:	bfc4      	itt	gt
 8104d06:	1a9b      	subgt	r3, r3, r2
 8104d08:	18ed      	addgt	r5, r5, r3
 8104d0a:	2600      	movs	r6, #0
 8104d0c:	341a      	adds	r4, #26
 8104d0e:	42b5      	cmp	r5, r6
 8104d10:	d11a      	bne.n	8104d48 <_printf_common+0xc8>
 8104d12:	2000      	movs	r0, #0
 8104d14:	e008      	b.n	8104d28 <_printf_common+0xa8>
 8104d16:	2301      	movs	r3, #1
 8104d18:	4652      	mov	r2, sl
 8104d1a:	4641      	mov	r1, r8
 8104d1c:	4638      	mov	r0, r7
 8104d1e:	47c8      	blx	r9
 8104d20:	3001      	adds	r0, #1
 8104d22:	d103      	bne.n	8104d2c <_printf_common+0xac>
 8104d24:	f04f 30ff 	mov.w	r0, #4294967295
 8104d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104d2c:	3501      	adds	r5, #1
 8104d2e:	e7c6      	b.n	8104cbe <_printf_common+0x3e>
 8104d30:	18e1      	adds	r1, r4, r3
 8104d32:	1c5a      	adds	r2, r3, #1
 8104d34:	2030      	movs	r0, #48	@ 0x30
 8104d36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8104d3a:	4422      	add	r2, r4
 8104d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8104d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8104d44:	3302      	adds	r3, #2
 8104d46:	e7c7      	b.n	8104cd8 <_printf_common+0x58>
 8104d48:	2301      	movs	r3, #1
 8104d4a:	4622      	mov	r2, r4
 8104d4c:	4641      	mov	r1, r8
 8104d4e:	4638      	mov	r0, r7
 8104d50:	47c8      	blx	r9
 8104d52:	3001      	adds	r0, #1
 8104d54:	d0e6      	beq.n	8104d24 <_printf_common+0xa4>
 8104d56:	3601      	adds	r6, #1
 8104d58:	e7d9      	b.n	8104d0e <_printf_common+0x8e>
	...

08104d5c <_printf_i>:
 8104d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8104d60:	7e0f      	ldrb	r7, [r1, #24]
 8104d62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8104d64:	2f78      	cmp	r7, #120	@ 0x78
 8104d66:	4691      	mov	r9, r2
 8104d68:	4680      	mov	r8, r0
 8104d6a:	460c      	mov	r4, r1
 8104d6c:	469a      	mov	sl, r3
 8104d6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8104d72:	d807      	bhi.n	8104d84 <_printf_i+0x28>
 8104d74:	2f62      	cmp	r7, #98	@ 0x62
 8104d76:	d80a      	bhi.n	8104d8e <_printf_i+0x32>
 8104d78:	2f00      	cmp	r7, #0
 8104d7a:	f000 80d2 	beq.w	8104f22 <_printf_i+0x1c6>
 8104d7e:	2f58      	cmp	r7, #88	@ 0x58
 8104d80:	f000 80b9 	beq.w	8104ef6 <_printf_i+0x19a>
 8104d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8104d88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8104d8c:	e03a      	b.n	8104e04 <_printf_i+0xa8>
 8104d8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8104d92:	2b15      	cmp	r3, #21
 8104d94:	d8f6      	bhi.n	8104d84 <_printf_i+0x28>
 8104d96:	a101      	add	r1, pc, #4	@ (adr r1, 8104d9c <_printf_i+0x40>)
 8104d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8104d9c:	08104df5 	.word	0x08104df5
 8104da0:	08104e09 	.word	0x08104e09
 8104da4:	08104d85 	.word	0x08104d85
 8104da8:	08104d85 	.word	0x08104d85
 8104dac:	08104d85 	.word	0x08104d85
 8104db0:	08104d85 	.word	0x08104d85
 8104db4:	08104e09 	.word	0x08104e09
 8104db8:	08104d85 	.word	0x08104d85
 8104dbc:	08104d85 	.word	0x08104d85
 8104dc0:	08104d85 	.word	0x08104d85
 8104dc4:	08104d85 	.word	0x08104d85
 8104dc8:	08104f09 	.word	0x08104f09
 8104dcc:	08104e33 	.word	0x08104e33
 8104dd0:	08104ec3 	.word	0x08104ec3
 8104dd4:	08104d85 	.word	0x08104d85
 8104dd8:	08104d85 	.word	0x08104d85
 8104ddc:	08104f2b 	.word	0x08104f2b
 8104de0:	08104d85 	.word	0x08104d85
 8104de4:	08104e33 	.word	0x08104e33
 8104de8:	08104d85 	.word	0x08104d85
 8104dec:	08104d85 	.word	0x08104d85
 8104df0:	08104ecb 	.word	0x08104ecb
 8104df4:	6833      	ldr	r3, [r6, #0]
 8104df6:	1d1a      	adds	r2, r3, #4
 8104df8:	681b      	ldr	r3, [r3, #0]
 8104dfa:	6032      	str	r2, [r6, #0]
 8104dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8104e00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8104e04:	2301      	movs	r3, #1
 8104e06:	e09d      	b.n	8104f44 <_printf_i+0x1e8>
 8104e08:	6833      	ldr	r3, [r6, #0]
 8104e0a:	6820      	ldr	r0, [r4, #0]
 8104e0c:	1d19      	adds	r1, r3, #4
 8104e0e:	6031      	str	r1, [r6, #0]
 8104e10:	0606      	lsls	r6, r0, #24
 8104e12:	d501      	bpl.n	8104e18 <_printf_i+0xbc>
 8104e14:	681d      	ldr	r5, [r3, #0]
 8104e16:	e003      	b.n	8104e20 <_printf_i+0xc4>
 8104e18:	0645      	lsls	r5, r0, #25
 8104e1a:	d5fb      	bpl.n	8104e14 <_printf_i+0xb8>
 8104e1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8104e20:	2d00      	cmp	r5, #0
 8104e22:	da03      	bge.n	8104e2c <_printf_i+0xd0>
 8104e24:	232d      	movs	r3, #45	@ 0x2d
 8104e26:	426d      	negs	r5, r5
 8104e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8104e2c:	4859      	ldr	r0, [pc, #356]	@ (8104f94 <_printf_i+0x238>)
 8104e2e:	230a      	movs	r3, #10
 8104e30:	e011      	b.n	8104e56 <_printf_i+0xfa>
 8104e32:	6821      	ldr	r1, [r4, #0]
 8104e34:	6833      	ldr	r3, [r6, #0]
 8104e36:	0608      	lsls	r0, r1, #24
 8104e38:	f853 5b04 	ldr.w	r5, [r3], #4
 8104e3c:	d402      	bmi.n	8104e44 <_printf_i+0xe8>
 8104e3e:	0649      	lsls	r1, r1, #25
 8104e40:	bf48      	it	mi
 8104e42:	b2ad      	uxthmi	r5, r5
 8104e44:	2f6f      	cmp	r7, #111	@ 0x6f
 8104e46:	4853      	ldr	r0, [pc, #332]	@ (8104f94 <_printf_i+0x238>)
 8104e48:	6033      	str	r3, [r6, #0]
 8104e4a:	bf14      	ite	ne
 8104e4c:	230a      	movne	r3, #10
 8104e4e:	2308      	moveq	r3, #8
 8104e50:	2100      	movs	r1, #0
 8104e52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8104e56:	6866      	ldr	r6, [r4, #4]
 8104e58:	60a6      	str	r6, [r4, #8]
 8104e5a:	2e00      	cmp	r6, #0
 8104e5c:	bfa2      	ittt	ge
 8104e5e:	6821      	ldrge	r1, [r4, #0]
 8104e60:	f021 0104 	bicge.w	r1, r1, #4
 8104e64:	6021      	strge	r1, [r4, #0]
 8104e66:	b90d      	cbnz	r5, 8104e6c <_printf_i+0x110>
 8104e68:	2e00      	cmp	r6, #0
 8104e6a:	d04b      	beq.n	8104f04 <_printf_i+0x1a8>
 8104e6c:	4616      	mov	r6, r2
 8104e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8104e72:	fb03 5711 	mls	r7, r3, r1, r5
 8104e76:	5dc7      	ldrb	r7, [r0, r7]
 8104e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8104e7c:	462f      	mov	r7, r5
 8104e7e:	42bb      	cmp	r3, r7
 8104e80:	460d      	mov	r5, r1
 8104e82:	d9f4      	bls.n	8104e6e <_printf_i+0x112>
 8104e84:	2b08      	cmp	r3, #8
 8104e86:	d10b      	bne.n	8104ea0 <_printf_i+0x144>
 8104e88:	6823      	ldr	r3, [r4, #0]
 8104e8a:	07df      	lsls	r7, r3, #31
 8104e8c:	d508      	bpl.n	8104ea0 <_printf_i+0x144>
 8104e8e:	6923      	ldr	r3, [r4, #16]
 8104e90:	6861      	ldr	r1, [r4, #4]
 8104e92:	4299      	cmp	r1, r3
 8104e94:	bfde      	ittt	le
 8104e96:	2330      	movle	r3, #48	@ 0x30
 8104e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8104e9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8104ea0:	1b92      	subs	r2, r2, r6
 8104ea2:	6122      	str	r2, [r4, #16]
 8104ea4:	f8cd a000 	str.w	sl, [sp]
 8104ea8:	464b      	mov	r3, r9
 8104eaa:	aa03      	add	r2, sp, #12
 8104eac:	4621      	mov	r1, r4
 8104eae:	4640      	mov	r0, r8
 8104eb0:	f7ff fee6 	bl	8104c80 <_printf_common>
 8104eb4:	3001      	adds	r0, #1
 8104eb6:	d14a      	bne.n	8104f4e <_printf_i+0x1f2>
 8104eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8104ebc:	b004      	add	sp, #16
 8104ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104ec2:	6823      	ldr	r3, [r4, #0]
 8104ec4:	f043 0320 	orr.w	r3, r3, #32
 8104ec8:	6023      	str	r3, [r4, #0]
 8104eca:	4833      	ldr	r0, [pc, #204]	@ (8104f98 <_printf_i+0x23c>)
 8104ecc:	2778      	movs	r7, #120	@ 0x78
 8104ece:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8104ed2:	6823      	ldr	r3, [r4, #0]
 8104ed4:	6831      	ldr	r1, [r6, #0]
 8104ed6:	061f      	lsls	r7, r3, #24
 8104ed8:	f851 5b04 	ldr.w	r5, [r1], #4
 8104edc:	d402      	bmi.n	8104ee4 <_printf_i+0x188>
 8104ede:	065f      	lsls	r7, r3, #25
 8104ee0:	bf48      	it	mi
 8104ee2:	b2ad      	uxthmi	r5, r5
 8104ee4:	6031      	str	r1, [r6, #0]
 8104ee6:	07d9      	lsls	r1, r3, #31
 8104ee8:	bf44      	itt	mi
 8104eea:	f043 0320 	orrmi.w	r3, r3, #32
 8104eee:	6023      	strmi	r3, [r4, #0]
 8104ef0:	b11d      	cbz	r5, 8104efa <_printf_i+0x19e>
 8104ef2:	2310      	movs	r3, #16
 8104ef4:	e7ac      	b.n	8104e50 <_printf_i+0xf4>
 8104ef6:	4827      	ldr	r0, [pc, #156]	@ (8104f94 <_printf_i+0x238>)
 8104ef8:	e7e9      	b.n	8104ece <_printf_i+0x172>
 8104efa:	6823      	ldr	r3, [r4, #0]
 8104efc:	f023 0320 	bic.w	r3, r3, #32
 8104f00:	6023      	str	r3, [r4, #0]
 8104f02:	e7f6      	b.n	8104ef2 <_printf_i+0x196>
 8104f04:	4616      	mov	r6, r2
 8104f06:	e7bd      	b.n	8104e84 <_printf_i+0x128>
 8104f08:	6833      	ldr	r3, [r6, #0]
 8104f0a:	6825      	ldr	r5, [r4, #0]
 8104f0c:	6961      	ldr	r1, [r4, #20]
 8104f0e:	1d18      	adds	r0, r3, #4
 8104f10:	6030      	str	r0, [r6, #0]
 8104f12:	062e      	lsls	r6, r5, #24
 8104f14:	681b      	ldr	r3, [r3, #0]
 8104f16:	d501      	bpl.n	8104f1c <_printf_i+0x1c0>
 8104f18:	6019      	str	r1, [r3, #0]
 8104f1a:	e002      	b.n	8104f22 <_printf_i+0x1c6>
 8104f1c:	0668      	lsls	r0, r5, #25
 8104f1e:	d5fb      	bpl.n	8104f18 <_printf_i+0x1bc>
 8104f20:	8019      	strh	r1, [r3, #0]
 8104f22:	2300      	movs	r3, #0
 8104f24:	6123      	str	r3, [r4, #16]
 8104f26:	4616      	mov	r6, r2
 8104f28:	e7bc      	b.n	8104ea4 <_printf_i+0x148>
 8104f2a:	6833      	ldr	r3, [r6, #0]
 8104f2c:	1d1a      	adds	r2, r3, #4
 8104f2e:	6032      	str	r2, [r6, #0]
 8104f30:	681e      	ldr	r6, [r3, #0]
 8104f32:	6862      	ldr	r2, [r4, #4]
 8104f34:	2100      	movs	r1, #0
 8104f36:	4630      	mov	r0, r6
 8104f38:	f7fb f9da 	bl	81002f0 <memchr>
 8104f3c:	b108      	cbz	r0, 8104f42 <_printf_i+0x1e6>
 8104f3e:	1b80      	subs	r0, r0, r6
 8104f40:	6060      	str	r0, [r4, #4]
 8104f42:	6863      	ldr	r3, [r4, #4]
 8104f44:	6123      	str	r3, [r4, #16]
 8104f46:	2300      	movs	r3, #0
 8104f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8104f4c:	e7aa      	b.n	8104ea4 <_printf_i+0x148>
 8104f4e:	6923      	ldr	r3, [r4, #16]
 8104f50:	4632      	mov	r2, r6
 8104f52:	4649      	mov	r1, r9
 8104f54:	4640      	mov	r0, r8
 8104f56:	47d0      	blx	sl
 8104f58:	3001      	adds	r0, #1
 8104f5a:	d0ad      	beq.n	8104eb8 <_printf_i+0x15c>
 8104f5c:	6823      	ldr	r3, [r4, #0]
 8104f5e:	079b      	lsls	r3, r3, #30
 8104f60:	d413      	bmi.n	8104f8a <_printf_i+0x22e>
 8104f62:	68e0      	ldr	r0, [r4, #12]
 8104f64:	9b03      	ldr	r3, [sp, #12]
 8104f66:	4298      	cmp	r0, r3
 8104f68:	bfb8      	it	lt
 8104f6a:	4618      	movlt	r0, r3
 8104f6c:	e7a6      	b.n	8104ebc <_printf_i+0x160>
 8104f6e:	2301      	movs	r3, #1
 8104f70:	4632      	mov	r2, r6
 8104f72:	4649      	mov	r1, r9
 8104f74:	4640      	mov	r0, r8
 8104f76:	47d0      	blx	sl
 8104f78:	3001      	adds	r0, #1
 8104f7a:	d09d      	beq.n	8104eb8 <_printf_i+0x15c>
 8104f7c:	3501      	adds	r5, #1
 8104f7e:	68e3      	ldr	r3, [r4, #12]
 8104f80:	9903      	ldr	r1, [sp, #12]
 8104f82:	1a5b      	subs	r3, r3, r1
 8104f84:	42ab      	cmp	r3, r5
 8104f86:	dcf2      	bgt.n	8104f6e <_printf_i+0x212>
 8104f88:	e7eb      	b.n	8104f62 <_printf_i+0x206>
 8104f8a:	2500      	movs	r5, #0
 8104f8c:	f104 0619 	add.w	r6, r4, #25
 8104f90:	e7f5      	b.n	8104f7e <_printf_i+0x222>
 8104f92:	bf00      	nop
 8104f94:	081050ed 	.word	0x081050ed
 8104f98:	081050fe 	.word	0x081050fe

08104f9c <memmove>:
 8104f9c:	4288      	cmp	r0, r1
 8104f9e:	b510      	push	{r4, lr}
 8104fa0:	eb01 0402 	add.w	r4, r1, r2
 8104fa4:	d902      	bls.n	8104fac <memmove+0x10>
 8104fa6:	4284      	cmp	r4, r0
 8104fa8:	4623      	mov	r3, r4
 8104faa:	d807      	bhi.n	8104fbc <memmove+0x20>
 8104fac:	1e43      	subs	r3, r0, #1
 8104fae:	42a1      	cmp	r1, r4
 8104fb0:	d008      	beq.n	8104fc4 <memmove+0x28>
 8104fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8104fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8104fba:	e7f8      	b.n	8104fae <memmove+0x12>
 8104fbc:	4402      	add	r2, r0
 8104fbe:	4601      	mov	r1, r0
 8104fc0:	428a      	cmp	r2, r1
 8104fc2:	d100      	bne.n	8104fc6 <memmove+0x2a>
 8104fc4:	bd10      	pop	{r4, pc}
 8104fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8104fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8104fce:	e7f7      	b.n	8104fc0 <memmove+0x24>

08104fd0 <_sbrk_r>:
 8104fd0:	b538      	push	{r3, r4, r5, lr}
 8104fd2:	4d06      	ldr	r5, [pc, #24]	@ (8104fec <_sbrk_r+0x1c>)
 8104fd4:	2300      	movs	r3, #0
 8104fd6:	4604      	mov	r4, r0
 8104fd8:	4608      	mov	r0, r1
 8104fda:	602b      	str	r3, [r5, #0]
 8104fdc:	f7fb fb8c 	bl	81006f8 <_sbrk>
 8104fe0:	1c43      	adds	r3, r0, #1
 8104fe2:	d102      	bne.n	8104fea <_sbrk_r+0x1a>
 8104fe4:	682b      	ldr	r3, [r5, #0]
 8104fe6:	b103      	cbz	r3, 8104fea <_sbrk_r+0x1a>
 8104fe8:	6023      	str	r3, [r4, #0]
 8104fea:	bd38      	pop	{r3, r4, r5, pc}
 8104fec:	10004bf4 	.word	0x10004bf4

08104ff0 <_realloc_r>:
 8104ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104ff4:	4680      	mov	r8, r0
 8104ff6:	4615      	mov	r5, r2
 8104ff8:	460c      	mov	r4, r1
 8104ffa:	b921      	cbnz	r1, 8105006 <_realloc_r+0x16>
 8104ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8105000:	4611      	mov	r1, r2
 8105002:	f7ff bc59 	b.w	81048b8 <_malloc_r>
 8105006:	b92a      	cbnz	r2, 8105014 <_realloc_r+0x24>
 8105008:	f7ff fbea 	bl	81047e0 <_free_r>
 810500c:	2400      	movs	r4, #0
 810500e:	4620      	mov	r0, r4
 8105010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8105014:	f000 f81a 	bl	810504c <_malloc_usable_size_r>
 8105018:	4285      	cmp	r5, r0
 810501a:	4606      	mov	r6, r0
 810501c:	d802      	bhi.n	8105024 <_realloc_r+0x34>
 810501e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8105022:	d8f4      	bhi.n	810500e <_realloc_r+0x1e>
 8105024:	4629      	mov	r1, r5
 8105026:	4640      	mov	r0, r8
 8105028:	f7ff fc46 	bl	81048b8 <_malloc_r>
 810502c:	4607      	mov	r7, r0
 810502e:	2800      	cmp	r0, #0
 8105030:	d0ec      	beq.n	810500c <_realloc_r+0x1c>
 8105032:	42b5      	cmp	r5, r6
 8105034:	462a      	mov	r2, r5
 8105036:	4621      	mov	r1, r4
 8105038:	bf28      	it	cs
 810503a:	4632      	movcs	r2, r6
 810503c:	f7ff fbc2 	bl	81047c4 <memcpy>
 8105040:	4621      	mov	r1, r4
 8105042:	4640      	mov	r0, r8
 8105044:	f7ff fbcc 	bl	81047e0 <_free_r>
 8105048:	463c      	mov	r4, r7
 810504a:	e7e0      	b.n	810500e <_realloc_r+0x1e>

0810504c <_malloc_usable_size_r>:
 810504c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8105050:	1f18      	subs	r0, r3, #4
 8105052:	2b00      	cmp	r3, #0
 8105054:	bfbc      	itt	lt
 8105056:	580b      	ldrlt	r3, [r1, r0]
 8105058:	18c0      	addlt	r0, r0, r3
 810505a:	4770      	bx	lr

0810505c <_init>:
 810505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810505e:	bf00      	nop
 8105060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105062:	bc08      	pop	{r3}
 8105064:	469e      	mov	lr, r3
 8105066:	4770      	bx	lr

08105068 <_fini>:
 8105068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810506a:	bf00      	nop
 810506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810506e:	bc08      	pop	{r3}
 8105070:	469e      	mov	lr, r3
 8105072:	4770      	bx	lr
